{
    "tools": {
        "main": [
            "main",
            "usage",
            "open",
            "err",
            "strcmp",
            "open",
            "err",
            "fstat",
            "err",
            "malloc",
            "errx",
            "read",
            "err",
            "close",
            "errx",
            "type",
            "errx",
            "type",
            "errx",
            "strcmp",
            "output_sections",
            "strcmp",
            "output_sections",
            "free",
            "close"
        ],
        "output_sections": [
            "output_sections",
            "strcmp",
            "strcmp",
            "warnx",
            "write",
            "err"
        ],
        "usage": [
            "usage",
            "warnx",
            "fprintf",
            "getprogname",
            "exit"
        ],
        "ch2num": [
            "ch2num"
        ]
    },
    "drivers/synopsys/usbotg": {
        "usb_print_message_var": [
            "usb_print_message_var",
            "va_start",
            "vsnprintf",
            "va_end"
        ],
        "usb_print_log_buffer": [
            "usb_print_log_buffer",
            "printf"
        ]
    },
    "drivers/synopsys/mipi": {
        "mipi_dsim_init": [
            "mipi_dsim_init",
            "dprintf",
            "mipi_dsim_init",
            "env_get",
            "assert",
            "panic",
            "DSIM_TOP_PLL_PARAM_P",
            "DSIM_TOP_PLL_PARAM_M",
            "DSIM_TOP_PLL_PARAM_N",
            "dprintf",
            "panic",
            "clock_gate",
            "clock_reset_device",
            "DSIM_CORE_CLKMGR_CFG_TO_CLK_DIVISION",
            "DSIM_CORE_CLKMGR_CFG_TX_ESC_CLK_DIVISION",
            "DSIM_CORE_PHY_IF_CFG_PHY_STOP_WAIT_TIME",
            "DSIM_CORE_PHY_IF_CFG_N_LANES",
            "clock_get_frequency",
            "CEIL_DIV",
            "clock_get_frequency",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "mipi_phy_test_reset",
            "mipi_phy_test_reset",
            "mipi_phy_test_reset",
            "DSIM_TOP_PLL_CTRL_HSFREQRANGE",
            "DSIM_TOP_PLL_PARAM_VCOCAP",
            "DSIM_TOP_PLL_PARAM_VCORANGE",
            "DSIM_TOP_PLL_PARAM_LPFCTRL",
            "DSIM_TOP_PLL_PARAM_ICPCTRL",
            "microsecond",
            "spin",
            "nanoseconds",
            "nanoseconds",
            "spin",
            "spin",
            "spin",
            "mipi_program_phy_hsfreqrange"
        ],
        "mipi_dsim_quiesce": [
            "mipi_dsim_quiesce",
            "dprintf",
            "mipi_dsim_quiesce",
            "mipi_is_interface_enabled",
            "mipi_phy_test_reset",
            "assertion",
            "spin",
            "clock_gate"
        ],
        "mipi_dsim_enable_high_speed": [
            "mipi_dsim_enable_high_speed",
            "mipi_is_interface_enabled",
            "mipi_program_phy_test_codes",
            "mipi_phy_read_mod_write"
        ],
        "mipi_dsim_enable_video": [
            "mipi_dsim_enable_video",
            "mipi_is_interface_enabled",
            "mipi_phy_toggle_shutdownz"
        ],
        "mipi_dsim_send_short_command": [
            "mipi_dsim_send_short_command",
            "mipi_is_interface_enabled",
            "DSIM_CORE_GEN_HDR_GEN_DT",
            "DSIM_CORE_GEN_HDR_GEN_WC_LSBYTE",
            "DSIM_CORE_GEN_HDR_GEN_WC_MSBYTE"
        ],
        "mipi_dsim_send_long_command": [
            "mipi_dsim_send_long_command",
            "mipi_is_interface_enabled",
            "mipi_dsim_send_short_command"
        ],
        "mipi_dsim_read_short_command": [
            "mipi_dsim_read_short_command",
            "mipi_is_interface_enabled",
            "mipi_dsim_send_short_command",
            "dprintf",
            "dprintf",
            "dprintf",
            "spin"
        ],
        "mipi_dsim_read_long_command": [
            "mipi_dsim_read_long_command",
            "mipi_is_interface_enabled",
            "mipi_dsim_send_short_command",
            "dprintf",
            "dprintf",
            "dprintf",
            "spin"
        ],
        "mipi_update_device_tree": [
            "mipi_update_device_tree",
            "printf",
            "sizeof",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "printf",
            "memcpy"
        ]
    },
    "drivers/synopsys/mipi/include/drivers/mipi": {},
    "drivers/analogix/displayport": {
        "dp_controller_start": [
            "dp_controller_start",
            "debug",
            "debug",
            "clock_gate",
            "clock_reset_device",
            "spin",
            "lpdp_init",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "install_int_handler",
            "event_init",
            "task_create",
            "task_start",
            "event_init",
            "reset",
            "unmask_int",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug"
        ],
        "dp_controller_stop": [
            "dp_controller_stop",
            "abort_edid",
            "displayport_enable_alpm",
            "dp_controller_stop_video",
            "mask_int",
            "dp_device_stop",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "callout_dequeue",
            "write_reg",
            "lpdp_quiesce",
            "clock_gate",
            "event_signal",
            "task_wait_on",
            "task_destroy"
        ],
        "dp_controller_wait_for_HPD_to_BL": [
            "dp_controller_wait_for_HPD_to_BL",
            "system_time",
            "debug",
            "spin",
            "debug"
        ],
        "dp_controller_wait_for_edp_hpd": [
            "dp_controller_wait_for_edp_hpd",
            "event_wait_timeout",
            "read_reg",
            "dp_device_start",
            "system_time"
        ],
        "dp_controller_validate_video": [
            "dp_controller_validate_video",
            "bzero",
            "sizeof",
            "bcopy",
            "sizeof",
            "validate_video"
        ],
        "dp_controller_get_max_lane_count": [
            "dp_controller_get_max_lane_count"
        ],
        "dp_controller_get_max_link_rate": [
            "dp_controller_get_max_link_rate"
        ],
        "dp_controller_get_min_lane_count": [
            "dp_controller_get_min_lane_count"
        ],
        "dp_controller_get_min_link_rate": [
            "dp_controller_get_min_link_rate"
        ],
        "dp_controller_set_link_rate": [
            "dp_controller_set_link_rate",
            "lpdp_set_link_rate"
        ],
        "dp_controller_get_link_rate": [
            "dp_controller_get_link_rate",
            "lpdp_get_link_rate"
        ],
        "dp_controller_set_lane_count": [
            "dp_controller_set_lane_count",
            "or_reg",
            "lpdp_phy_set_lane_count",
            "write_reg",
            "dp_controller_get_downspread",
            "SSC",
            "and_reg",
            "write_reg",
            "and_reg"
        ],
        "dp_controller_get_lane_count": [
            "dp_controller_get_lane_count",
            "read_reg"
        ],
        "dp_controller_get_supports_fast_link_training": [
            "dp_controller_get_supports_fast_link_training"
        ],
        "dp_controller_get_supports_downspread": [
            "dp_controller_get_supports_downspread",
            "lpdp_get_supports_downspread"
        ],
        "dp_controller_set_downspread": [
            "dp_controller_set_downspread",
            "lpdp_set_downspread"
        ],
        "dp_controller_get_downspread": [
            "dp_controller_get_downspread",
            "lpdp_get_downspread"
        ],
        "dp_controller_set_enhanced_mode": [
            "dp_controller_set_enhanced_mode",
            "or_reg",
            "and_reg"
        ],
        "dp_controller_get_enhanced_mode": [
            "dp_controller_get_enhanced_mode",
            "read_reg"
        ],
        "dp_controller_set_ASSR": [
            "dp_controller_set_ASSR",
            "or_reg",
            "and_reg"
        ],
        "dp_controller_get_ASSR": [
            "dp_controller_get_ASSR",
            "read_reg"
        ],
        "dp_controller_get_adjustment_levels": [
            "dp_controller_get_adjustment_levels",
            "dp_controller_get_lane_count",
            "lpdp_phy_get_adjustment_levels"
        ],
        "dp_controller_set_adjustment_levels": [
            "dp_controller_set_adjustment_levels",
            "lpdp_phy_set_adjustment_levels"
        ],
        "dp_controller_set_training_pattern": [
            "dp_controller_set_training_pattern",
            "debug",
            "write_reg"
        ],
        "dp_controller_get_training_pattern": [
            "dp_controller_get_training_pattern",
            "read_reg"
        ],
        "setup_aux_transaction": [
            "setup_aux_transaction",
            "write_reg",
            "DPTX_AUX_LENGTH",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg"
        ],
        "dp_controller_read_bytes_dpcd": [
            "dp_controller_read_bytes_dpcd",
            "debug",
            "__min",
            "setup_aux_transaction",
            "write_reg",
            "commit_aux_transaction",
            "read_reg",
            "debug",
            "debug",
            "__min",
            "debug",
            "read_reg",
            "sizeof",
            "debug"
        ],
        "dp_controller_read_bytes_i2c": [
            "dp_controller_read_bytes_i2c",
            "read_bytes_i2c_internal",
            "debug",
            "read_bytes_i2c_internal",
            "debug"
        ],
        "dp_controller_write_bytes_dpcd": [
            "dp_controller_write_bytes_dpcd",
            "debug",
            "setup_aux_transaction",
            "write_reg",
            "debug",
            "debug",
            "write_reg",
            "sizeof",
            "commit_aux_transaction",
            "debug"
        ],
        "issue_i2c_write_request": [
            "issue_i2c_write_request",
            "write_reg",
            "debug",
            "write_reg",
            "sizeof",
            "setup_aux_transaction",
            "commit_aux_transaction",
            "debug"
        ],
        "dp_controller_write_bytes_i2c": [
            "dp_controller_write_bytes_i2c",
            "debug",
            "task_sleep",
            "debug",
            "issue_i2c_write_request",
            "ulmin",
            "debug",
            "issue_i2c_write_request",
            "issue_i2c_write_request",
            "debug"
        ],
        "dp_controller_start_video": [
            "dp_controller_start_video",
            "bcopy",
            "sizeof",
            "get_edid_timings",
            "configure_video"
        ],
        "dp_controller_stop_video": [
            "dp_controller_stop_video",
            "and_reg",
            "and_reg"
        ],
        "dp_controller_video_configured": [
            "dp_controller_video_configured"
        ],
        "dp_controller_get_supports_alpm": [
            "dp_controller_get_supports_alpm"
        ],
        "dp_controller_enable_alpm": [
            "dp_controller_enable_alpm",
            "or_reg",
            "write_reg",
            "DPTX_VIDEO_TH_VALUE",
            "or_reg",
            "lpdp_phy_configure_alpm",
            "write_reg",
            "write_reg",
            "PHY_SLEEP_DIS",
            "and_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "DPTX_SLEEP_STANDBY_DELAY",
            "or_reg",
            "and_reg",
            "spin",
            "write_reg",
            "write_reg"
        ],
        "get_link_data_capture_and_compare": [
            "get_link_data_capture_and_compare",
            "spin",
            "validate_video_capture",
            "printf",
            "read_reg",
            "printf",
            "printf",
            "printf",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "printf",
            "read_reg",
            "read_reg",
            "read_reg",
            "read_reg",
            "dp_controller_get_link_rate",
            "printf",
            "printf",
            "dp_controller_read_bytes_dpcd",
            "printf",
            "printf"
        ]
    },
    "drivers/analogix/displayport/include/drivers/displayport": {},
    "drivers/primecell/pl080dmac": {
        "dma_init": [
            "dma_init",
            "clock_gate",
            "set_int_type",
            "install_int_handler",
            "unmask_int",
            "set_int_type",
            "install_int_handler",
            "unmask_int",
            "rPL080DMAC_CFG"
        ],
        "dma_execute_cmd": [
            "dma_execute_cmd",
            "event_init",
            "dma_execute_async",
            "event_wait"
        ],
        "dma_execute_async": [
            "dma_execute_async",
            "enter_critical_section",
            "exit_critical_section",
            "rPL080DMAC_INTTCCLR",
            "rPL080DMAC_INTERRCLR",
            "rPL080DMAC_CHCTRL",
            "rPL080DMAC_CHCFG",
            "rPL080DMAC_CHSRCADDR",
            "rPL080DMAC_CHDESTADDR",
            "rPL080DMAC_CHCTRL",
            "rPL080DMAC_CHCFG",
            "rPL080DMAC_CHDESTADDR",
            "rPL080DMAC_CHSRCADDR",
            "segment",
            "rPL080DMAC_CHLLI",
            "enter_critical_section",
            "exit_critical_section",
            "rPL080DMAC_CHCFG"
        ],
        "dma_cancel": [
            "dma_cancel",
            "system_time",
            "rPL080DMAC_CHCFG",
            "rPL080DMAC_ENBLDCHNLS",
            "time_has_elapsed",
            "panic"
        ],
        "dma_use_int": [
            "dma_use_int",
            "rPL080DMAC_CHCFG",
            "rPL080DMAC_CHCFG"
        ],
        "dma_poll": [
            "dma_poll",
            "enter_critical_section",
            "rPL080DMAC_INTTCSTATUS",
            "pl080dmac_tc_int_handler",
            "rPL080DMAC_INTERRSTATUS",
            "pl080dmac_err_int_handler",
            "exit_critical_section"
        ],
        "dma_set_aes": [
            "dma_set_aes",
            "supported"
        ]
    },
    "drivers/primecell/pl080dmac/include/drivers/primecell": {},
    "drivers/primecell/pl192vic": {
        "interrupt_init": [
            "interrupt_init",
            "edgeic_reset",
            "rVICINTENCLEAR",
            "rVICINTSELECT",
            "rVICSWPRIORITYMASK",
            "rVICVECTADDR",
            "rVICINTENABLE",
            "rVICINTSELECT",
            "arm_enable_fiqs",
            "exit_critical_section"
        ],
        "interrupt_mask_all": [
            "interrupt_mask_all",
            "rVICINTENCLEAR"
        ],
        "mask_int": [
            "mask_int",
            "enter_critical_section",
            "rVICINTENCLEAR",
            "SAVE_ENABLED",
            "exit_critical_section"
        ],
        "unmask_int": [
            "unmask_int",
            "enter_critical_section",
            "rVICINTENABLE",
            "SAVE_ENABLED",
            "exit_critical_section"
        ],
        "set_int_type": [
            "set_int_type",
            "enter_critical_section",
            "rVICINTSELECT",
            "SAVE_SELECT",
            "arm_enable_fiqs",
            "rVICINTSELECT",
            "SAVE_SELECT",
            "edgeic_select_edge",
            "panic",
            "exit_critical_section"
        ],
        "install_int_handler": [
            "install_int_handler",
            "enter_critical_section",
            "exit_critical_section"
        ],
        "platform_irq": [
            "platform_irq",
            "rVICIRQSTATUS",
            "rVICADDR",
            "printf",
            "edgeic_clear_interrupt",
            "panic",
            "handler",
            "void",
            "void",
            "crap_isr",
            "rVICADDR"
        ],
        "platform_fiq": [
            "platform_fiq",
            "rVICFIQSTATUS",
            "__builtin_ctz",
            "printf",
            "handler"
        ],
        "interrupt_generate_ipc": [
            "interrupt_generate_ipc",
            "rVICIPCSOFTINT"
        ],
        "interrupt_clear_ipc": [
            "interrupt_clear_ipc",
            "rVICSOFTINTCLEAR"
        ]
    },
    "drivers/iic": {
        "iic_init": [
            "iic_init",
            "dprintf",
            "iic_soft_init",
            "iic_soft_setup",
            "get_iic_soft_device"
        ],
        "iic_set_filter": [
            "iic_set_filter"
        ],
        "iic_set_frequency": [
            "iic_set_frequency"
        ],
        "iic_read": [
            "iic_read",
            "get_iic_soft_device",
            "_sendStart",
            "_writeByte",
            "_sendStop",
            "_writeByte",
            "_sendStop",
            "_sendStop",
            "_sendStart",
            "_sendRestart",
            "_writeByte",
            "_sendStop",
            "_readByte",
            "_sendStop"
        ],
        "iic_write": [
            "iic_write",
            "get_iic_soft_device",
            "_sendStart",
            "_writeByte",
            "_sendStop",
            "_writeByte",
            "_sendStop",
            "_sendStop"
        ],
        "iic_probe": [
            "iic_probe"
        ]
    },
    "drivers/nxp/cbtl1610": {
        "cbtl1610_set_usb_brick_detect": [
            "cbtl1610_set_usb_brick_detect",
            "tristar_read",
            "tristar_read",
            "tristar_write",
            "tristar_write"
        ],
        "cbtl1610_read_id": [
            "cbtl1610_read_id",
            "tristar_read",
            "tristar_read",
            "tristar_read"
        ],
        "cbtl1610_enable_acc_pwr": [
            "cbtl1610_enable_acc_pwr",
            "tristar_write",
            "power_enable_ldo",
            "tristar_write"
        ],
        "tristar_set_usb_brick_detect": [
            "tristar_set_usb_brick_detect",
            "target_has_tristar2",
            "cbtl1610_set_usb_brick_detect",
            "ths7383_set_usb_brick_detect"
        ],
        "tristar_read_id": [
            "tristar_read_id",
            "target_has_tristar2",
            "cbtl1610_read_id",
            "ths7383_read_id"
        ],
        "tristar_enable_acc_pwr": [
            "tristar_enable_acc_pwr",
            "target_has_tristar2",
            "cbtl1610_enable_acc_pwr",
            "ths7383_enable_acc_pwr"
        ]
    },
    "drivers/sha1": {
        "shaInit": [
            "shaInit",
            "constants"
        ],
        "shaUpdate": [
            "shaUpdate",
            "shaHashBlock"
        ],
        "shaFinal": [
            "shaFinal",
            "shaUpdate",
            "shaUpdate",
            "shaUpdate",
            "context",
            "shaInit"
        ],
        "shaBlock": [
            "shaBlock",
            "shaInit",
            "shaUpdate",
            "shaFinal"
        ],
        "test_sha1": [
            "test_sha1",
            "sizeof",
            "sha1_calculate",
            "TEST_ASSERT_MEM_EQ",
            "sizeof"
        ],
        "sha1_calculate": [
            "sha1_calculate",
            "arch_task_fp_enable",
            "ccdigest",
            "sha1_get_ccsha1_ccdigest_info"
        ]
    },
    "drivers/flash_nor": {
        "flash_nor_register": [
            "flash_nor_register",
            "construct_blockdev",
            "register_blockdev"
        ],
        "flash_nor_init": [
            "flash_nor_init",
            "flash_spi_init",
            "flash_spi_init",
            "dprintf"
        ]
    },
    "drivers/flash_nor/spi": {
        "flash_spi_init": [
            "flash_spi_init",
            "calloc",
            "sizeof",
            "free",
            "platform_get_spi_frequency",
            "flash_spi_probe",
            "free",
            "flash_nor_register"
        ]
    },
    "drivers/backlight/lp8559": {
        "beacon_reg_read": [
            "beacon_reg_read",
            "iic_read"
        ],
        "beacon_reg_write": [
            "beacon_reg_write",
            "iic_write"
        ],
        "lp8559_backlight_enable": [
            "lp8559_backlight_enable",
            "beacon_reg_read",
            "dprintf",
            "beacon_reg_read",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_write",
            "beacon_reg_read",
            "beacon_reg_write",
            "task_sleep",
            "dwi_send_backlight_command",
            "dwi_send_backlight_command"
        ]
    },
    "drivers/backlight/lm3534": {
        "lm3534_backlight_probe": [
            "lm3534_backlight_probe",
            "mib_get_u32",
            "mib_get_u32_opt",
            "mib_get_u32",
            "mib_get_u32_opt",
            "dprintf",
            "iic_read",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "lm3534_backlight_enable": [
            "lm3534_backlight_enable",
            "lm3534_backlight_probe",
            "dprintf",
            "target_lm3534_gpr",
            "iic_write",
            "mib_exists",
            "dprintf",
            "Threshold",
            "iic_write",
            "spin",
            "dwi_send_backlight_command",
            "dwi_send_backlight_command"
        ]
    },
    "drivers/uart": {
        "uart_init": [
            "uart_init",
            "uart_hw_init",
            "task_start",
            "task_create",
            "task_start",
            "task_create"
        ],
        "uart_getc": [
            "uart_getc",
            "uart_hw_getc",
            "task_yield"
        ],
        "uart_puts": [
            "uart_puts",
            "uart_putc"
        ],
        "uart_putc": [
            "uart_putc",
            "uart_hw_putc",
            "task_yield"
        ]
    },
    "drivers/uart/16x50": {
        "uart_hw_init": [
            "uart_hw_init",
            "uart_hw_init_extended"
        ],
        "uart_hw_init_extended": [
            "uart_hw_init_extended",
            "rLSR",
            "sizeof",
            "sizeof",
            "rIER",
            "clock_get_frequency",
            "rLCR",
            "rDLL",
            "rDLM",
            "rLCR",
            "rFCR"
        ],
        "uart_hw_set_rx_buf": [
            "uart_hw_set_rx_buf"
        ],
        "uart_hw_getc": [
            "uart_hw_getc",
            "sizeof",
            "sizeof",
            "rLSR",
            "rRBR"
        ],
        "uart_hw_putc": [
            "uart_hw_putc",
            "sizeof",
            "sizeof",
            "rLSR",
            "rTHR"
        ]
    },
    "drivers/hdc": {
        "hdc_init": [
            "hdc_init",
            "malloc",
            "sizeof",
            "panic",
            "construct_blockdev",
            "register_blockdev",
            "partition_scan_and_publish_subdevices"
        ]
    },
    "drivers/hdc/boot": {
        "sw_h2fmi_init": [
            "sw_h2fmi_init",
            "malloc",
            "sizeof",
            "dprintf",
            "memset",
            "sizeof",
            "construct_blockdev",
            "register_blockdev"
        ]
    },
    "drivers/intel/thunderbolt_nhi": {
        "nhi_debug_write": [
            "nhi_debug_write",
            "pci_config_write32",
            "pci_config_write32",
            "spin",
            "pci_config_read32",
            "spin",
            "spin"
        ],
        "nhi_debug_read": [
            "nhi_debug_read",
            "pci_config_write32",
            "spin",
            "pci_config_read32",
            "spin",
            "spin",
            "pci_config_read32"
        ],
        "nhi_dump_config_space": [
            "nhi_dump_config_space",
            "pci_find_extended_capability",
            "printf",
            "printf",
            "nhi_debug_read",
            "spin",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "nhi_debug_read",
            "spin",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "nhi_debug_read",
            "spin",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "nhi_quiesce_and_free": [
            "nhi_quiesce_and_free",
            "dart_unmap_page_range",
            "free",
            "nhi_quiesce_pci",
            "free",
            "free",
            "free",
            "dprintf"
        ],
        "nhi_init_tx_ring": [
            "nhi_init_tx_ring",
            "dprintf",
            "nhi_alloc_ring",
            "dprintf",
            "dprintf",
            "nhi_get_tx_buffer_desc",
            "memset",
            "sizeof",
            "nhi_ring_get_buffer_iovm_addr",
            "nhi_write_reg",
            "NHI_REG_TX_RING_ADDR_LO",
            "nhi_write_reg",
            "NHI_REG_TX_RING_ADDR_HI",
            "nhi_write_reg",
            "NHI_REG_TX_RING_SIZE",
            "nhi_write_reg",
            "NHI_REG_TX_TABLE_FLAGS"
        ],
        "nhi_disable_tx_ring": [
            "nhi_disable_tx_ring",
            "nhi_write_reg",
            "NHI_REG_TX_TABLE_FLAGS"
        ],
        "nhi_init_rx_ring": [
            "nhi_init_rx_ring",
            "dprintf",
            "nhi_alloc_ring",
            "dprintf",
            "dprintf",
            "nhi_get_rx_buffer_desc",
            "memset",
            "sizeof",
            "nhi_ring_get_buffer_iovm_addr",
            "NHI_RX_RING_DESC_RING_SIZE_BUFFER_SIZE",
            "nhi_write_reg",
            "NHI_REG_RX_RING_ADDR_LO",
            "nhi_write_reg",
            "NHI_REG_RX_RING_ADDR_HI",
            "nhi_write_reg",
            "NHI_REG_RX_RING_SIZE_BUFFER_SIZE",
            "nhi_write_reg",
            "NHI_REG_RX_RING_INDEXES",
            "nhi_write_reg",
            "NHI_REG_RX_TABLE_PDF_BITMASKS",
            "nhi_write_reg",
            "NHI_REG_RX_TABLE_FLAGS"
        ],
        "nhi_disable_rx_ring": [
            "nhi_disable_rx_ring",
            "nhi_write_reg",
            "NHI_REG_RX_TABLE_FLAGS"
        ],
        "nhi_send_sgl": [
            "nhi_send_sgl",
            "nhi_get_tx_buffer_desc",
            "nhi_ring_get_buffer",
            "system_time",
            "time_has_elapsed",
            "task_yield",
            "platform_memory_barrier",
            "dprintf",
            "u",
            "memcpy",
            "printf",
            "debug_dump_packet",
            "platform_memory_barrier",
            "nhi_write_reg",
            "NHI_REG_TX_RING_INDEXES"
        ],
        "nhi_send_buffer": [
            "nhi_send_buffer",
            "nhi_send_sgl"
        ],
        "nhi_rx_buffer_available": [
            "nhi_rx_buffer_available",
            "nhi_get_rx_buffer_desc",
            "platform_memory_barrier"
        ],
        "nhi_rx_buffer": [
            "nhi_rx_buffer",
            "system_time",
            "nhi_rx_buffer_available",
            "time_has_elapsed",
            "task_yield",
            "nhi_get_rx_buffer_desc",
            "memcpy",
            "sizeof",
            "platform_memory_barrier",
            "dprintf",
            "dprintf",
            "overrun",
            "memcpy",
            "nhi_ring_get_buffer",
            "dprintf",
            "printf",
            "debug_dump_packet",
            "nhi_write_reg",
            "NHI_REG_RX_RING_INDEXES"
        ]
    },
    "drivers/arasan/sdio": {
        "sdiodrv_sendSDIOCommand": [
            "sdiodrv_sendSDIOCommand",
            "check",
            "sdiodrv_sendCommand"
        ],
        "sdiodrv_sendCommand": [
            "sdiodrv_sendCommand",
            "check",
            "check",
            "sdiodrv_prepareCommand",
            "sdio_generateCommand",
            "dprintf",
            "sdhc_dumpRegisterFile",
            "sdhc_isCommandComplete",
            "dprintf",
            "sdiodrv_resetSDHC",
            "task_yield",
            "sdiodrv_completeCommand"
        ],
        "sdiodrv_transferData": [
            "sdiodrv_transferData",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "check",
            "sdiodrv_prepareTransfer",
            "sdiodrv_sendSDIOCommand",
            "sdiodrv_performDMA",
            "sdhc_isTransferComplete",
            "dprintf",
            "No",
            "sdiodrv_resetSDHC",
            "task_yield",
            "sdiodrv_completeTransfer"
        ],
        "sdiodrv_setClockRate": [
            "sdiodrv_setClockRate",
            "check",
            "check",
            "check",
            "check",
            "sdhc_isSDClockEnabled",
            "sdhc_enableSDClock",
            "sdhc_setClockDividerRate",
            "sdiodrv_waitForInternalClk",
            "sdhc_setDataTimeoutCounter",
            "sdhc_enableSDClock"
        ],
        "sdiodrv_resetSDHC": [
            "sdiodrv_resetSDHC",
            "check",
            "check",
            "dprintf",
            "sdhc_reset",
            "sdhc_isResetting",
            "task_sleep",
            "sdhc_isResetting",
            "dprintf",
            "sdhc_enableInternalClock",
            "sdiodrv_waitForInternalClk",
            "task_sleep"
        ],
        "sdiodrv_setClockMode": [
            "sdiodrv_setClockMode",
            "check",
            "check",
            "sdiodrv_disableClocks",
            "sdiodrv_enableClocks"
        ],
        "sdiodrv_setBusWidth": [
            "sdiodrv_setBusWidth",
            "check",
            "check",
            "sdhc_setDataTransferWidth"
        ],
        "sdiodrv_setBusSpeedMode": [
            "sdiodrv_setBusSpeedMode",
            "check",
            "check",
            "sdhc_setHighSpeedMode",
            "check",
            "sdhc_isHighSpeedSupported",
            "sdhc_setHighSpeedMode"
        ]
    },
    "drivers/arasan/sdio/sdiocommon": {
        "sdhc_getMaxBlockLength": [
            "sdhc_getMaxBlockLength"
        ],
        "sdhc_getBaseClockFrequencyHz": [
            "sdhc_getBaseClockFrequencyHz"
        ],
        "sdhc_isSuspendResumeSupported": [
            "sdhc_isSuspendResumeSupported"
        ],
        "sdhc_isHighSpeedSupported": [
            "sdhc_isHighSpeedSupported"
        ],
        "sdhc_isCommandInhibitedOnCmd": [
            "sdhc_isCommandInhibitedOnCmd"
        ],
        "sdhc_isCommandInhibitedOnData": [
            "sdhc_isCommandInhibitedOnData"
        ],
        "sdhc_setClockDividerRate": [
            "sdhc_setClockDividerRate",
            "min",
            "sdhc_setClockDivider"
        ],
        "sdhc_setClockDivider": [
            "sdhc_setClockDivider"
        ],
        "sdhc_getClockDivider": [
            "sdhc_getClockDivider"
        ],
        "sdhc_enableInternalClock": [
            "sdhc_enableInternalClock"
        ],
        "sdhc_isInternalClockStable": [
            "sdhc_isInternalClockStable"
        ],
        "sdhc_enableSDClock": [
            "sdhc_enableSDClock"
        ],
        "sdhc_isSDClockEnabled": [
            "sdhc_isSDClockEnabled"
        ],
        "sdhc_setBlockSize": [
            "sdhc_setBlockSize"
        ],
        "sdhc_copyCommandResponse": [
            "sdhc_copyCommandResponse"
        ],
        "sdhc_enableCommandStatus": [
            "sdhc_enableCommandStatus"
        ],
        "sdhc_isCommandComplete": [
            "sdhc_isCommandComplete"
        ],
        "sdhc_getCommandStatus": [
            "sdhc_getCommandStatus"
        ],
        "sdhc_clearCommandStatus": [
            "sdhc_clearCommandStatus"
        ],
        "sdhc_enableTransferStatus": [
            "sdhc_enableTransferStatus"
        ],
        "sdhc_isTransferComplete": [
            "sdhc_isTransferComplete"
        ],
        "sdhc_getTransferStatus": [
            "sdhc_getTransferStatus"
        ],
        "sdhc_clearTransferStatus": [
            "sdhc_clearTransferStatus"
        ],
        "sdhc_isBufferReadReady": [
            "sdhc_isBufferReadReady"
        ],
        "sdhc_enableBufferReadReady": [
            "sdhc_enableBufferReadReady"
        ],
        "sdhc_clearBufferReadReady": [
            "sdhc_clearBufferReadReady"
        ],
        "sdhc_isBufferWriteReady": [
            "sdhc_isBufferWriteReady"
        ],
        "sdhc_enableBufferWriteReady": [
            "sdhc_enableBufferWriteReady"
        ],
        "sdhc_clearBufferWriteReady": [
            "sdhc_clearBufferWriteReady"
        ],
        "sdhc_setDataTimeoutCounter": [
            "sdhc_setDataTimeoutCounter"
        ],
        "sdhc_reset": [
            "sdhc_reset"
        ],
        "sdhc_isResetting": [
            "sdhc_isResetting"
        ],
        "sdhc_isSignalingInterrupt": [
            "sdhc_isSignalingInterrupt"
        ],
        "sdhc_clearInterruptSignals": [
            "sdhc_clearInterruptSignals"
        ],
        "sdhc_isCardInterrupt": [
            "sdhc_isCardInterrupt"
        ],
        "sdhc_enableCardInterrupt": [
            "sdhc_enableCardInterrupt"
        ],
        "sdhc_isCardInterruptEnabled": [
            "sdhc_isCardInterruptEnabled"
        ],
        "sdhc_setHighSpeedMode": [
            "sdhc_setHighSpeedMode"
        ],
        "sdhc_setDataTransferWidth": [
            "sdhc_setDataTransferWidth",
            "sdhc_isCardInterruptEnabled",
            "sdhc_enableCardInterrupt",
            "sdhc_enableCardInterrupt"
        ],
        "sdio_getOCR": [
            "sdio_getOCR"
        ],
        "sdio_getNumIOFunctions": [
            "sdio_getNumIOFunctions"
        ],
        "sdio_isMemoryPresent": [
            "sdio_isMemoryPresent"
        ],
        "sdio_isIOReady": [
            "sdio_isIOReady"
        ],
        "sdio_generateCmd52Arg": [
            "sdio_generateCmd52Arg",
            "convertFunctionToArg",
            "convertAddressToArg"
        ],
        "sdio_generateCmd53Arg": [
            "sdio_generateCmd53Arg",
            "convertFunctionToArg",
            "convertAddressToArg",
            "convertCmd53CountToArg"
        ],
        "sdio_getCmd53Count": [
            "sdio_getCmd53Count"
        ],
        "sdhc_dumpRegisterFile": [
            "sdhc_dumpRegisterFile",
            "printf",
            "sizeof",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "sdio_isDataPresent": [
            "sdio_isDataPresent"
        ],
        "sdio_generateCommand": [
            "sdio_generateCommand",
            "sdio_isDataPresent",
            "sdio_shouldCheckIndex",
            "sdio_shouldCheckCRC",
            "sdio_getResponseType"
        ]
    },
    "drivers/display/edp": {
        "edp_init": [
            "edp_init",
            "dprintf",
            "edp_init",
            "memcpy",
            "sizeof",
            "displayport_init_with_timing_info",
            "edp_panel_enable",
            "dp_controller_wait_for_edp_hpd",
            "dprintf",
            "env_get_uint",
            "displayport_get_raw_panel_id",
            "dprintf",
            "edp_init",
            "dprintf",
            "edp_init",
            "dprintf",
            "edp_init",
            "dprintf",
            "edp_init",
            "dprintf",
            "dp_device_wait_started",
            "display_set_enable",
            "env_get_bool",
            "power_set_display_voltage_offset",
            "dp_controller_wait_for_HPD_to_BL",
            "edp_quiesce"
        ],
        "edp_quiesce": [
            "edp_quiesce",
            "dprintf",
            "edp_quiesce",
            "displayport_quiesce",
            "edp_panel_enable"
        ],
        "edp_update_device_tree": [
            "edp_update_device_tree",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "sizeof",
            "memcpy",
            "FindProperty",
            "sizeof",
            "displayport_video_configured",
            "FindProperty",
            "sizeof",
            "dp_device_is_alpm_enabled",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "sizeof",
            "memcpy",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "FindProperty",
            "ids"
        ]
    },
    "drivers/display/tmds": {
        "tmds_init": [
            "tmds_init",
            "clock_set_frequency",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "iic_write",
            "iic_write"
        ],
        "tmds_quiesce": [
            "tmds_quiesce",
            "dprintf",
            "tmds_quiesce"
        ]
    },
    "drivers/display/pinot": {
        "pinot_init": [
            "pinot_init",
            "dprintf",
            "pinot_init",
            "pinot_enable_reset",
            "task_sleep",
            "mipi_dsim_init",
            "pinot_enable_reset",
            "task_sleep",
            "read",
            "mipi_dsim_send_short_command",
            "spin",
            "mipi_dsim_enable_high_speed",
            "task_sleep",
            "pinot_read_panel_id",
            "mipi_dsim_quiesce",
            "mipi_dsim_enable_video",
            "display_set_enable",
            "spin",
            "mipi_dsim_send_short_command",
            "display_delay_frames",
            "mipi_dsim_send_short_command",
            "display_delay_frames",
            "pinot_enable_reset",
            "pinot_enable_power",
            "system_time",
            "spin",
            "mipi_dsim_init",
            "time_has_elapsed",
            "task_yield",
            "pinot_enable_reset",
            "task_sleep",
            "time",
            "mipi_dsim_send_short_command",
            "spin",
            "mipi_dsim_enable_high_speed",
            "system_time",
            "task_sleep",
            "pinot_read_panel_id",
            "mipi_dsim_quiesce",
            "display_set_enable",
            "time_has_elapsed",
            "task_yield",
            "mipi_dsim_send_short_command",
            "mipi_dsim_enable_video",
            "panel_id_2_class",
            "display_delay_frames",
            "display_delay_frames",
            "T8",
            "paint_set_bgcolor",
            "paint_update_image",
            "display_delay_frames",
            "gpio_configure_pupdn",
            "offset",
            "env_get_bool",
            "power_set_display_voltage_offset"
        ],
        "pinot_quiesce": [
            "pinot_quiesce",
            "dprintf",
            "pinot_quiesce",
            "T10",
            "display_delay_frames",
            "mipi_dsim_send_short_command",
            "mipi_dsim_send_short_command",
            "T12",
            "display_delay_frames",
            "display_delay_frames",
            "display_set_enable",
            "mipi_dsim_enable_high_speed",
            "mipi_dsim_quiesce",
            "pinot_enable_reset",
            "pinot_enable_power"
        ],
        "pinot_update_device_tree": [
            "pinot_update_device_tree",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "sizeof",
            "memcpy",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty"
        ]
    },
    "drivers/display/summit": {
        "summit_init": [
            "summit_init",
            "dprintf",
            "mode",
            "summit_init_video_mode",
            "summit_init_cmd_mode"
        ],
        "summit_quiesce": [
            "summit_quiesce",
            "mipi_dsim_send_short_command",
            "spin",
            "mipi_dsim_send_short_command",
            "display_delay_frames",
            "display_delay_frames",
            "mipi_dsim_enable_high_speed",
            "mipi_dsim_quiesce",
            "summit_enable_reset",
            "summit_enable_power"
        ],
        "summit_get_raw_panel_id": [
            "summit_get_raw_panel_id",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "sizeof",
            "bcopy",
            "sizeof"
        ],
        "summit_update_device_tree": [
            "summit_update_device_tree",
            "FindProperty",
            "FindProperty",
            "sizeof",
            "sizeof",
            "memcpy",
            "FindProperty",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "memset",
            "strlen",
            "strlcpy",
            "strlen",
            "FindProperty",
            "memset",
            "strlen",
            "strlcpy",
            "strlen",
            "FindProperty",
            "memset",
            "strlen",
            "strlcpy",
            "strlen",
            "FindProperty",
            "memset",
            "strlen",
            "strlcpy",
            "strlen",
            "FindProperty",
            "FindProperty"
        ]
    },
    "drivers/hdmi": {
        "hdmi_init": [
            "hdmi_init",
            "hdmi_controller_start"
        ],
        "hdmi_init_with_timing_info": [
            "hdmi_init_with_timing_info",
            "hdmi_set_timings",
            "hdmi_controller_start"
        ],
        "hdmi_set_timings": [
            "hdmi_set_timings",
            "bzero",
            "sizeof",
            "debug",
            "restrict_edid"
        ],
        "hdmi_quiesce": [
            "hdmi_quiesce",
            "hdmi_controller_stop"
        ],
        "hdmi_start_video": [
            "hdmi_start_video",
            "hdmi_controller_start_video"
        ],
        "hdmi_video_configured": [
            "hdmi_video_configured",
            "hdmi_controller_video_configured"
        ],
        "hdmi_device_start": [
            "hdmi_device_start",
            "debug",
            "set_power",
            "debug",
            "obtain_edid",
            "debug",
            "hdmi_start_video",
            "debug",
            "debug",
            "system_time",
            "event_signal"
        ],
        "hdmi_device_wait_started": [
            "hdmi_device_wait_started",
            "system_time",
            "debug",
            "system_time",
            "debug",
            "event_wait_timeout",
            "debug",
            "system_time",
            "debug"
        ],
        "hdmi_device_stop": [
            "hdmi_device_stop",
            "hdmi_controller_stop_video",
            "set_power"
        ],
        "do_hdmi": [
            "do_hdmi",
            "puts",
            "strcmp",
            "printf",
            "hdmi_init",
            "bzero",
            "sizeof",
            "strcmp",
            "hdmi_quiesce",
            "strcmp",
            "strcmp",
            "hdmi_controller_start_video",
            "strcmp",
            "hdmi_controller_start_video",
            "strcmp",
            "hdmi_controller_start_video",
            "strcmp",
            "hdmi_read_reg",
            "strcmp",
            "hdmi_write_reg",
            "puts",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "obtain_edid": [
            "obtain_edid",
            "bzero",
            "sizeof",
            "get_edid",
            "debug",
            "process_edid",
            "debug",
            "debug",
            "get_edid",
            "sizeof",
            "debug",
            "process_edid",
            "debug",
            "debug"
        ],
        "abort_edid": [
            "abort_edid"
        ],
        "restrict_edid": [
            "restrict_edid"
        ],
        "get_edid_timings": [
            "get_edid_timings",
            "bcopy",
            "sizeof",
            "debug"
        ],
        "get_edid_downstream_type": [
            "get_edid_downstream_type"
        ]
    },
    "drivers/flash_nand": {},
    "drivers/flash_nand/benchmark": {
        "Usage": [
            "Usage",
            "printf",
            "r",
            "exit"
        ],
        "main": [
            "main",
            "L2V_Init",
            "Usage",
            "Usage",
            "RandomTest",
            "SequentialTest"
        ],
        "L2VRandomTest": [
            "L2VRandomTest",
            "L2V_Init",
            "L2V_Search_Init",
            "Seed_Local_Rand",
            "Get_Local_Rand",
            "Get_Local_Rand",
            "Get_Local_Rand",
            "L2V_Update",
            "Get_Local_Rand",
            "L2V_Search"
        ]
    },
    "drivers/flash_nand/boot": {
        "nand_export_init": [
            "nand_export_init",
            "FIL_Init",
            "_init_nand_export_callbacks",
            "_init_nand_export_geometry",
            "dprintf"
        ],
        "nand_boot_init": [
            "nand_boot_init",
            "PROFILE_ENTER",
            "require",
            "info",
            "nand_boot_init",
            "init_nand_boot_context",
            "require",
            "spew",
            "nand_part_init",
            "require",
            "spew",
            "npi_load_ptab",
            "require",
            "nand_syscfg_init",
            "spew",
            "flash_nand_nvram_init",
            "spew",
            "info",
            "nand_boot_init",
            "PROFILE_EXIT"
        ]
    },
    "drivers/flash_nand/boot/firmware": {
        "nand_firmware_init": [
            "nand_firmware_init",
            "npi_get_bytes_per_page",
            "malloc",
            "sizeof",
            "memalign",
            "npi_get_block_depth",
            "npi_get_pages_per_block",
            "npi_get_entry",
            "construct_blockdev",
            "construct_blockdev",
            "panic",
            "register_blockdev"
        ]
    },
    "drivers/flash_nand/boot/nvram": {
        "nand_nvram_dump": [
            "nand_nvram_dump",
            "nand_nvram_alloc_mem",
            "nand_nvram_alloc_mem",
            "nand_nvram_printf",
            "dumpGeometry",
            "dumpBank",
            "nand_nvram_printf",
            "nand_nvram_free_mem",
            "nand_nvram_free_mem"
        ],
        "nand_nvram_open": [
            "nand_nvram_open",
            "sizeof",
            "sizeof",
            "sizeof",
            "nand_nvram_alloc_mem",
            "sizeof",
            "set_mem",
            "sizeof",
            "copy_mem",
            "sizeof",
            "sizeof",
            "nand_nvram_fail",
            "nand_nvram_fail",
            "alloc_mem",
            "nand_nvram_fail",
            "alloc_mem",
            "nand_nvram_fail",
            "alloc_mem",
            "nand_nvram_fail",
            "alloc_blob",
            "calc_page_count_from_size",
            "nand_nvram_fail",
            "clear_watermark",
            "set_mem",
            "set_mem",
            "nand_nvram_close",
            "dump_nvram"
        ],
        "nand_nvram_read": [
            "nand_nvram_read",
            "log_printf",
            "nand_nvram_fail",
            "restore_shadow",
            "nand_nvram_fail",
            "copy_mem",
            "dump_nvram"
        ],
        "nand_nvram_write": [
            "nand_nvram_write",
            "nand_nvram_fail",
            "restore_shadow",
            "nand_nvram_fail",
            "copy_mem",
            "dump_nvram"
        ],
        "nand_nvram_sync": [
            "nand_nvram_sync",
            "restore_shadow",
            "nand_nvram_fail",
            "commit_shadow",
            "nand_nvram_fail",
            "dump_nvram"
        ],
        "nand_nvram_close": [
            "nand_nvram_close",
            "free_blob",
            "get_blob_page_count",
            "free_mem",
            "sizeof",
            "free_mem",
            "sizeof"
        ],
        "flash_nand_nvram_is_block_bad": [
            "flash_nand_nvram_is_block_bad",
            "TRACE_BEFORE",
            "npi_is_block_bad",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_read_page": [
            "flash_nand_nvram_read_page",
            "nand_nvram_get_geometry",
            "npi_get_bytes_per_page",
            "TRACE_BEFORE",
            "memalign",
            "npi_read_page",
            "memcpy",
            "memcpy",
            "free",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_write_page": [
            "flash_nand_nvram_write_page",
            "nand_nvram_get_geometry",
            "npi_get_bytes_per_page",
            "TRACE_BEFORE",
            "memalign",
            "memcpy",
            "memcpy",
            "npi_write_page",
            "free",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_request_ptab_diff": [
            "flash_nand_nvram_request_ptab_diff",
            "TRACE_BEFORE",
            "npi_request_ptab_diff",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_provide_ptab_diff": [
            "flash_nand_nvram_provide_ptab_diff",
            "TRACE_BEFORE",
            "npi_provide_ptab_diff",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_erase_block": [
            "flash_nand_nvram_erase_block",
            "TRACE_BEFORE",
            "npi_erase_block",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_copy_ptab": [
            "flash_nand_nvram_copy_ptab",
            "TRACE_BEFORE",
            "npi_get_ptab_bytes",
            "npi_get_bytes_per_page",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_read_ptab": [
            "flash_nand_nvram_read_ptab",
            "nand_nvram_get_geometry",
            "TRACE_BEFORE",
            "npi_read_page",
            "TRACE_AFTER"
        ],
        "flash_nand_nvram_write_ptab": [
            "flash_nand_nvram_write_ptab",
            "nand_nvram_get_geometry",
            "TRACE_BEFORE",
            "npi_write_page",
            "TRACE_AFTER"
        ]
    },
    "drivers/flash_nand/boot/syscfg": {
        "nand_syscfg_init": [
            "nand_syscfg_init",
            "dprintf",
            "nand_syscfg_init",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "malloc",
            "sizeof",
            "ppn_syscfg_init",
            "construct_blockdev",
            "register_blockdev",
            "syscfgInitWithBdev",
            "check",
            "WMR_PreInit",
            "construct_blockdev",
            "register_blockdev",
            "syscfgInitWithBdev",
            "check"
        ]
    },
    "drivers/flash_nand/OAM": {},
    "drivers/flash_nand/OAM/iBoot": {
        "WMR_BOOT_MALLOC": [
            "WMR_BOOT_MALLOC",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "malloc",
            "WMR_MEMSET"
        ],
        "WMR_BOOT_FREE": [
            "WMR_BOOT_FREE",
            "WMR_ASSERT",
            "free"
        ],
        "OAM_Init": [
            "OAM_Init"
        ],
        "OAM_Beep": [
            "OAM_Beep"
        ],
        "WMR_FREE": [
            "WMR_FREE",
            "free"
        ],
        "WMR_CHECK_BUFFER": [
            "WMR_CHECK_BUFFER",
            "defined",
            "IS_ALIGNED_TO",
            "IS_ALIGNED_TO"
        ],
        "WMR_FILL_STRUCT": [
            "WMR_FILL_STRUCT",
            "WMR_PRINT",
            "WMR_MEMCPY"
        ],
        "_WMR_PRINT": [
            "_WMR_PRINT",
            "va_start",
            "vprintf",
            "va_end"
        ],
        "WMR_BEEP": [
            "WMR_BEEP",
            "printf"
        ],
        "WMR_I_CAN_HAZ_DEBUGGER": [
            "WMR_I_CAN_HAZ_DEBUGGER"
        ],
        "WMR_WAIT_US": [
            "WMR_WAIT_US",
            "spin"
        ],
        "WMR_SLEEP_US": [
            "WMR_SLEEP_US",
            "task_sleep"
        ],
        "WMR_YIELD": [
            "WMR_YIELD",
            "task_yield"
        ],
        "WMR_BUS_FREQ_HZ": [
            "WMR_BUS_FREQ_HZ",
            "clock_get_frequency"
        ],
        "WMR_BUS_FREQ_MHZ": [
            "WMR_BUS_FREQ_MHZ",
            "WMR_BUS_FREQ_HZ"
        ],
        "WMR_DLL_CLOCK_GATE": [
            "WMR_DLL_CLOCK_GATE",
            "clock_gate"
        ],
        "WMR_CLOCK_GATE": [
            "WMR_CLOCK_GATE",
            "panic",
            "clock_gate",
            "panic",
            "clock_gate"
        ],
        "WMR_DEADLOOP": [
            "WMR_DEADLOOP"
        ],
        "WMR_CLOCK_RESET_DEVICE": [
            "WMR_CLOCK_RESET_DEVICE",
            "panic",
            "clock_reset_device"
        ],
        "WMR_BufZone_Init": [
            "WMR_BufZone_Init",
            "ZoneList_Link"
        ],
        "WMR_BufZone_FinishedAllocs": [
            "WMR_BufZone_FinishedAllocs",
            "WMR_ASSERT",
            "ROUNDUPTO",
            "WMR_MALLOC"
        ],
        "WMR_BufZone_Rebase": [
            "WMR_BufZone_Rebase"
        ],
        "WMR_BufZone_FinishedRebases": [
            "WMR_BufZone_FinishedRebases",
            "WMR_ASSERT"
        ],
        "WMR_BufZone_Free": [
            "WMR_BufZone_Free",
            "WMR_FREE",
            "ZoneList_Unlink"
        ]
    },
    "drivers/flash_nand/OAM/EmbeddedIOP": {
        "OAM_Init": [
            "OAM_Init"
        ],
        "OAM_Beep": [
            "OAM_Beep"
        ],
        "WMR_FREE": [
            "WMR_FREE",
            "free"
        ],
        "WMR_CHECK_BUFFER": [
            "WMR_CHECK_BUFFER"
        ],
        "WMR_FILL_STRUCT": [
            "WMR_FILL_STRUCT",
            "WMR_PRINT",
            "WMR_MEMCPY"
        ],
        "_WMR_PRINT": [
            "_WMR_PRINT",
            "va_start",
            "vprintf",
            "va_end"
        ],
        "WMR_BEEP": [
            "WMR_BEEP",
            "printf"
        ],
        "WMR_I_CAN_HAZ_DEBUGGER": [
            "WMR_I_CAN_HAZ_DEBUGGER"
        ],
        "WMR_WAIT_US": [
            "WMR_WAIT_US",
            "spin"
        ],
        "WMR_SLEEP_US": [
            "WMR_SLEEP_US",
            "task_sleep"
        ],
        "WMR_YIELD": [
            "WMR_YIELD",
            "task_yield"
        ],
        "WMR_DEADLOOP": [
            "WMR_DEADLOOP"
        ],
        "WMR_CLOCK_RESET_DEVICE": [
            "WMR_CLOCK_RESET_DEVICE",
            "panic",
            "clock_reset_device"
        ]
    },
    "drivers/flash_nand/raw": {
        "raw_nand_init": [
            "raw_nand_init",
            "dprintf",
            "raw_nand_init",
            "WMR_Init",
            "dprintf",
            "nand_filesys_init"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Exam": {
        "ANDExportAllStructs": [
            "ANDExportAllStructs",
            "sizeof",
            "sizeof",
            "WMR_GetVFL",
            "WMR_GetFTL",
            "SUB_MIN_ZERO",
            "_appendStructToBuffer"
        ],
        "WMR_PreInit": [
            "WMR_PreInit",
            "OAM_Init",
            "FIL_Init",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "EXAM_RTL_PRINT",
            "TEXT",
            "BUF_Init",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "_initFPart"
        ],
        "WMR_Init": [
            "WMR_Init",
            "defined",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "OAM_Init",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Driver",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Driver",
            "EXAM_ERR_PRINT",
            "TEXT",
            "FIL_Init",
            "defined",
            "FIL_SetStruct",
            "sizeof",
            "EXAM_RTL_PRINT",
            "TEXT",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "EXAM_RTL_PRINT",
            "TEXT",
            "defined",
            "FIL_Test",
            "BUF_Init",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "EXAM_RTL_PRINT",
            "TEXT",
            "_initFPart",
            "EXAM_RTL_PRINT",
            "TEXT",
            "first",
            "SetSignatureStyle",
            "SetSignatureStyle",
            "ReadSignature",
            "sizeof",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "_isSignatureCompatible",
            "WriteSignature",
            "WMR_SIGNATURE_METADATA",
            "WriteSignature",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "invalid",
            "EXAM_RTL_PRINT",
            "TEXT",
            "VerifyProductionFormat",
            "FIL_GetFuncTbl",
            "Notify",
            "_selectVFL",
            "Init",
            "EXAM_RTL_PRINT",
            "TEXT",
            "missing",
            "about",
            "FIL_GetFuncTbl",
            "EXAM_RTL_PRINT",
            "TEXT",
            "FIL_GetFuncTbl",
            "SetWhiteningMetadataState",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "VFL_ProductionFormat",
            "WriteInitialBBT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "VFL_FactoryReformat",
            "WriteSignature",
            "FactoryReformat",
            "Format",
            "EXAM_RTL_PRINT",
            "TEXT",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "SetStruct",
            "sizeof",
            "defined",
            "YAFTL_Register",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "FTL_Register",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Init",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Format",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "WMR_MEMSET",
            "WMR_MEMCPY",
            "WMR_GETVERSION",
            "WMR_MIN",
            "WMR_STRLEN",
            "WMR_GETVERSION",
            "WriteSignature",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "WMR_MEMSET",
            "sizeof",
            "ReadSignature",
            "sizeof",
            "WMR_MEMCMP",
            "sizeof",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Open",
            "EXAM_RTL_PRINT",
            "TEXT",
            "WMR_BEEP",
            "EXAM_RTL_PRINT",
            "TEXT",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "SetStruct",
            "sizeof",
            "sizeof",
            "GetStruct",
            "SetStruct",
            "sizeof",
            "GetDeviceInfo",
            "defined",
            "YAFTL_Register",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "FTL_Register",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Init",
            "EXAM_RTL_PRINT",
            "TEXT",
            "GetDeviceInfo",
            "Format",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Open",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "Erase",
            "EXAM_RTL_PRINT",
            "TEXT",
            "WMR_BEEP",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT",
            "EXAM_RTL_PRINT",
            "TEXT"
        ],
        "WMRGetStruct": [
            "WMRGetStruct",
            "WMR_FILL_STRUCT",
            "sizeof",
            "EXAM_ERR_PRINT",
            "TEXT"
        ],
        "WMR_CtrlIO": [
            "WMR_CtrlIO",
            "_andPerformFunction",
            "_andGetStruct"
        ],
        "WMR_Close": [
            "WMR_Close",
            "Close",
            "WMR_MEMSET",
            "sizeof",
            "Close",
            "WMR_MEMSET",
            "sizeof",
            "Close",
            "WMR_MEMSET",
            "sizeof",
            "FIL_Close",
            "WMR_MEMSET",
            "sizeof"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Inc": {},
    "drivers/flash_nand/raw/Whimory/Test": {
        "FIL_Test": [
            "FIL_Test",
            "WMR_BufZone_Init",
            "InitTestInfo",
            "FILInterfaceTest"
        ],
        "InitTestInfo": [
            "InitTestInfo",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT"
        ],
        "FILInterfaceTest": [
            "FILInterfaceTest",
            "InitPageListFromBlocks",
            "WMR_PRINT",
            "WMR_MALLOC",
            "WMR_MALLOC",
            "WMR_MALLOC",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_PANIC",
            "WMR_BufZone_FinishedRebases",
            "SetWhiteningState",
            "RegisterCurrentTransaction",
            "WMR_ASSERT",
            "TestBootloaderBlock",
            "WMR_ASSERT",
            "WMR_PRINT",
            "Erase",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_ASSERT",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ReadWithECC",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadNoECC",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_ASSERT",
            "InitPageListFromBlocks",
            "WMR_PRINT",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_ASSERT",
            "WMR_PRINT",
            "FillBufferWithCountingPattern",
            "FillMetaBufferWithPattern",
            "Write",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ReadWithECC",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadNoECC",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "InitPageListFromBlocks",
            "WMR_PRINT",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "Write",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ReadWithECC",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FillBufferWithCountingPattern",
            "FillMetaBufferWithPattern",
            "Write",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ReadWithECC",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "UECC",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "Erase",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadBLPage",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_ASSERT",
            "WMR_PRINT",
            "FillBufferWithCountingPattern",
            "WriteBLPage",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadBLPage",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WriteBLPage",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadBLPage",
            "WMR_PRINT",
            "FILErrorToString",
            "VS",
            "WMR_PRINT",
            "EraseMultiple",
            "WMR_PRINT",
            "Erase",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_ASSERT",
            "FillBufferWithCountingPattern",
            "FillMetaBufferWithPattern",
            "WMR_PRINT",
            "WriteScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "EraseMultiple",
            "WMR_PRINT",
            "Erase",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadMultiplePages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FILTestHexdump",
            "FillBufferWithCountingPattern",
            "FillMetaBufferWithPattern",
            "WMR_PRINT",
            "WriteMultiplePages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "WMR_PRINT",
            "ReadMultiplePages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "ReadScatteredPages",
            "WMR_PRINT",
            "FILErrorToString",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_BufZone_Free",
            "WMR_PRINT",
            "WMR_FREE",
            "WMR_FREE",
            "WMR_FREE",
            "WMR_BufZone_Free"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Core/FTL": {
        "_RecoverLOGCxtInfo": [
            "_RecoverLOGCxtInfo",
            "BUF_Get",
            "FTL_ERR_PRINT",
            "TEXT",
            "error",
            "GET_Vpn",
            "VFL_Read",
            "_GetLOGCxtSpare",
            "BUF_Release"
        ],
        "_CopyLOGCxt": [
            "_CopyLOGCxt",
            "FTL_SET_LOG_LBN",
            "WMR_MEMCPY",
            "sizeof"
        ],
        "_ScanForFreeBlk": [
            "_ScanForFreeBlk"
        ],
        "_CheckLogBlock": [
            "_CheckLogBlock",
            "BUF_Get",
            "FTL_ERR_PRINT",
            "TEXT",
            "BUF_Get",
            "VFL_Read",
            "GET_Vpn",
            "_GetLOGCxtSpare",
            "BUF_Release",
            "BUF_Release"
        ],
        "_FTLRestore": [
            "_FTLRestore",
            "block",
            "FTL_WRN_PRINT",
            "TEXT",
            "BUF_Get",
            "FTL_ERR_PRINT",
            "TEXT",
            "error",
            "pstSimpleMergeDataBuffer",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "_InitLogCxt",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMCPY",
            "VFL_GetFTLCxtVbn",
            "sizeof",
            "VFL_Read",
            "GET_Vpn",
            "FTL_SPARE_IS_CXT_MARK",
            "GET_FTL_SPARE_TYPE",
            "_GetFTLCxtSpare",
            "WMR_MIN",
            "GET_Vpn",
            "VB",
            "WMR_MEMSET",
            "VFL_Read",
            "GET_Vpn",
            "GET_FTL_SPARE_TYPE",
            "_GetLOGCxtSpare",
            "IS_LBN_IN_RANGE",
            "GET_FTL_SPARE_TYPE",
            "MODIFY_LB_MAP",
            "MODIFY_LB_MAP",
            "FTL_ERR_PRINT",
            "TEXT",
            "block",
            "_GetFTLCxtSpare",
            "FTL_ERR_PRINT",
            "TEXT",
            "block",
            "spare",
            "GET_FTL_SPARE_TYPE",
            "WMR_MEMSET",
            "VFL_Read",
            "GET_Vpn",
            "GET_FTL_SPARE_TYPE",
            "_GetLOGCxtSpare",
            "IS_LBN_IN_RANGE",
            "GET_FTL_SPARE_TYPE",
            "_GetFTLCxtSpare",
            "FTL_ERR_PRINT",
            "TEXT",
            "block",
            "spare",
            "GET_FTL_SPARE_TYPE",
            "_CheckLogBlock",
            "MODIFY_LB_MAP",
            "_RecoverLOGCxtInfo",
            "_RecoverLOGCxtInfo",
            "_InitLogCxt",
            "_InitLogCxt",
            "FTL_ERR_PRINT",
            "TEXT",
            "_FTLRestore",
            "_CopyLOGCxt",
            "MODIFY_LB_MAP",
            "_EraseAndMarkEC",
            "FTL_ERR_PRINT",
            "TEXT",
            "pool",
            "FTL_ERR_PRINT",
            "TEXT",
            "FTL_ERR_PRINT",
            "TEXT",
            "fail",
            "FTL_ERR_PRINT",
            "TEXT",
            "FTL_ERR_PRINT",
            "TEXT",
            "fail",
            "_ScanForFreeBlk",
            "FTL_ERR_PRINT",
            "TEXT",
            "_ScanForFreeBlk",
            "fail",
            "_ScanLogSection",
            "FTL_ERR_PRINT",
            "TEXT",
            "_ScanLogSection",
            "fail",
            "FTL_ERR_PRINT",
            "TEXT",
            "_ScanLogSection",
            "fail",
            "IS_LBN_IN_RANGE",
            "FTL_ERR_PRINT",
            "TEXT",
            "fail",
            "FTL_ERR_PRINT",
            "TEXT",
            "fail",
            "FTL_ERR_PRINT",
            "TEXT",
            "X",
            "fail",
            "FTL_ERR_PRINT",
            "TEXT",
            "FTL_ERR_PRINT",
            "TEXT",
            "fail",
            "GET_Vpn",
            "VFL_Read",
            "GET_Vpn",
            "FTL_SPARE_IS_CXT_MARK",
            "GET_FTL_SPARE_TYPE",
            "_GetFTLCxtSpare",
            "GET_FTL_SPARE_TYPE",
            "GET_Vpn",
            "WMR_MIN",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "GET_FTL_SPARE_TYPE",
            "GET_Vpn",
            "WMR_MIN",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "GET_FTL_SPARE_TYPE",
            "_FTLSetStatisticsFromCxt",
            "FTL_WRN_PRINT",
            "TEXT",
            "FTL_WRN_PRINT",
            "TEXT",
            "FTL_WRN_PRINT",
            "TEXT",
            "_EraseAndMarkEC",
            "FTL_ERR_PRINT",
            "TEXT",
            "_EraseAndMarkEC",
            "_MakeLogMap",
            "WMR_MEMSET",
            "sizeof",
            "BUF_Release",
            "FTL_ShutdownNotify",
            "FTL_WRN_PRINT",
            "TEXT",
            "FTL_WRN_PRINT",
            "TEXT"
        ],
        "FTL_Register": [
            "FTL_Register"
        ],
        "freeBlockList": [
            "freeBlockList",
            "WMR_FREE",
            "sizeof"
        ],
        "invalidateCXT": [
            "invalidateCXT",
            "SetupMeta_Cxt",
            "VFL_Write",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList"
        ],
        "writeCXTInfo": [
            "writeCXTInfo",
            "SetupMeta_Cxt",
            "WMR_MEMCPY",
            "_writePage",
            "_writePage",
            "_writePage",
            "_FTLGetStatisticsToCxt",
            "WMR_MEMSET",
            "_writePage",
            "WMR_MEMSET",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage"
        ],
        "quickMountUpdate": [
            "quickMountUpdate",
            "valid",
            "WMR_TRACE_IST_1",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "WMR_TRACE_IST_1",
            "removeBlockFromEraseNowList",
            "BUF_Get",
            "WMR_TRACE_IST_1",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "BUF_Release",
            "WMR_TRACE_IST_1"
        ],
        "allocateBlock": [
            "allocateBlock",
            "isBlockInEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "isBlockInEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "invalidateCXT",
            "WMR_PANIC",
            "BTOC_Dealloc",
            "WMR_ASSERT",
            "invalidateCXT",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BTOC_Alloc",
            "WMR_MEMSET",
            "BTOC_Dealloc",
            "invalidateCXT",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BTOC_Alloc",
            "WMR_MEMSET"
        ],
        "findFreeCacheEntry": [
            "findFreeCacheEntry"
        ],
        "clearEntryInCache": [
            "clearEntryInCache",
            "WMR_MEMSET",
            "SetupMeta_Index",
            "WMR_ASSERT",
            "writeIndexPage",
            "invalidateCXT",
            "WMR_PANIC",
            "collectBlockStats",
            "WMR_MEMSET"
        ],
        "writeCurrentBlockTOC": [
            "writeCurrentBlockTOC",
            "SetupMeta_Data_BTOC",
            "_writePage",
            "SetupMeta_Index_BTOC",
            "_writePage"
        ],
        "_verifyMetaData": [
            "_verifyMetaData",
            "META_GET_LBA",
            "invalidateCXT",
            "WMR_PANIC",
            "META_GET_LBA",
            "WMR_PRINT",
            "META_GET_LBA",
            "META_IS_UECC"
        ],
        "IndexMarkDirty": [
            "IndexMarkDirty"
        ],
        "IndexLoadClean": [
            "IndexLoadClean",
            "findFreeCacheEntry",
            "clearEntryInCache",
            "invalidateCXT",
            "WMR_PANIC",
            "WMR_MEMSET",
            "_readPage",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "IndexLoadDirty": [
            "IndexLoadDirty",
            "findFreeCacheEntry",
            "clearEntryInCache",
            "invalidateCXT",
            "WMR_PANIC",
            "WMR_MEMSET",
            "_readPage",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "_writeMultiPages": [
            "_writeMultiPages",
            "META_IS_DATA",
            "debug",
            "invalidateCXT",
            "VFL_WriteMultiplePagesInVb",
            "WMR_PRINT"
        ],
        "_readMultiPages": [
            "_readMultiPages",
            "debug",
            "updateReadCounter",
            "VFL_ReadScatteredPagesInVb",
            "debug",
            "WMR_TRACE_IST_1",
            "_readPage",
            "WMR_PRINT",
            "WMR_TRACE_IST_1",
            "WMR_PRINT",
            "WMR_PRINT",
            "_readPage",
            "WMR_TRACE_IST_1",
            "updateReadCounter",
            "WMR_TRACE_IST_1",
            "VFL_ReadScatteredPagesInVb",
            "debug",
            "_readPage",
            "WMR_PRINT",
            "WMR_PRINT",
            "debug",
            "_readPage"
        ],
        "isBlockInEraseNowList": [
            "isBlockInEraseNowList"
        ],
        "removeBlockFromEraseNowList": [
            "removeBlockFromEraseNowList"
        ],
        "addBlockToEraseNowList": [
            "addBlockToEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase"
        ],
        "_writePage": [
            "_writePage",
            "BUF_Get",
            "invalidateCXT",
            "WMR_MEMCPY",
            "sizeof",
            "META_IS_DATA",
            "VFL_Write",
            "WMR_PRINT",
            "addBlockToEraseNowList",
            "invalidateCXT",
            "WMR_PANIC",
            "BUF_Release"
        ],
        "_readPage": [
            "_readPage",
            "VFL_Read",
            "WMR_PRINT",
            "addBlockToEraseNowList",
            "invalidateCXT",
            "WMR_PANIC",
            "debug",
            "updateReadCounter",
            "WMR_PRINT",
            "debug",
            "WMR_TRACE_IST_1",
            "WMR_TRACE_IST_1"
        ],
        "_UpdateStatisticsCounters": [
            "_UpdateStatisticsCounters",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "sizeof"
        ],
        "YAFTL_Register": [
            "YAFTL_Register"
        ],
        "CheckDataCounts": [
            "CheckDataCounts",
            "WMR_ASSERT"
        ],
        "SaveValids": [
            "SaveValids"
        ],
        "CheckValids": [
            "CheckValids",
            "WMR_ASSERT"
        ],
        "CheckBlockDist": [
            "CheckBlockDist",
            "invalidateCXT",
            "WMR_PANIC",
            "CheckBlockDist",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_ASSERT"
        ],
        "WorkFifo_isEmpty": [
            "WorkFifo_isEmpty"
        ],
        "WorkFifo_Enq": [
            "WorkFifo_Enq",
            "WMR_ASSERT"
        ],
        "WorkFifo_Deq": [
            "WorkFifo_Deq",
            "WMR_ASSERT"
        ],
        "YAFTL_GC_Data_Deq_sb": [
            "YAFTL_GC_Data_Deq_sb"
        ],
        "YAFTL_GC_Init": [
            "YAFTL_GC_Init",
            "L2V_Search_Init",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "YAFTL_GC_Close": [
            "YAFTL_GC_Close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "YAFTL_GC_PreWrite": [
            "YAFTL_GC_PreWrite",
            "CheckDataCounts",
            "CheckBlockDist",
            "dangerousData",
            "YAFTL_GC_Index",
            "dangerousData",
            "YAFTL_GC_Data",
            "CheckBlockDist",
            "lowData",
            "GCMachine_Data",
            "CheckBlockDist"
        ],
        "YAFTL_GC_Index": [
            "YAFTL_GC_Index",
            "WMR_TRACE_IST_2",
            "CheckBlockDist",
            "ChooseIndexSB",
            "BTOC_GET_IPN",
            "GetBlockTOC",
            "GetBlockTOC",
            "EvictIndex",
            "SanityCheckValid",
            "EraseIndex",
            "WMR_TRACE_IST_1",
            "WorkFifo_isEmpty",
            "CheckBlockDist",
            "WMR_TRACE_IST_1"
        ],
        "YAFTL_GC_Data_Enq": [
            "YAFTL_GC_Data_Enq",
            "WMR_TRACE_IST_1",
            "WorkFifo_Enq"
        ],
        "YAFTL_GC_Index_Enq": [
            "YAFTL_GC_Index_Enq",
            "WMR_TRACE_IST_1",
            "WorkFifo_Enq"
        ],
        "YAFTL_GC_Data": [
            "YAFTL_GC_Data",
            "WMR_TRACE_IST_2",
            "CheckBlockDist",
            "GCMachine_Data",
            "WMR_TRACE_IST_1",
            "WorkFifo_isEmpty",
            "WorkFifo_Deq",
            "CheckBlockDist",
            "WMR_TRACE_IST_1"
        ],
        "BTOC_Init": [
            "BTOC_Init",
            "WMR_ASSERT",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases"
        ],
        "BTOC_Close": [
            "BTOC_Close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "BTOC_BootFixup": [
            "BTOC_BootFixup"
        ],
        "BTOC_GetSrc": [
            "BTOC_GetSrc"
        ],
        "BTOC_SetSrc": [
            "BTOC_SetSrc"
        ],
        "BTOC_Dealloc": [
            "BTOC_Dealloc",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "BTOC_Lock": [
            "BTOC_Lock"
        ],
        "BTOC_Unlock": [
            "BTOC_Unlock"
        ],
        "BTOC_Read": [
            "BTOC_Read",
            "_readPage"
        ],
        "BTOC_SetAll": [
            "BTOC_SetAll",
            "WMR_MEMSET"
        ],
        "BTOC_Copy": [
            "BTOC_Copy"
        ],
        "BTOC_Get": [
            "BTOC_Get"
        ],
        "BTOC_Set": [
            "BTOC_Set"
        ],
        "SetupMeta_Data": [
            "SetupMeta_Data"
        ],
        "SetupMeta_Data_UECC": [
            "SetupMeta_Data_UECC"
        ],
        "SetupMeta_Index": [
            "SetupMeta_Index"
        ],
        "SetupMeta_Data_BTOC": [
            "SetupMeta_Data_BTOC"
        ],
        "SetupMeta_Index_BTOC": [
            "SetupMeta_Index_BTOC"
        ],
        "SetupMeta_IndexGC": [
            "SetupMeta_IndexGC"
        ],
        "SetupMeta_DataGC": [
            "SetupMeta_DataGC"
        ],
        "SetupMeta_Cxt": [
            "SetupMeta_Cxt"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Core/FTL/L2V": {
        "L2V_Free": [
            "L2V_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "WMR_FREE"
        ],
        "L2V_Search_Init": [
            "L2V_Search_Init"
        ],
        "L2V_Search": [
            "L2V_Search",
            "HitCache",
            "l2v_assert_lt",
            "LPTR_UNPACK",
            "L2V_Repack",
            "L2V_IDX_TO_NODE",
            "_L2V_NODE_ITERATE",
            "_L2V_NODE_ITERATE_NEXT",
            "_L2V_NODE_ITERATE_END",
            "WMR_PANIC",
            "l2v_assert",
            "deep"
        ],
        "_L2V_NodeBig_PushContig": [
            "_L2V_NodeBig_PushContig",
            "l2v_assert_ne",
            "l2v_assert_lt"
        ],
        "_L2V_NodeBig_PushContig_Node": [
            "_L2V_NodeBig_PushContig_Node"
        ],
        "_L2V_NodeBig_PushContig_Nand": [
            "_L2V_NodeBig_PushContig_Nand",
            "l2v_assert_ne"
        ],
        "L2V_ForgetBiggestTree": [
            "L2V_ForgetBiggestTree",
            "ChooseBiggest",
            "LPTR_IS_NODEPTR",
            "Forget",
            "L2V_IDX_TO_NODE",
            "LPTR_GET_NODEIDX",
            "ReplaceRoot"
        ],
        "L2V_PrintPtr": [
            "L2V_PrintPtr",
            "LPTR_UNPACK",
            "L2V_PrintCU"
        ],
        "L2V_PrintCU": [
            "L2V_PrintCU",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "L2V_PrintNode": [
            "L2V_PrintNode",
            "_L2V_NODE_ITERATE",
            "L2V_PrintCU",
            "_L2V_NODE_ITERATE_END"
        ],
        "L2V_PrintUsage": [
            "L2V_PrintUsage",
            "printf",
            "printf",
            "LPTR_UNPACK",
            "L2V_GetUsage",
            "L2V_IDX_TO_NODE",
            "printf",
            "printf",
            "printf",
            "l2v_assert_eq"
        ],
        "_L2V_FreeNode": [
            "_L2V_FreeNode",
            "l2v_assert_ge",
            "l2v_assert_le"
        ],
        "Usage": [
            "Usage",
            "printf",
            "r",
            "exit"
        ],
        "main": [
            "main",
            "L2V_Init",
            "Usage",
            "Usage",
            "RandomTest",
            "SequentialTest"
        ],
        "L2V_Update": [
            "L2V_Update",
            "L2V_ForgetBiggestTree",
            "min",
            "UpdateGuts"
        ],
        "L2V_PeriodicRepack": [
            "L2V_PeriodicRepack",
            "l2v_assert_ne",
            "L2V_Repack"
        ],
        "L2V_Repack": [
            "L2V_Repack",
            "LPTR_UNPACK",
            "WMR_TRACE_1",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "L2V_IDX_TO_NODE",
            "CopyAndDestroy",
            "l2v_assert_ne",
            "_L2V_NODE_FILL",
            "Rebuild",
            "ReplaceRoot",
            "WMR_TRACE_0"
        ],
        "L2V_Init": [
            "L2V_Init",
            "WMR_PANIC",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "l2v_assert_ne",
            "LPTR_PACK_NAND",
            "WMR_MALLOC",
            "_L2V_FreeNode"
        ],
        "_L2V_ValidUp": [
            "_L2V_ValidUp",
            "l2v_assert_le"
        ],
        "_L2V_ValidDown": [
            "_L2V_ValidDown",
            "l2v_assert_ge"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Core/FPart": {
        "VFL_ReadBBT": [
            "VFL_ReadBBT",
            "WMR_MEMSET",
            "_ReadSpecialInfoBlock"
        ],
        "VFL_ReadBBTWithoutSpecial": [
            "VFL_ReadBBTWithoutSpecial",
            "_ReadSpecialInfoBlock",
            "_MarkBlockAsGoodInBBT",
            "_MarkBlockAsGoodInBBT"
        ],
        "VFL_Neuralize": [
            "VFL_Neuralize",
            "defined",
            "WMR_PRINT",
            "TEXT",
            "VFL_Neuralize",
            "WMR_MALLOC",
            "WMR_PRINT",
            "TEXT",
            "VFL_ReadBBTWithoutSpecial",
            "WMR_PRINT",
            "TEXT",
            "_isBlockGood",
            "Erase",
            "GET_Pbn",
            "WMR_PRINT",
            "TEXT",
            "WMR_PRINT",
            "TEXT",
            "WMR_FREE",
            "WMR_PRINT",
            "TEXT",
            "VFL_Neuralize"
        ],
        "FPART_SetSignatureStyle": [
            "FPART_SetSignatureStyle"
        ],
        "FPart_Register": [
            "FPart_Register"
        ]
    },
    "drivers/flash_nand/raw/Whimory/Core/VFL": {
        "BUF_Init": [
            "BUF_Init",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Init",
            "WMR_MALLOC",
            "sizeof",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "WMR_MALLOC",
            "sizeof",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "WMR_MALLOC",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Init"
        ],
        "BUF_Release": [
            "BUF_Release",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Release",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Release"
        ],
        "BUF_Close": [
            "BUF_Close",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Close",
            "WMR_FREE",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Close"
        ],
        "BUF_ReleaseAllBuffers": [
            "BUF_ReleaseAllBuffers",
            "BUF_Release"
        ],
        "_isBadMarkTableMarkGood": [
            "_isBadMarkTableMarkGood"
        ],
        "_SetBadMarkTable": [
            "_SetBadMarkTable"
        ],
        "VFL_Register": [
            "VFL_Register"
        ],
        "_Vpn2Cbn": [
            "_Vpn2Cbn",
            "_Vpn2Vbn",
            "_Vpn2Bank",
            "_Vbn2Tbn",
            "_ConvertT2P",
            "_Bank2CS",
            "_RemapBlock"
        ],
        "_Vpn2Ppn": [
            "_Vpn2Ppn",
            "_Vpn2Vbn",
            "_Vpn2Bank",
            "_Vbn2Tbn",
            "_ConvertT2P",
            "_Bank2CS",
            "_RemapBlock",
            "_Cbn2Ppn"
        ],
        "VFL_Open": [
            "VFL_Open",
            "VFL_LOG_PRINT",
            "TEXT",
            "VFL_Open",
            "VFL_ReadBBT",
            "VFL_ERR_PRINT",
            "TEXT",
            "VFL_ReadBBT",
            "_LoadVFLCxt",
            "VFL_ERR_PRINT",
            "TEXT",
            "_LoadVFLCxt",
            "_GetNewestVFLCxt",
            "VFL_ERR_PRINT",
            "TEXT",
            "FTLSuBlks",
            "VFLSuBlks",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "RECALC_VFL_CXT_CHECK_SUM",
            "WMR_MEMCPY",
            "defined",
            "VFL_ERR_PRINT",
            "TEXT",
            "simple",
            "GetDeviceInfo",
            "_SetUpVendorSpecificRelatedParams",
            "defined",
            "defined",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "VFL_ERR_PRINT",
            "TEXT",
            "_initWriteMultipleTables",
            "WMR_MEMSET",
            "_GetNumOfSuBlks",
            "_ConvertT2P",
            "_CSBank2Bank",
            "_MarkBlockAsBadInBBT",
            "_MarkBlockAsBadInBBT",
            "WMR_PANIC",
            "_SetNewFTLParams",
            "WMR_MALLOC",
            "VFL_ERR_PRINT",
            "TEXT",
            "WMR_MEMSET",
            "VFL_LOG_PRINT",
            "TEXT",
            "VFL_Open"
        ],
        "_BlankCheckSpare": [
            "_BlankCheckSpare",
            "sizeof"
        ],
        "VFL_Close": [
            "VFL_Close",
            "VFL_LOG_PRINT",
            "TEXT",
            "VFL_Close",
            "BUF_Close",
            "WMR_FREE",
            "_GetNewestVFLCxt",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "WMR_MEMSET",
            "sizeof",
            "VFL_LOG_PRINT",
            "TEXT",
            "VFL_Close"
        ],
        "VFL_WriteMultiplePagesInVb": [
            "VFL_WriteMultiplePagesInVb",
            "_Vpn2Vbn",
            "WMR_ASSERT",
            "_ConvertT2P",
            "_Vbn2Tbn",
            "_RemapBlock",
            "_Bank2CS",
            "WMR_MIN",
            "_Vpn2Bank",
            "_Bank2CS",
            "_Cbn2Ppn",
            "WriteScatteredPages",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WriteMultiplePagesInVb",
            "CHECK_VFL_CXT_CHECK_SUM",
            "RECALC_VFL_CXT_CHECK_SUM",
            "_ReportWriteScatteredFailBlock",
            "_MarkWriteScatteredFailBlockForDelete",
            "Write",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WriteMultiplePagesInVb",
            "CHECK_VFL_CXT_CHECK_SUM",
            "RECALC_VFL_CXT_CHECK_SUM",
            "_ReportWriteFailureSingle",
            "_MarkWriteFailBlockForDeleteWithPbn",
            "_Cbn2Ppn",
            "WriteMultiplePages",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WriteMultiplePagesInVb",
            "CHECK_VFL_CXT_CHECK_SUM",
            "RECALC_VFL_CXT_CHECK_SUM",
            "_ReportWriteMultipleFailBlock",
            "_MarkWriteMultipleFailBlockForDelete",
            "_Vpn2Bank",
            "_Bank2CS",
            "_Cbn2Ppn",
            "WriteScatteredPages",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WriteMultiplePagesInVb",
            "CHECK_VFL_CXT_CHECK_SUM",
            "RECALC_VFL_CXT_CHECK_SUM",
            "_ReportWriteScatteredFailBlock",
            "_MarkWriteScatteredFailBlockForDelete",
            "Write",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WriteMultiplePagesInVb",
            "CHECK_VFL_CXT_CHECK_SUM",
            "RECALC_VFL_CXT_CHECK_SUM",
            "_ReportWriteFailureSingle",
            "_MarkWriteFailBlockForDeleteWithPbn"
        ],
        "VFL_ReadMultiplePagesInVb": [
            "VFL_ReadMultiplePagesInVb",
            "_ConvertT2P",
            "_Vbn2Tbn",
            "_RemapBlock",
            "_Bank2CS",
            "WMR_MIN",
            "_Vpn2Bank",
            "_Bank2CS",
            "_Cbn2Ppn",
            "ReadScatteredPages",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_ReadMultiplePagesInVb",
            "_ReportECCFailureMultiple",
            "_Cbn2Ppn",
            "ReadMultiplePages",
            "_ReportECCFailureMultiple",
            "_Vpn2Bank",
            "_Bank2CS",
            "_Cbn2Ppn",
            "ReadScatteredPages",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_ReadMultiplePagesInVb",
            "_ReportECCFailureMultiple"
        ],
        "VFL_ReadScatteredPagesInVb": [
            "VFL_ReadScatteredPagesInVb",
            "_Vpn2Ppn",
            "ReadScatteredPages",
            "VFL_WRN_PRINT",
            "TEXT",
            "refresh",
            "_ReportECCFailureMultiple",
            "_Vpn2Vbn"
        ],
        "VSVFL_Register": [
            "VSVFL_Register"
        ],
        "_pfnConvert_Direct": [
            "_pfnConvert_Direct"
        ],
        "_Helper_ConvertP2C_OneBitReorder": [
            "_Helper_ConvertP2C_OneBitReorder"
        ],
        "_Helper_ConvertC2P_OneBitReorder": [
            "_Helper_ConvertC2P_OneBitReorder"
        ],
        "_Helper_ConvertP2C_TwoBitReorder": [
            "_Helper_ConvertP2C_TwoBitReorder"
        ],
        "_Helper_ConvertC2P_TwoBitReorder": [
            "_Helper_ConvertC2P_TwoBitReorder"
        ],
        "_pfnConvertP2C_TwoPlaneLSB": [
            "_pfnConvertP2C_TwoPlaneLSB",
            "_Helper_ConvertP2C_OneBitReorder"
        ],
        "_pfnConvertC2P_TwoPlaneLSB": [
            "_pfnConvertC2P_TwoPlaneLSB",
            "_Helper_ConvertC2P_OneBitReorder"
        ],
        "_pfnConvertP2C_TwoDieMSB": [
            "_pfnConvertP2C_TwoDieMSB",
            "_Helper_ConvertP2C_OneBitReorder"
        ],
        "_pfnConvertC2P_TwoDieMSB": [
            "_pfnConvertC2P_TwoDieMSB",
            "_Helper_ConvertC2P_OneBitReorder"
        ],
        "_pfnConvertP2C_TwoPlaneLSBTwoDieMSB": [
            "_pfnConvertP2C_TwoPlaneLSBTwoDieMSB",
            "_Helper_ConvertP2C_TwoBitReorder"
        ],
        "_pfnConvertC2P_TwoPlaneLSBTwoDieMSB": [
            "_pfnConvertC2P_TwoPlaneLSBTwoDieMSB",
            "_Helper_ConvertC2P_TwoBitReorder"
        ],
        "_pfnConvertP2C_ToshibaTwoDistrict": [
            "_pfnConvertP2C_ToshibaTwoDistrict",
            "_Helper_ConvertP2C_OneBitReorder"
        ],
        "_pfnConvertC2P_ToshibaTwoDistrict": [
            "_pfnConvertC2P_ToshibaTwoDistrict",
            "_Helper_ConvertC2P_OneBitReorder"
        ],
        "_pfnConvertP2C_SingleDie_7bitPlaneNoPower2": [
            "_pfnConvertP2C_SingleDie_7bitPlaneNoPower2"
        ],
        "_pfnConvertC2P_SingleDie_7bitPlaneNoPower2": [
            "_pfnConvertC2P_SingleDie_7bitPlaneNoPower2"
        ],
        "_pfnConvertP2C_TwoDie2_7bitPlaneNoPower2": [
            "_pfnConvertP2C_TwoDie2_7bitPlaneNoPower2"
        ],
        "_pfnConvertC2P_TwoDie2_7bitPlaneNoPower2": [
            "_pfnConvertC2P_TwoDie2_7bitPlaneNoPower2"
        ],
        "_pfnConvertP2C_ToshibaTwoDistrictExt": [
            "_pfnConvertP2C_ToshibaTwoDistrictExt",
            "_Helper_ConvertP2C_OneBitReorder"
        ],
        "_pfnConvertC2P_ToshibaTwoDistrictExt": [
            "_pfnConvertC2P_ToshibaTwoDistrictExt",
            "_Helper_ConvertC2P_OneBitReorder"
        ],
        "_ConvertT2P_Default": [
            "_ConvertT2P_Default",
            "VFL_ERR_PRINT",
            "TEXT",
            "set",
            "_pfnConvertP2C"
        ],
        "_ConvertP2T_Default": [
            "_ConvertP2T_Default",
            "VFL_ERR_PRINT",
            "TEXT",
            "set",
            "_pfnConvertC2P",
            "_Bank2CSBank"
        ],
        "_ConvertP2T_ToshibaTwoDie": [
            "_ConvertP2T_ToshibaTwoDie",
            "VFL_ERR_PRINT",
            "TEXT",
            "set",
            "_pfnConvertC2P",
            "_Bank2CSBank"
        ],
        "_GetFactoryBBTBuffer": [
            "_GetFactoryBBTBuffer",
            "VFL_ReadBBTWithoutSpecial",
            "GET_VFLCxt",
            "_MarkBlockAsGoodInBBT",
            "GET_VFLCxt"
        ]
    },
    "drivers/flash_nand/id": {
        "findNandInfo": [
            "findNandInfo",
            "WMR_MEMSET",
            "sizeof",
            "getChipIdAndTotalCECountAndCEMap",
            "WMR_PRINT",
            "areChipIdsIdentical",
            "WMR_PRINT",
            "checkCESymmetryAndGetPackageCnt",
            "WMR_PRINT",
            "lookupNandGeometry",
            "WMR_PRINT",
            "WMR_MEMCPY",
            "sizeof",
            "lookupBoardSupport",
            "lookupNandTiming",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "setECCLevels": [
            "setECCLevels"
        ],
        "addNandProperty": [
            "addNandProperty",
            "FindProperty",
            "sizeof",
            "WMR_PRINT"
        ],
        "fillNandConfigProperties": [
            "fillNandConfigProperties",
            "fillDbgChipIds",
            "addNandProperty",
            "addNandProperty",
            "FindProperty",
            "WMR_MEMCPY",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "addNandProperty",
            "fillNandPpnProperties",
            "addNandProperty",
            "addNandProperty"
        ],
        "reportToggleModeFMCTimingValues": [
            "reportToggleModeFMCTimingValues"
        ],
        "setToggleMode": [
            "setToggleMode"
        ],
        "reportFMCTimingValues": [
            "reportFMCTimingValues"
        ],
        "setNandIdPpnConfig": [
            "setNandIdPpnConfig",
            "getChipIdAndTotalCECountAndCEMap",
            "WMR_ASSERT"
        ],
        "setPPNOptions": [
            "setPPNOptions"
        ],
        "reportPpnFeatures": [
            "reportPpnFeatures"
        ],
        "reportDbgChipIds": [
            "reportDbgChipIds"
        ],
        "checkPpnLandingMap": [
            "checkPpnLandingMap",
            "WMR_PRINT"
        ],
        "targetSupportsToggle": [
            "targetSupportsToggle"
        ],
        "targetSupportsDiffDQS": [
            "targetSupportsDiffDQS"
        ],
        "targetSupportsDiffRE": [
            "targetSupportsDiffRE"
        ],
        "targetSupportsVREF": [
            "targetSupportsVREF"
        ],
        "targetSupportsSHC": [
            "targetSupportsSHC"
        ],
        "targetSupportsSingleCE": [
            "targetSupportsSingleCE"
        ],
        "flash_nand_id": [
            "flash_nand_id",
            "OAM_Init",
            "FIL_Init"
        ]
    },
    "drivers/flash_nand/ftl": {
        "flash_nand_init": [
            "flash_nand_init",
            "dprintf",
            "flash_nand_init",
            "flash_nand_id",
            "platform_late_init",
            "FIL_GetFuncTbl",
            "dprintf",
            "GetDeviceInfo",
            "ppn_init",
            "raw_nand_init"
        ]
    },
    "drivers/flash_nand/ppn-swiss": {
        "ppn_init": [
            "ppn_init",
            "dprintf",
            "swiss_ppn_init",
            "WMR_Start",
            "WMR_Open",
            "nand_filesys_init",
            "printf"
        ],
        "ppn_syscfg_init": [
            "ppn_syscfg_init",
            "WMR_Start",
            "WMR_PPN_GetFPart",
            "dprintf"
        ],
        "ppn_read_syscfg_hook": [
            "ppn_read_syscfg_hook",
            "dprintf",
            "ReadSpecialBlock",
            "dprintf"
        ]
    },
    "drivers/flash_nand/ppn": {
        "ppn_init": [
            "ppn_init",
            "dprintf",
            "ppn_init",
            "WMR_Start",
            "WMR_Open",
            "nand_filesys_init",
            "printf"
        ],
        "ppn_syscfg_init": [
            "ppn_syscfg_init",
            "WMR_Start",
            "WMR_PPN_GetFPart",
            "dprintf"
        ],
        "ppn_read_syscfg_hook": [
            "ppn_read_syscfg_hook",
            "dprintf",
            "ReadSpecialBlock",
            "dprintf"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Test": {
        "WMR_FTL_Test": [
            "WMR_FTL_Test"
        ],
        "WMR_VFL_Test": [
            "WMR_VFL_Test",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "_GetTestInfo",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_BufZone_FinishedAllocs",
            "WMR_ASSERT",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases",
            "WMR_MALLOC",
            "sizeof",
            "WMR_ASSERT",
            "_RunSequentialTest",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof"
        ],
        "_RunSequentialTest": [
            "_RunSequentialTest",
            "_FillBuffer",
            "_FillSwissMetaBuffer",
            "WMR_MEMCPY",
            "WMR_MEMCPY",
            "WMR_PRINT",
            "WMR_PRINT",
            "d",
            "Erase",
            "WMR_ASSERT",
            "WMR_PRINT",
            "d",
            "WriteMultiplePagesInVb",
            "WMR_ASSERT",
            "WMR_PRINT",
            "d",
            "ReadScatteredPagesInVb",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_ASSERT",
            "WMR_PRINT",
            "d",
            "ReadScatteredPagesInVb",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_ASSERT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "GetVbasPerVb",
            "GetVbasPerVb",
            "WMR_PRINT",
            "d",
            "Erase",
            "WMR_ASSERT",
            "ProgramMultipleVbas",
            "WMR_ASSERT",
            "GetVbasPerVb",
            "GetVbasPerVb",
            "ReadSpansInit",
            "ReadSpansAdd",
            "ReadSpans",
            "sizeof",
            "GetStruct",
            "WMR_PANIC",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_ASSERT",
            "WMR_MEMCMP",
            "WMR_PRINT"
        ],
        "_GetVFLUInt16": [
            "_GetVFLUInt16",
            "sizeof",
            "WMR_ASSERT",
            "GetStruct",
            "sizeof",
            "WMR_PRINT"
        ],
        "_GetVFLUInt32": [
            "_GetVFLUInt32",
            "sizeof",
            "WMR_ASSERT",
            "GetStruct",
            "sizeof",
            "WMR_PRINT"
        ],
        "_GetTestInfo": [
            "_GetTestInfo",
            "_GetVFLUInt16",
            "_GetVFLUInt16",
            "_GetVFLUInt16",
            "_GetVFLUInt16",
            "GetDeviceInfo",
            "_GetVFLUInt32"
        ],
        "WMR_FPart_Test": [
            "WMR_FPart_Test"
        ],
        "WMR_FIL_Test": [
            "WMR_FIL_Test",
            "FIL_Test"
        ],
        "FIL_Test": [
            "FIL_Test",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BufZone_Init",
            "InitTestInfo",
            "ppnMiscFillDevStruct",
            "FILInterfaceTest"
        ],
        "InitTestInfo": [
            "InitTestInfo",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "WMR_ASSERT",
            "GetDeviceInfo",
            "WMR_ASSERT"
        ],
        "isClean": [
            "isClean"
        ],
        "FILInterfaceTest": [
            "FILInterfaceTest",
            "WMR_PRINT",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_PANIC",
            "WMR_BufZone_FinishedRebases",
            "WMR_MALLOC",
            "sizeof",
            "ppnMiscInitCommandStructure",
            "WMR_PRINT",
            "ppnMiscSingleOperation",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscInitCommandStructure",
            "ppnMiscAddPhysicalAddressToCommandStructure",
            "ppnMiscGetChannelFromBank",
            "ppnMiscGetCEIdxFromBank",
            "ppnMiscGetCAUFromBank",
            "ppnMiscAddMemoryToCommandStructure",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscReorderCommandStruct",
            "PerformCommandList",
            "WMR_PRINT",
            "WMR_PRINT",
            "isClean",
            "WMR_PRINT",
            "isClean",
            "WMR_PRINT",
            "WMR_PRINT",
            "FillBufferWithCountingPattern",
            "FillBufferWithCountingPattern",
            "ppnMiscSingleOperation",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscSingleOperation",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "FILTestHexdump",
            "MultiBlockErase",
            "WMR_PRINT",
            "ppnMiscInitCommandStructure",
            "ppnMiscAddPhysicalAddressToCommandStructure",
            "ppnMiscGetChannelFromBank",
            "ppnMiscGetCEIdxFromBank",
            "ppnMiscGetCAUFromBank",
            "ppnMiscAddMemoryToCommandStructure",
            "ppnMiscReorderCommandStruct",
            "PerformCommandList",
            "WMR_PRINT",
            "MultiPageProgram",
            "WMR_PRINT",
            "ppnMiscInitCommandStructure",
            "ppnMiscAddPhysicalAddressToCommandStructure",
            "ppnMiscGetChannelFromBank",
            "ppnMiscGetCEIdxFromBank",
            "ppnMiscGetCAUFromBank",
            "ppnMiscAddMemoryToCommandStructure",
            "FillBufferWithCountingPattern",
            "FillBufferWithCountingPattern",
            "ppnMiscReorderCommandStruct",
            "PerformCommandList",
            "WMR_PRINT",
            "MultiPageRead",
            "WMR_PRINT",
            "ppnMiscInitCommandStructure",
            "ppnMiscAddPhysicalAddressToCommandStructure",
            "ppnMiscGetChannelFromBank",
            "ppnMiscGetCEIdxFromBank",
            "ppnMiscGetCAUFromBank",
            "ppnMiscAddMemoryToCommandStructure",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscReorderCommandStruct",
            "PerformCommandList",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "FILTestHexdump",
            "WMR_PRINT",
            "WMR_FREE",
            "sizeof",
            "WMR_BufZone_Free"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Boot": {
        "ANDExportAllStructs": [
            "ANDExportAllStructs",
            "sizeof",
            "sizeof",
            "WMR_PPN_GetVFL",
            "WMR_PPN_GetFTL",
            "SUB_MIN_ZERO",
            "_appendStructToBuffer"
        ],
        "WMR_Open": [
            "WMR_Open",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "_LookupVFL",
            "WMR_ASSERT",
            "GetMinorVersion",
            "WMR_PRINT",
            "GetMinorVersion",
            "_LookupFTL",
            "WMR_ASSERT",
            "GetMinorVersion",
            "WMR_PRINT",
            "GetMinorVersion",
            "Init",
            "WMR_PRINT",
            "Open",
            "WMR_PRINT",
            "WMR_PRINT",
            "_ClearFILStatistics",
            "WMR_VFL_Test",
            "Init",
            "WMR_PRINT",
            "Open",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_FTL_Test",
            "WMR_PRINT"
        ],
        "WMR_Initial_Format": [
            "WMR_Initial_Format",
            "FIL_GetFuncTbl",
            "WMR_ASSERT",
            "_GetDeviceInfo",
            "_FillNewSignature",
            "_DestructiveFormat"
        ],
        "WMR_Update": [
            "WMR_Update",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "_LookupVFL",
            "GetMinorVersion",
            "_LookupFTL",
            "GetMinorVersion",
            "WMR_PRINT",
            "_DestructiveFormat",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof"
        ],
        "WMR_Partition": [
            "WMR_Partition",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "_LookupVFL",
            "_LookupFTL",
            "Init",
            "Open",
            "WMR_PRINT",
            "_ClearFILStatistics",
            "_SetFTLPartition",
            "Init",
            "Format",
            "WMR_PRINT",
            "WMR_PRINT",
            "WriteSpecialBlock",
            "sizeof",
            "WMR_PRINT",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_Open",
            "Close",
            "Close"
        ],
        "WMR_Close": [
            "WMR_Close",
            "Close",
            "Close",
            "Close",
            "BUF_Close",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof"
        ],
        "_andGetStruct": [
            "_andGetStruct",
            "ANDExportAllStructs",
            "sizeof",
            "ANDExportAllStructs",
            "sizeof",
            "GetStruct",
            "GetStruct",
            "FIL_GetStruct",
            "ANDExportAllStructs",
            "sizeof",
            "ANDExportAllStructs",
            "sizeof",
            "WMR_PRINT"
        ],
        "_andPerformFunction": [
            "_andPerformFunction",
            "GetStruct",
            "SetStruct",
            "FIL_SetStruct",
            "Neuralize",
            "FIL_SetStruct",
            "WriteStats",
            "WMR_PRINT",
            "WMR_PANIC",
            "WMR_PRINT"
        ],
        "WMR_PPN_CtrlIO": [
            "WMR_PPN_CtrlIO",
            "_andPerformFunction",
            "_andGetStruct"
        ],
        "WMR_PPNGetStruct": [
            "WMR_PPNGetStruct",
            "WMR_FILL_STRUCT",
            "sizeof",
            "WMR_PRINT"
        ],
        "_FillNewSignature": [
            "_FillNewSignature",
            "WMR_MEMSET",
            "sizeof",
            "_LookupFPart",
            "WMR_ASSERT",
            "GetMinorVersion",
            "_LookupVFL",
            "WMR_ASSERT",
            "GetMinorVersion",
            "_LookupFTL",
            "WMR_ASSERT",
            "GetMinorVersion",
            "WMR_FILL_SW_VERSION",
            "sizeof"
        ],
        "_AllocateInitialSignature": [
            "_AllocateInitialSignature",
            "IsSpecialBlockTypeAllocated",
            "AllocateSpecialBlock",
            "WMR_PRINT",
            "AllocateSpecialBlockType",
            "WMR_PRINT"
        ],
        "_DestructiveFormat": [
            "_DestructiveFormat",
            "Init",
            "Init",
            "WMR_PRINT",
            "WMR_PRINT",
            "Format",
            "WMR_PRINT",
            "Open",
            "WMR_PRINT",
            "WMR_PRINT",
            "_AllocateInitialSignature",
            "WMR_PRINT",
            "Format",
            "WMR_PRINT",
            "_ClearFILStatistics",
            "_SetFTLPartition",
            "Init",
            "WMR_PRINT",
            "WMR_PRINT",
            "Format",
            "WMR_PRINT",
            "WMR_Open",
            "WMR_PRINT",
            "WriteSpecialBlock",
            "sizeof",
            "WMR_PRINT",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_Open",
            "Close",
            "Close"
        ],
        "_SetFTLPartition": [
            "_SetFTLPartition",
            "sizeof",
            "GetStruct",
            "WMR_PRINT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "ConvertUserMBtoFTLSuperblocks",
            "WMR_PRINT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PRINT",
            "SetStruct",
            "sizeof",
            "WMR_PRINT"
        ],
        "_GetDeviceInfo": [
            "_GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/SVFL": {
        "SwissVFL_Register": [
            "SwissVFL_Register",
            "WMR_MEMSET",
            "sizeof",
            "defined"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/SFTL": {
        "s_g_mul_bytes_per_lba_shift": [
            "s_g_mul_bytes_per_lba_shift"
        ],
        "s_g_mul_bytes_per_lba_meta_shift": [
            "s_g_mul_bytes_per_lba_meta_shift"
        ],
        "s_g_addr_to_vba_shift": [
            "s_g_addr_to_vba_shift"
        ],
        "s_g_vba_to_sb_shift": [
            "s_g_vba_to_sb_shift"
        ],
        "s_g_vba_to_vbaOfs_shift": [
            "s_g_vba_to_vbaOfs_shift"
        ],
        "s_g_div_bytes_per_page_shift": [
            "s_g_div_bytes_per_page_shift"
        ],
        "s_g_mul_vbas_per_page_shift": [
            "s_g_mul_vbas_per_page_shift"
        ],
        "s_g_div_vbas_per_stripe_shift": [
            "s_g_div_vbas_per_stripe_shift"
        ],
        "s_g_mod_vbas_per_stripe_and": [
            "s_g_mod_vbas_per_stripe_and"
        ],
        "s_g_mul_bytes_per_lba_mul": [
            "s_g_mul_bytes_per_lba_mul"
        ],
        "s_g_mul_bytes_per_lba_meta_mul": [
            "s_g_mul_bytes_per_lba_meta_mul"
        ],
        "s_g_addr_to_vba_mul": [
            "s_g_addr_to_vba_mul"
        ],
        "s_g_vba_to_sb_div": [
            "s_g_vba_to_sb_div"
        ],
        "s_g_vba_to_vbaOfs_div": [
            "s_g_vba_to_vbaOfs_div"
        ],
        "s_g_div_bytes_per_page_div": [
            "s_g_div_bytes_per_page_div"
        ],
        "s_g_mul_vbas_per_page_mul": [
            "s_g_mul_vbas_per_page_mul"
        ],
        "s_g_div_vbas_per_stripe_div": [
            "s_g_div_vbas_per_stripe_div"
        ],
        "s_g_mod_vbas_per_stripe_mod": [
            "s_g_mod_vbas_per_stripe_mod"
        ],
        "s_can_ffs": [
            "s_can_ffs"
        ],
        "s_ffs": [
            "s_ffs",
            "WMR_ASSERT"
        ],
        "s_geom_init": [
            "s_geom_init",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "s_can_ffs",
            "s_ffs",
            "s_can_ffs",
            "s_ffs",
            "s_can_ffs",
            "s_ffs",
            "s_can_ffs",
            "s_ffs",
            "s_can_ffs",
            "s_ffs",
            "s_can_ffs",
            "s_ffs",
            "sizeof",
            "WMR_PANIC",
            "size",
            "metadata",
            "sizeof"
        ],
        "s_trim_init": [
            "s_trim_init",
            "sizeof",
            "sizeof",
            "WMR_MALLOC",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "s_trim_close": [
            "s_trim_close",
            "WMR_FREE",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "s_trim_apply": [
            "s_trim_apply",
            "L2V_Update",
            "s_token_insert",
            "s_write_push_full_buf",
            "WMR_MEMSET",
            "sizeof"
        ],
        "sftl_unmap": [
            "sftl_unmap",
            "WMR_ASSERT",
            "s_trim_apply",
            "s_dbg_check_data_counts",
            "s_trim_apply",
            "s_sb_get_type",
            "s_sb_boot_free_erase",
            "s_dbg_check_data_counts",
            "lowData",
            "s_trim_apply",
            "s_drain_stream_cur",
            "s_stats_update"
        ],
        "s_trim_writeCollide": [
            "s_trim_writeCollide",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "s_trim_apply"
        ],
        "s_trim_markVulnerable": [
            "s_trim_markVulnerable",
            "s_g_vba_to_sb",
            "WMR_ASSERT"
        ],
        "s_trim_clearVulnerables": [
            "s_trim_clearVulnerables",
            "WMR_MEMSET",
            "sizeof"
        ],
        "s_trim_checkVulnerable": [
            "s_trim_checkVulnerable"
        ],
        "s_dbg_init": [
            "s_dbg_init",
            "WMR_MALLOC",
            "sizeof"
        ],
        "s_dbg_close": [
            "s_dbg_close",
            "WMR_FREE",
            "sizeof"
        ],
        "s_dbg_check_validSums": [
            "s_dbg_check_validSums",
            "WMR_MEMSET",
            "sizeof",
            "L2V_Search_Init",
            "L2V_Search",
            "s_g_vba_to_sb",
            "WMR_ASSERT",
            "WMR_ASSERT"
        ],
        "s_dbg_check_data_counts": [
            "s_dbg_check_data_counts",
            "s_sb_get_validLbas",
            "s_sb_get_type",
            "GetVbasPerVb",
            "WMR_ASSERT",
            "WMR_ASSERT"
        ],
        "checkWL": [
            "checkWL",
            "s_sb_get_type",
            "s_sb_get_erases",
            "WMR_PRINT",
            "s_sb_get_type",
            "s_sb_get_validLbas",
            "s_sb_get_erases",
            "WMR_PRINT",
            "WMR_PANIC"
        ],
        "s_dbg_check_sb_dist": [
            "s_dbg_check_sb_dist",
            "s_sb_get_type",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_type",
            "WMR_PANIC",
            "s_sb_get_type",
            "WMR_MEMCPY",
            "sizeof",
            "checkWL",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_ASSERT"
        ],
        "voidFunc": [
            "voidFunc"
        ],
        "s_stats_to_buf": [
            "s_stats_to_buf",
            "sizeof",
            "sizeof",
            "X_FTL_doStat",
            "WMR_ASSERT",
            "sizeof",
            "sizeof",
            "GetStruct",
            "sizeof",
            "sizeof",
            "sizeof",
            "GetStruct",
            "sizeof",
            "sizeof",
            "sizeof",
            "WMR_ASSERT"
        ],
        "_updateLowerStats": [
            "_updateLowerStats",
            "sizeof",
            "GetStruct",
            "_UpdateStatisticsCounters",
            "SetStruct"
        ],
        "s_stats_from_buf": [
            "s_stats_from_buf",
            "WMR_MEMSET",
            "sizeof",
            "s_stats_from_buf_jump"
        ],
        "s_stats_insert": [
            "s_stats_insert",
            "s_stats_to_buf",
            "s_token_insert"
        ],
        "s_stats_update": [
            "s_stats_update",
            "sizeof"
        ],
        "s_readDist_init": [
            "s_readDist_init"
        ],
        "s_readDist_close": [
            "s_readDist_close"
        ],
        "s_readCount_enq": [
            "s_readCount_enq",
            "WMR_TRACE_IST_1",
            "s_g_vba_to_sb"
        ],
        "s_readRefresh_enq": [
            "s_readRefresh_enq",
            "WMR_TRACE_IST_1",
            "s_g_vba_to_sb"
        ],
        "s_readDist_end_of_read_handle": [
            "s_readDist_end_of_read_handle",
            "s_bg_read",
            "WMR_TRACE_IST_0",
            "s_sb_get_type",
            "s_bg_enq",
            "WMR_TRACE_IST_0"
        ],
        "s_token_insert": [
            "s_token_insert",
            "WMR_ASSERT",
            "s_g_mul_bytes_per_lba",
            "WMR_MEMCPY",
            "s_SetupMeta_IntData"
        ],
        "sftl_boot": [
            "sftl_boot",
            "s_g_mul_bytes_per_lba",
            "s_cxt_boot",
            "s_dbg_check_sb_dist",
            "s_dbg_check_data_counts",
            "s_write_switch",
            "s_dbg_check_sb_dist",
            "s_dbg_check_data_counts",
            "s_sb_get_type",
            "s_flatten",
            "s_write_reseq",
            "s_write_handle_pfail",
            "s_sb_get_type",
            "s_gc_data",
            "s_dbg_check_data_counts",
            "s_sb_get_type",
            "scan",
            "s_sb_boot_free_erase",
            "s_dbg_check_data_counts",
            "s_dbg_check_sb_dist",
            "s_dbg_check_data_counts"
        ],
        "s_bg_write": [
            "s_bg_write",
            "s_gc_bg"
        ],
        "s_bg_read": [
            "s_bg_read",
            "s_gc_bg"
        ],
        "s_bg_enq": [
            "s_bg_enq",
            "s_gc_data_enq"
        ],
        "s_write_init": [
            "s_write_init",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "s_write_close": [
            "s_write_close",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "s_write_switch": [
            "s_write_switch",
            "WMR_ASSERT"
        ],
        "s_write_host_switch": [
            "s_write_host_switch",
            "s_drain_stream_cur",
            "s_write_switch"
        ],
        "s_write_gc_switch": [
            "s_write_gc_switch",
            "s_drain_stream",
            "s_write_switch"
        ],
        "s_write_push_full_buf": [
            "s_write_push_full_buf",
            "s_drain_stream_cur"
        ],
        "s_drain_stream_cur": [
            "s_drain_stream_cur",
            "s_drain_stream"
        ],
        "s_drain_stream": [
            "s_drain_stream",
            "s_write_switch",
            "WMR_ASSERT",
            "drained",
            "s_sb_next",
            "s_stats_insert",
            "handleRagged",
            "s_write_reseq",
            "WMR_ASSERT",
            "s_write_handle_pfail",
            "s_gc_data_enq",
            "s_sb_next_cur",
            "WMR_ASSERT"
        ],
        "s_drain_stream_all": [
            "s_drain_stream_all",
            "s_drain_stream"
        ],
        "sftl_shutdown_notify": [
            "sftl_shutdown_notify",
            "s_dbg_check_data_counts",
            "s_drain_stream_all",
            "s_dbg_check_data_counts",
            "s_gc_bg_shutdown",
            "s_sb_get_type",
            "GetVbasPerVb",
            "Erase",
            "GetVbasPerVb",
            "s_sb_set_type",
            "s_sb_log_erase",
            "s_dbg_check_data_counts",
            "s_cxt_save",
            "s_dbg_check_data_counts"
        ],
        "btoc_terminate": [
            "btoc_terminate"
        ],
        "s_write_handle_pfail": [
            "s_write_handle_pfail",
            "btoc_terminate",
            "s_sb_next_cur",
            "s_sb_get_type",
            "s_gc_data"
        ],
        "s_write_reseq": [
            "s_write_reseq",
            "META_SET_WEAVESEQ"
        ],
        "sftl_write": [
            "sftl_write",
            "WMR_TRACE_4",
            "s_dbg_check_data_counts",
            "s_debug",
            "WMR_TRACE_1",
            "s_trim_writeCollide",
            "s_flatten",
            "s_write_reseq",
            "s_write_handle_pfail",
            "s_gc_prewrite",
            "s_write_host_switch",
            "s_write_host_switch",
            "s_write_multi_internal",
            "s_write_reseq",
            "L2V_Update",
            "s_write_handle_pfail",
            "s_wearlev_search",
            "s_bg_write",
            "s_drain_stream_all",
            "s_cxt_periodic",
            "s_stats_update",
            "s_dbg_check_data_counts",
            "WMR_TRACE_1"
        ],
        "handleRagged": [
            "handleRagged",
            "s_sb_next",
            "s_g_mod_vbas_per_stripe",
            "s_g_mod_vbas_per_stripe",
            "S_ROUNDUP_POW2",
            "WMR_ASSERT",
            "WMR_MIN",
            "WMR_PERFORM_AES",
            "s_g_mul_bytes_per_lba",
            "s_SetupMeta_Data",
            "WMR_MEMCPY",
            "s_g_mul_bytes_per_lba_meta",
            "s_SetupMeta_DataGC",
            "s_g_mul_bytes_per_lba",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "advance_sb",
            "WMR_MIN",
            "s_btoc_update_size",
            "WMR_MIN",
            "s_g_addr_to_vba",
            "ProgramMultipleVbas",
            "s_g_mul_bytes_per_lba",
            "WMR_PRINT",
            "META_GET_LBA",
            "s_btoc_add_data",
            "META_GET_WEAVESEQ",
            "META_GET_USERSEQ",
            "L2V_Update",
            "s_trim_markVulnerable",
            "WMR_ASSERT",
            "advance_sb"
        ],
        "s_write_multi_internal": [
            "s_write_multi_internal",
            "s_sb_next",
            "handleRagged",
            "advance_sb",
            "s_btoc_update_size",
            "GetVbasPerVb",
            "ROUNDDOWNTO",
            "WMR_ASSERT",
            "megastripe",
            "WMR_MIN",
            "WMR_MIN",
            "WMR_MIN",
            "s_SetupMeta_Data_Padding",
            "s_SetupMeta_Data",
            "s_SetupMeta_DataGC",
            "s_g_addr_to_vba",
            "ProgramMultipleVbas",
            "WMR_PRINT",
            "WMR_MIN",
            "WMR_ASSERT",
            "s_btoc_add_data",
            "META_GET_USERSEQ",
            "L2V_Update",
            "s_g_mul_bytes_per_lba",
            "advance_sb",
            "WMR_ASSERT",
            "handleRagged"
        ],
        "s_pad_block": [
            "s_pad_block",
            "s_sb_get_num_btoc_vbas",
            "s_sb_get_type",
            "s_write_switch",
            "s_drain_stream",
            "WMR_MIN",
            "WMR_MIN",
            "s_write_multi_internal"
        ],
        "btoc_calc_userSeq": [
            "btoc_calc_userSeq"
        ],
        "s_btoc_init": [
            "s_btoc_init",
            "sizeof",
            "WMR_ASSERT",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_MAX",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases"
        ],
        "s_btoc_close": [
            "s_btoc_close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "s_btoc_isFull": [
            "s_btoc_isFull",
            "WMR_ASSERT"
        ],
        "s_btoc_update_size": [
            "s_btoc_update_size",
            "sizeof",
            "s_g_div_bytes_per_page",
            "s_g_mul_vbas_per_page",
            "WMR_ASSERT"
        ],
        "s_btoc_add_data": [
            "s_btoc_add_data",
            "vba",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "s_g_addr_to_vba"
        ],
        "s_btoc_cross_data": [
            "s_btoc_cross_data",
            "WMR_ASSERT",
            "btoc_calc_userSeq",
            "s_g_addr_to_vba",
            "GetVbasPerVb",
            "s_SetupMeta_Data_BTOC",
            "ProgramMultipleVbas",
            "s_sb_clr_num_btoc_vbas",
            "WMR_PRINT",
            "s_sb_set_num_btoc_vbas",
            "s_sb_next_cur"
        ],
        "s_btoc_copy": [
            "s_btoc_copy",
            "WMR_I_CAN_HAZ_DEBUGGER",
            "WMR_PANIC",
            "WMR_PRINT",
            "WMR_ASSERT",
            "sizeof"
        ],
        "s_btoc_read_cb": [
            "s_btoc_read_cb",
            "WMR_PRINT",
            "status",
            "META_SET_LBA",
            "WMR_PRINT",
            "META_SET_LBA"
        ],
        "s_btoc_read": [
            "s_btoc_read",
            "s_btoc_search",
            "s_btoc_copy",
            "s_sb_get_num_btoc_vbas",
            "s_g_addr_to_vba",
            "GetVbasPerVb",
            "ReadSpansInit",
            "ReadSpansAdd",
            "ReadSpans",
            "META_IS_BTOC_DATA",
            "WMR_PRINT",
            "WMR_ASSERT",
            "s_sb_set_num_btoc_vbas_0ok",
            "GetVbasPerVb",
            "s_g_addr_to_vba",
            "WMR_MIN",
            "ReadSpansInit",
            "WMR_MIN",
            "ReadSpansAdd",
            "ReadSpans",
            "META_GET_WEAVESEQ",
            "META_GET_LBA",
            "META_IS_DATA",
            "META_GET_WEAVESEQ",
            "META_GET_USERSEQ",
            "META_GET_WEAVESEQ",
            "btoc_calc_userSeq"
        ],
        "s_btoc_getSrc": [
            "s_btoc_getSrc",
            "s_g_vba_to_sb",
            "s_g_vba_to_vbaOfs"
        ],
        "s_btoc_setSrc": [
            "s_btoc_setSrc",
            "s_g_vba_to_sb",
            "s_g_vba_to_vbaOfs"
        ],
        "s_btoc_dealloc": [
            "s_btoc_dealloc",
            "WMR_PANIC"
        ],
        "s_sb_init": [
            "s_sb_init",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "s_sb_set_type",
            "s_sb_set_num_btoc_vbas_0ok",
            "s_sb_set_validLbas",
            "s_sb_set_reads"
        ],
        "s_sb_close": [
            "s_sb_close",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "s_sb_next_cur": [
            "s_sb_next_cur",
            "s_sb_next"
        ],
        "s_sb_alloc": [
            "s_sb_alloc",
            "WMR_MEMSET",
            "sizeof",
            "s_sb_get_type",
            "getMaxErase",
            "replaceMaxErase",
            "WMR_ASSERT",
            "s_sb_get_validLbas",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "s_sb_get_erases",
            "checkForEOL",
            "WMR_PANIC",
            "s_sb_get_type",
            "s_sb_get_type",
            "GetVbasPerVb",
            "Erase",
            "GetVbasPerVb",
            "s_sb_set_type",
            "s_sb_log_erase",
            "s_dbg_check_sb_dist",
            "s_trim_checkVulnerable",
            "maxIdx",
            "GetVbasPerVb",
            "s_sb_get_type",
            "Erase",
            "s_sb_log_erase",
            "s_trim_checkVulnerable",
            "GetVbasPerVb",
            "s_sb_set_type",
            "s_sb_set_reads"
        ],
        "s_sb_cxt_alloc": [
            "s_sb_cxt_alloc",
            "s_sb_alloc",
            "s_sb_set_type"
        ],
        "s_sb_cxt_free_clean": [
            "s_sb_cxt_free_clean",
            "s_sb_get_type",
            "GetVbasPerVb",
            "WMR_ASSERT",
            "s_sb_get_type",
            "s_sb_set_type",
            "s_sb_log_erase"
        ],
        "s_sb_cxt_free_erase": [
            "s_sb_cxt_free_erase",
            "WMR_ASSERT",
            "s_sb_get_type",
            "Erase",
            "s_sb_cxt_free_clean"
        ],
        "s_sb_boot_free_erase": [
            "s_sb_boot_free_erase",
            "GetVbasPerVb",
            "Erase",
            "GetVbasPerVb",
            "s_sb_set_type",
            "s_sb_log_erase"
        ],
        "s_sb_fmt_erase": [
            "s_sb_fmt_erase",
            "Erase",
            "s_sb_set_type",
            "GetVbasPerVb"
        ],
        "s_sb_next": [
            "s_sb_next",
            "s_wearlev_cross_block",
            "s_sb_log_next",
            "s_sb_alloc",
            "s_btoc_dealloc",
            "s_sb_set_type",
            "s_sb_get_num_btoc_vbas",
            "s_bg_enq",
            "s_sb_set_type",
            "s_sb_set_static",
            "s_sb_set_static",
            "GetVbasPerVb",
            "s_btoc_alloc",
            "s_sb_clr_num_btoc_vbas"
        ],
        "s_sb_next_from_sb": [
            "s_sb_next_from_sb",
            "s_sb_next",
            "WMR_PANIC"
        ],
        "s_sb_sweep0": [
            "s_sb_sweep0",
            "s_sb_get_type",
            "s_sb_get_validLbas",
            "s_sb_set_type",
            "GetVbasPerVb"
        ],
        "Outside_L2V_ValidUp": [
            "Outside_L2V_ValidUp",
            "WMR_ASSERT",
            "s_g_vba_to_sb"
        ],
        "Outside_L2V_ValidDown": [
            "Outside_L2V_ValidDown",
            "WMR_ASSERT",
            "s_g_vba_to_sb",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "s_sb_get_num_btoc_vbas",
            "s_sb_set_type",
            "s_sb_set_reads",
            "GetVbasPerVb",
            "s_gc_zeroValidCross"
        ],
        "s_calc_lbas": [
            "s_calc_lbas",
            "do_quantize",
            "do_quantize",
            "sized"
        ],
        "s_freeMemory": [
            "s_freeMemory",
            "WMR_BufZone_Free",
            "s_dbg_close",
            "s_gc_close",
            "s_trim_close",
            "s_write_close",
            "s_readDist_close",
            "s_sb_close",
            "s_btoc_close",
            "L2V_Free",
            "WMR_MEMSET",
            "sizeof"
        ],
        "sftl_init": [
            "sftl_init",
            "init",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_ASSERT",
            "WMR_OFFSETOF",
            "WMR_MEMSET",
            "sizeof",
            "s_debug",
            "s_geom_init",
            "s_trim_init",
            "s_cxt_init",
            "s_readDist_init",
            "WMR_BufZone_Init",
            "GetDeviceInfo",
            "S_SBSTREAM_BUFSIZE",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "S_WRITE_LBAS_THRESHOLD",
            "sizeof",
            "GetStruct",
            "ROUNDDOWNTO",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases",
            "sizeof",
            "GetStruct",
            "s_calc_lbas",
            "SetStruct",
            "L2V_Search_Init",
            "s_btoc_init",
            "s_gc_init",
            "s_sb_init",
            "s_write_init",
            "s_dbg_init",
            "sizeof",
            "GetStruct",
            "L2V_Init",
            "s_freeMemory"
        ],
        "sftl_close": [
            "sftl_close",
            "s_freeMemory"
        ],
        "s_flatten": [
            "s_flatten",
            "WMR_TRACE_IST_0",
            "L2V_ForceRepack",
            "L2V_FindFrag",
            "s_gc_for_flatten",
            "s_drain_stream_all",
            "s_gc_inject",
            "WMR_TRACE_IST_1",
            "s_drain_stream_all",
            "L2V_Repack",
            "WMR_TRACE_IST_1"
        ],
        "stats_scan_all": [
            "stats_scan_all",
            "ReadSpansInit",
            "GetVbasPerVb",
            "s_g_addr_to_vba",
            "ReadSpansAdd",
            "WMR_ASSERT",
            "ReadSpans"
        ],
        "loadStats": [
            "loadStats",
            "stats_scan_all",
            "s_cxt_load"
        ],
        "sftl_format": [
            "sftl_format",
            "loadStats",
            "s_sb_fmt_erase",
            "s_cxt_save"
        ],
        "s_cxt_save": [
            "s_cxt_save",
            "WMR_TRACE_IST_0",
            "s_drain_stream_all",
            "s_trim_apply",
            "cxtRememberOld",
            "cxtMakeSpace",
            "cxtSaveBase",
            "cxtEraseCur",
            "cxtSaveStats",
            "cxtEraseCur",
            "cxtSaveSB",
            "cxtEraseCur",
            "cxtSaveUserSeq",
            "cxtEraseCur",
            "cxtSaveReads",
            "cxtEraseCur",
            "s_dbg_check_validSums",
            "cxtSaveTree",
            "cxtEraseCur",
            "cxtEraseOld",
            "cxtFreeUnused",
            "s_trim_clearVulnerables",
            "WMR_TRACE_IST_0"
        ],
        "s_diff_sbFilter_add": [
            "s_diff_sbFilter_add",
            "WMR_ASSERT",
            "WMR_ASSERT"
        ],
        "s_diff_sbFilter_has": [
            "s_diff_sbFilter_has",
            "WMR_ASSERT",
            "WMR_ASSERT"
        ],
        "s_diff_filterPost": [
            "s_diff_filterPost",
            "s_diff_sbFilter_add"
        ],
        "s_cxt_scan_diff": [
            "s_cxt_scan_diff",
            "wo_seed",
            "find_min",
            "WMR_ASSERT",
            "WMR_I_CAN_HAZ_DEBUGGER",
            "WMR_PANIC",
            "s_sb_get_num_btoc_vbas",
            "s_g_vba_to_sb",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PANIC",
            "L2V_Update",
            "load_trims",
            "s_sb_set_type",
            "s_g_vba_to_sb",
            "s_sb_set_type",
            "s_g_vba_to_sb",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MAX",
            "WMR_ASSERT",
            "s_btoc_read",
            "s_sb_set_type",
            "s_g_addr_to_vba",
            "WMR_MAX",
            "wo_unseed",
            "s_dbg_check_validSums"
        ],
        "s_scan_all_sb": [
            "s_scan_all_sb",
            "ReadSpansInit",
            "GetVbasPerVb",
            "s_g_addr_to_vba",
            "ReadSpansAdd",
            "s_g_addr_to_vba",
            "ReadSpansAdd",
            "s_sb_set_type",
            "WMR_ASSERT",
            "ReadSpans",
            "GetVbasPerVb",
            "META_IS_LBA_UECC",
            "META_IS_LBA_CLEAN",
            "META_GET_PAGETYPE",
            "data_weaveseq_add",
            "META_IS_LBA_UECC",
            "clean_add",
            "META_IS_LBA_CLEAN",
            "clean_add",
            "META_BTOC_SET_NUM_VBAS",
            "data_weaveseq_add",
            "s_sb_set_type",
            "s_cxt_is_firstSb",
            "s_cxt_addSb",
            "META_GET_WEAVESEQ",
            "WMR_PRINT",
            "d",
            "META_GET_PAGETYPE",
            "clean_add",
            "wo_sort"
        ],
        "s_wo_init": [
            "s_wo_init",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_ASSERT",
            "WMR_MALLOC",
            "sizeof"
        ],
        "s_wo_close": [
            "s_wo_close",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "s_wearlev_search": [
            "s_wearlev_search",
            "WMR_TRACE_IST_0",
            "s_sb_get_type",
            "s_sb_get_erases",
            "static",
            "S_USERSEQ_IS_OLD",
            "S_USERSEQ_IS_OLD",
            "s_bg_enq",
            "s_bg_enq",
            "WMR_TRACE_IST_0"
        ],
        "s_verify_meta": [
            "s_verify_meta",
            "META_GET_LBA",
            "WMR_PANIC",
            "META_GET_LBA",
            "WMR_PRINT",
            "META_GET_LBA",
            "META_IS_UECC",
            "WMR_PRINT",
            "META_GET_LBA"
        ],
        "s_read_xlate": [
            "s_read_xlate",
            "META_GET_LBA",
            "L2V_Search"
        ],
        "sftl_read_cb": [
            "sftl_read_cb",
            "WMR_PRINT",
            "status",
            "WMR_PRINT",
            "s_readRefresh_enq",
            "WMR_PRINT",
            "s_readRefresh_enq",
            "WMR_PRINT",
            "WMR_PRINT",
            "s_g_vba_to_sb"
        ],
        "s_read_real": [
            "s_read_real",
            "ReadSpansInit",
            "L2V_Search",
            "WMR_ASSERT",
            "WMR_MIN",
            "WMR_MIN",
            "ReadSpansAdd",
            "s_readDist_add",
            "s_SetupMeta_TrimRead",
            "s_g_mul_bytes_per_lba",
            "ReadSpans",
            "s_verify_meta",
            "ReadSpansInit",
            "s_sb_next",
            "s_readDist_end_of_read_handle"
        ],
        "s_read_int": [
            "s_read_int",
            "s_read_real"
        ],
        "s_read_coherency": [
            "s_read_coherency",
            "META_GET_LBA",
            "s_drain_stream"
        ],
        "sftl_read": [
            "sftl_read",
            "s_read_coherency",
            "s_read_real",
            "s_stats_update",
            "pad_current_block"
        ],
        "sftl_read_spans": [
            "sftl_read_spans",
            "s_read_coherency",
            "s_read_real",
            "s_stats_update"
        ],
        "s_WorkFifo_isEmpty": [
            "s_WorkFifo_isEmpty"
        ],
        "s_WorkFifo_isFullish": [
            "s_WorkFifo_isFullish",
            "s_WorkFifo_isEmpty",
            "WMR_ASSERT"
        ],
        "s_WorkFifo_Enq": [
            "s_WorkFifo_Enq",
            "WMR_ASSERT"
        ],
        "s_WorkFifo_Deq": [
            "s_WorkFifo_Deq",
            "WMR_ASSERT"
        ],
        "s_WorkFifo_Deq_sb": [
            "s_WorkFifo_Deq_sb"
        ],
        "s_gc_init": [
            "s_gc_init",
            "WMR_ASSERT",
            "L2V_Search_Init",
            "WMR_BufZone_Init",
            "WMR_ASSERT",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "s_gc_close": [
            "s_gc_close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_MEMSET",
            "sizeof"
        ],
        "s_gc_for_flatten": [
            "s_gc_for_flatten",
            "dangerousData",
            "GCMachine_Data"
        ],
        "s_gc_slice": [
            "s_gc_slice",
            "s_dbg_check_data_counts",
            "s_dbg_check_sb_dist",
            "dangerousData",
            "GCMachine_Data",
            "s_dbg_check_sb_dist",
            "idleLowData",
            "s_WorkFifo_isEmpty",
            "GCMachine_Data",
            "s_dbg_check_sb_dist"
        ],
        "s_gc_prewrite": [
            "s_gc_prewrite",
            "s_dbg_check_data_counts",
            "s_dbg_check_sb_dist",
            "dangerousData",
            "GCMachine_Data",
            "s_dbg_check_sb_dist",
            "lowData",
            "s_WorkFifo_isEmpty",
            "GCMachine_Data",
            "s_dbg_check_sb_dist"
        ],
        "s_gc_bg": [
            "s_gc_bg",
            "s_dbg_check_data_counts",
            "s_dbg_check_sb_dist",
            "dangerousData",
            "s_dbg_check_sb_dist",
            "s_WorkFifo_isEmpty",
            "GCMachine_Data",
            "s_dbg_check_sb_dist"
        ],
        "s_gc_bg_shutdown": [
            "s_gc_bg_shutdown",
            "s_dbg_check_data_counts",
            "s_dbg_check_sb_dist",
            "s_WorkFifo_isEmpty",
            "dangerousData",
            "s_dbg_check_sb_dist",
            "GCMachine_Data",
            "s_dbg_check_sb_dist"
        ],
        "s_gc_data_enq": [
            "s_gc_data_enq",
            "WMR_TRACE_IST_1",
            "s_WorkFifo_Enq"
        ],
        "s_gc_data": [
            "s_gc_data",
            "WMR_TRACE_IST_2",
            "s_dbg_check_sb_dist",
            "GCMachine_Data",
            "s_WorkFifo_isEmpty",
            "s_WorkFifo_Deq",
            "s_dbg_check_sb_dist",
            "WMR_TRACE_IST_1"
        ],
        "s_gc_move_advisable": [
            "s_gc_move_advisable",
            "dangerousData"
        ],
        "findLba": [
            "findLba",
            "L2V_Search"
        ],
        "findVbas": [
            "findVbas",
            "L2V_Search",
            "WMR_PRINT",
            "L2V_Update"
        ],
        "s_gc_inject": [
            "s_gc_inject",
            "WMR_MIN",
            "ZoneSetup",
            "L2V_Search",
            "WMR_MIN",
            "ZoneAdd",
            "MoveZone"
        ],
        "s_SetupMeta_TrimRead": [
            "s_SetupMeta_TrimRead"
        ],
        "s_SetupMeta_Data_Padding": [
            "s_SetupMeta_Data_Padding",
            "s_SetupMeta_Data"
        ],
        "s_SetupMeta_Trim": [
            "s_SetupMeta_Trim",
            "s_SetupMeta_Data"
        ],
        "s_SetupMeta_Data": [
            "s_SetupMeta_Data"
        ],
        "s_SetupMeta_IntData": [
            "s_SetupMeta_IntData"
        ],
        "s_SetupMeta_Data_UECC": [
            "s_SetupMeta_Data_UECC"
        ],
        "s_SetupMeta_Data_BTOC": [
            "s_SetupMeta_Data_BTOC"
        ],
        "s_SetupMeta_DataGC": [
            "s_SetupMeta_DataGC"
        ],
        "s_SetupMeta_Cxt": [
            "s_SetupMeta_Cxt",
            "WMR_MIN"
        ],
        "s_cxt_init": [
            "s_cxt_init",
            "sizeof",
            "s_g_mul_bytes_per_lba"
        ],
        "s_cxt_boot": [
            "s_cxt_boot",
            "s_wo_init",
            "WMR_PRINT",
            "WMR_CLOCK_TICKS",
            "s_scan_all_sb",
            "WMR_CLOCK_TICKS",
            "WMR_PRINT",
            "WMR_GET_TICKS_PER_US",
            "WMR_PRINT",
            "WMR_CLOCK_TICKS",
            "WMR_MALLOC",
            "sizeof",
            "s_cxt_load",
            "WMR_CLOCK_TICKS",
            "WMR_PRINT",
            "WMR_GET_TICKS_PER_US",
            "WMR_PRINT",
            "WMR_CLOCK_TICKS",
            "s_cxt_scan_diff",
            "WMR_CLOCK_TICKS",
            "WMR_PRINT",
            "WMR_GET_TICKS_PER_US",
            "WMR_ASSERT",
            "s_cxt_stats_load",
            "WMR_PRINT",
            "s_sb_get_type",
            "s_sb_set_type",
            "WMR_FREE",
            "sizeof",
            "s_wo_close",
            "s_sb_sweep0",
            "s_dbg_check_sb_dist",
            "s_dbg_check_validSums",
            "s_dbg_check_data_counts"
        ],
        "s_cxt_periodic": [
            "s_cxt_periodic",
            "s_cxt_save",
            "s_stats_insert",
            "s_write_push_full_buf"
        ],
        "s_cxt_addSb": [
            "s_cxt_addSb",
            "WMR_ASSERT"
        ],
        "cxtRamNuke": [
            "cxtRamNuke",
            "L2V_Nuke",
            "WMR_MEMSET",
            "sizeof"
        ],
        "s_cxt_load_finish": [
            "s_cxt_load_finish",
            "s_sb_get_type",
            "s_sb_cxt_free_erase"
        ],
        "s_cxt_load": [
            "s_cxt_load",
            "s_dbg_check_validSums",
            "cxtLoadBase",
            "WMR_PRINT",
            "cxtRamNuke",
            "s_diff_filterPost",
            "cxtReadInterpret",
            "WMR_PRINT",
            "cxtRamNuke",
            "WMR_PRINT",
            "cxtRamNuke",
            "s_dbg_check_validSums",
            "s_cxt_load_finish"
        ],
        "s_cxt_stats_load": [
            "s_cxt_stats_load",
            "WMR_ASSERT",
            "s_read_int",
            "s_stats_from_buf",
            "WMR_PRINT",
            "ReadSpansInit",
            "ReadSpansAdd",
            "ReadSpans",
            "s_stats_from_buf",
            "WMR_PRINT"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/SFTL/L2V": {
        "L2V_Free": [
            "L2V_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "WMR_FREE",
            "WMR_FREE",
            "WMR_FREE",
            "sizeof"
        ],
        "L2V_Search_Init": [
            "L2V_Search_Init"
        ],
        "L2V_Search": [
            "L2V_Search",
            "HitCache",
            "l2v_assert_lt",
            "ROOT_CONTIG_UNPACK",
            "L2V_Repack",
            "L2V_IDX_TO_NODE",
            "_L2V_NODE_ITERATE",
            "_L2V_NODE_ITERATE_NEXT",
            "_L2V_NODE_ITERATE_END",
            "WMR_PANIC",
            "l2v_assert",
            "deep"
        ],
        "_L2V_NodeBig_PushContig": [
            "_L2V_NodeBig_PushContig",
            "l2v_assert_ne",
            "l2v_assert_lt"
        ],
        "_L2V_NodeBig_PushContig_Node": [
            "_L2V_NodeBig_PushContig_Node"
        ],
        "_L2V_NodeBig_PushContig_Nand": [
            "_L2V_NodeBig_PushContig_Nand",
            "l2v_assert_ne"
        ],
        "L2V_FindFrag": [
            "L2V_FindFrag",
            "L2V_IDX_TO_NODE",
            "ROOT_CONTIG_GET_NODEIDX",
            "TreeFrag",
            "WMR_MIN"
        ],
        "L2V_PrintPtr": [
            "L2V_PrintPtr",
            "LPTR_UNPACK",
            "L2V_PrintCU"
        ],
        "L2V_PrintCU": [
            "L2V_PrintCU",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "L2V_PrintNode": [
            "L2V_PrintNode",
            "_L2V_NODE_ITERATE",
            "L2V_PrintCU",
            "_L2V_NODE_ITERATE_END"
        ],
        "L2V_PrintUsage": [
            "L2V_PrintUsage",
            "printf",
            "L2V_GetUsage",
            "L2V_IDX_TO_NODE",
            "ROOT_CONTIG_GET_NODEIDX",
            "printf",
            "printf",
            "printf",
            "printf",
            "WMR_PANIC",
            "nodes",
            "numNodes"
        ],
        "_L2V_FreeNode": [
            "_L2V_FreeNode",
            "l2v_assert_ge",
            "l2v_assert_le"
        ],
        "Usage": [
            "Usage",
            "printf",
            "r",
            "exit"
        ],
        "main": [
            "main",
            "L2V_Init",
            "L2V_Init",
            "L2V_Init",
            "L2V_Init",
            "L2V_Init",
            "Usage",
            "Usage",
            "RandomTest",
            "SequentialTest"
        ],
        "Outside_L2V_ValidUp": [
            "Outside_L2V_ValidUp"
        ],
        "Outside_L2V_ValidDown": [
            "Outside_L2V_ValidDown"
        ],
        "L2V_Update": [
            "L2V_Update",
            "L2V_ForceRepack",
            "min",
            "UpdateGuts"
        ],
        "L2V_ForceRepack": [
            "L2V_ForceRepack",
            "l2v_assert_ne",
            "l2v_assert_ne",
            "L2V_Repack"
        ],
        "L2V_PeriodicRepack": [
            "L2V_PeriodicRepack",
            "L2V_ForceRepack"
        ],
        "L2V_Repack": [
            "L2V_Repack",
            "WMR_CLOCK_TICKS",
            "WMR_TRACE_1",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "L2V_IDX_TO_NODE",
            "ROOT_CONTIG_GET_NODEIDX",
            "WMR_CLOCK_TICKS",
            "CopyAndDestroy",
            "WMR_CLOCK_TICKS",
            "l2v_assert_ne",
            "WMR_CLOCK_TICKS",
            "Rebuild",
            "WMR_CLOCK_TICKS",
            "ReplaceRoot",
            "WMR_CLOCK_TICKS",
            "WMR_GET_TICKS_PER_US",
            "WMR_GET_TICKS_PER_US",
            "WMR_GET_TICKS_PER_US",
            "WMR_TRACE_0"
        ],
        "L2V_Nuke": [
            "L2V_Nuke",
            "_L2V_FreeNode"
        ],
        "L2V_Init": [
            "L2V_Init",
            "WMR_LOG2",
            "WMR_ASSERT",
            "WMR_LOG2",
            "WMR_ASSERT",
            "WMR_PANIC",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "l2v_assert_ne",
            "WMR_MEMSET",
            "WMR_MALLOC",
            "L2V_Nuke"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/Misc": {
        "ppnMiscGetCAUFromBank": [
            "ppnMiscGetCAUFromBank"
        ],
        "ppnMiscGetChannelFromBank": [
            "ppnMiscGetChannelFromBank"
        ],
        "ppnMiscGetCEIdxFromBank": [
            "ppnMiscGetCEIdxFromBank"
        ],
        "ppnMiscGetCEFromBank": [
            "ppnMiscGetCEFromBank",
            "ppnMiscGetCEIdxFromBank",
            "ppnMiscGetChannelFromBank"
        ],
        "ppnMiscGetCEIdxFromChipEnable": [
            "ppnMiscGetCEIdxFromChipEnable",
            "WMR_ASSERT",
            "WMR_ASSERT"
        ],
        "ppnMiscConvertToPPNPageAddress": [
            "ppnMiscConvertToPPNPageAddress"
        ],
        "ppnMiscConvertPhysicalAddressToCauBlockPage": [
            "ppnMiscConvertPhysicalAddressToCauBlockPage"
        ],
        "ppnMiscConvertPhysicalAddressToBankBlockPage": [
            "ppnMiscConvertPhysicalAddressToBankBlockPage"
        ],
        "ppnMiscSingleOperation": [
            "ppnMiscSingleOperation",
            "ppnMiscGetChannelFromBank",
            "ppnMiscGetCAUFromBank",
            "ppnMiscGetCEIdxFromBank",
            "WMR_MEMSET",
            "sizeof",
            "ppnMiscConvertToPPNPageAddress",
            "PerformCommandList"
        ],
        "ppnMiscSingleLbaRead": [
            "ppnMiscSingleLbaRead",
            "WMR_MEMSET",
            "sizeof",
            "ppnMiscConvertToPPNPageAddress",
            "VFL_ERR_PRINT",
            "TEXT",
            "PerformCommandList"
        ],
        "ppnMiscFillDevStruct": [
            "ppnMiscFillDevStruct",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "GetDeviceInfo",
            "WMR_PRINT",
            "d",
            "FIL_GetStruct",
            "ppnMiscTestConversionFunctions"
        ],
        "ppnMiscIsBlockGood": [
            "ppnMiscIsBlockGood"
        ],
        "ppnMiscTestSpecialBlock": [
            "ppnMiscTestSpecialBlock",
            "block",
            "BUF_Get",
            "ppnMiscSingleOperation",
            "VFL_WRN_PRINT",
            "TEXT",
            "erasing",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscSingleOperation",
            "VFL_WRN_PRINT",
            "TEXT",
            "programming",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscSingleOperation",
            "VFL_WRN_PRINT",
            "TEXT",
            "reading",
            "VFL_WRN_PRINT",
            "TEXT",
            "verifying",
            "BUF_Release",
            "BUF_Release"
        ],
        "ppnMiscAddPhysicalAddressToCommandStructure": [
            "ppnMiscAddPhysicalAddressToCommandStructure",
            "ppnMiscConvertToPPNPageAddress"
        ],
        "ppnMiscAddMemoryToCommandStructure": [
            "ppnMiscAddMemoryToCommandStructure"
        ],
        "ppnMiscInitCommandStructure": [
            "ppnMiscInitCommandStructure",
            "WMR_MEMSET",
            "sizeof"
        ],
        "ppnMiscReorderCommandStruct": [
            "ppnMiscReorderCommandStruct",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof"
        ],
        "BUF_Init": [
            "BUF_Init",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Init",
            "WMR_MALLOC",
            "sizeof",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "WMR_MALLOC",
            "sizeof",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "WMR_MALLOC",
            "BUF_ERR_PRINT",
            "TEXT",
            "BUF_Init",
            "BUF_Close",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Init"
        ],
        "BUF_Release": [
            "BUF_Release",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Release",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Release"
        ],
        "BUF_Close": [
            "BUF_Close",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Close",
            "WMR_FREE",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "BUF_LOG_PRINT",
            "TEXT",
            "BUF_Close"
        ],
        "BUF_ReleaseAllBuffers": [
            "BUF_ReleaseAllBuffers",
            "BUF_Release"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/FTL": {
        "freeBlockList": [
            "freeBlockList",
            "WMR_FREE",
            "sizeof"
        ],
        "invalidateCXT": [
            "invalidateCXT",
            "SetupMeta_Cxt",
            "VFL_Write",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList"
        ],
        "writeCXTInfo": [
            "writeCXTInfo",
            "SetupMeta_Cxt",
            "WMR_MEMCPY",
            "_writePage",
            "_writePage",
            "_writePage",
            "_FTLGetStatisticsToCxt",
            "WMR_MEMSET",
            "_writePage",
            "WMR_MEMSET",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage",
            "sizeof",
            "sizeof",
            "sizeof",
            "_writePage"
        ],
        "quickMountUpdate": [
            "quickMountUpdate",
            "valid",
            "WMR_TRACE_IST_1",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "WMR_TRACE_IST_1",
            "removeBlockFromEraseNowList",
            "BUF_Get",
            "WMR_TRACE_IST_1",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "writeCXTInfo",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "erase",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BUF_Release",
            "WMR_TRACE_IST_1",
            "BUF_Release",
            "WMR_TRACE_IST_1"
        ],
        "allocateBlock": [
            "allocateBlock",
            "isBlockInEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "isBlockInEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "invalidateCXT",
            "WMR_PANIC",
            "BTOC_Dealloc",
            "WMR_ASSERT",
            "invalidateCXT",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BTOC_Alloc",
            "WMR_MEMSET",
            "BTOC_Dealloc",
            "invalidateCXT",
            "VFL_Erase",
            "removeBlockFromEraseNowList",
            "BTOC_Alloc",
            "WMR_MEMSET"
        ],
        "findFreeCacheEntry": [
            "findFreeCacheEntry"
        ],
        "clearEntryInCache": [
            "clearEntryInCache",
            "WMR_MEMSET",
            "SetupMeta_Index",
            "WMR_ASSERT",
            "writeIndexPage",
            "invalidateCXT",
            "WMR_PANIC",
            "collectBlockStats",
            "WMR_MEMSET"
        ],
        "writeCurrentBlockTOC": [
            "writeCurrentBlockTOC",
            "SetupMeta_Data_BTOC",
            "_writePage",
            "SetupMeta_Index_BTOC",
            "_writePage"
        ],
        "_verifyMetaData": [
            "_verifyMetaData",
            "META_GET_LBA",
            "invalidateCXT",
            "WMR_PANIC",
            "META_GET_LBA",
            "WMR_PRINT",
            "META_GET_LBA",
            "META_IS_UECC"
        ],
        "IndexMarkDirty": [
            "IndexMarkDirty"
        ],
        "IndexLoadClean": [
            "IndexLoadClean",
            "findFreeCacheEntry",
            "clearEntryInCache",
            "invalidateCXT",
            "WMR_PANIC",
            "WMR_MEMSET",
            "_readPage",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "IndexLoadDirty": [
            "IndexLoadDirty",
            "findFreeCacheEntry",
            "clearEntryInCache",
            "invalidateCXT",
            "WMR_PANIC",
            "WMR_MEMSET",
            "_readPage",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "_writeMultiPages": [
            "_writeMultiPages",
            "META_IS_DATA",
            "debug",
            "invalidateCXT",
            "VFL_WriteMultiplePagesInVb",
            "WMR_PRINT"
        ],
        "_readMultiPages": [
            "_readMultiPages",
            "debug",
            "updateReadCounter",
            "VFL_ReadScatteredPagesInVb",
            "debug",
            "WMR_TRACE_IST_1",
            "_readPage",
            "WMR_PRINT",
            "WMR_TRACE_IST_1",
            "WMR_PRINT",
            "WMR_PRINT",
            "_readPage",
            "WMR_TRACE_IST_1",
            "updateReadCounter",
            "WMR_TRACE_IST_1",
            "VFL_ReadScatteredPagesInVb",
            "debug",
            "_readPage",
            "WMR_PRINT",
            "WMR_PRINT",
            "debug",
            "_readPage"
        ],
        "isBlockInEraseNowList": [
            "isBlockInEraseNowList"
        ],
        "removeBlockFromEraseNowList": [
            "removeBlockFromEraseNowList"
        ],
        "addBlockToEraseNowList": [
            "addBlockToEraseNowList",
            "invalidateCXT",
            "VFL_Erase",
            "WMR_PANIC",
            "VFL_Erase"
        ],
        "_writePage": [
            "_writePage",
            "BUF_Get",
            "invalidateCXT",
            "WMR_MEMCPY",
            "sizeof",
            "META_IS_DATA",
            "VFL_Write",
            "WMR_PRINT",
            "addBlockToEraseNowList",
            "invalidateCXT",
            "WMR_PANIC",
            "BUF_Release"
        ],
        "_readPage": [
            "_readPage",
            "VFL_Read",
            "WMR_PRINT",
            "addBlockToEraseNowList",
            "invalidateCXT",
            "WMR_PANIC",
            "debug",
            "updateReadCounter",
            "WMR_PRINT",
            "debug",
            "WMR_TRACE_IST_1",
            "WMR_TRACE_IST_1"
        ],
        "_UpdateStatisticsCounters": [
            "_UpdateStatisticsCounters",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "sizeof"
        ],
        "YAFTL_Register": [
            "YAFTL_Register"
        ],
        "CheckDataCounts": [
            "CheckDataCounts",
            "WMR_ASSERT"
        ],
        "SaveValids": [
            "SaveValids"
        ],
        "CheckValids": [
            "CheckValids",
            "WMR_ASSERT"
        ],
        "CheckBlockDist": [
            "CheckBlockDist",
            "invalidateCXT",
            "WMR_PANIC",
            "CheckBlockDist",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_ASSERT"
        ],
        "WorkFifo_isEmpty": [
            "WorkFifo_isEmpty"
        ],
        "WorkFifo_Enq": [
            "WorkFifo_Enq",
            "WMR_ASSERT"
        ],
        "WorkFifo_Deq": [
            "WorkFifo_Deq",
            "WMR_ASSERT"
        ],
        "YAFTL_GC_Data_Deq_sb": [
            "YAFTL_GC_Data_Deq_sb"
        ],
        "YAFTL_GC_Init": [
            "YAFTL_GC_Init",
            "L2V_Search_Init",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_Buf_Alloc_ForDMA",
            "sizeof",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "YAFTL_GC_Close": [
            "YAFTL_GC_Close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "YAFTL_GC_PreWrite": [
            "YAFTL_GC_PreWrite",
            "CheckDataCounts",
            "CheckBlockDist",
            "dangerousData",
            "YAFTL_GC_Index",
            "dangerousData",
            "YAFTL_GC_Data",
            "CheckBlockDist",
            "lowData",
            "GCMachine_Data",
            "CheckBlockDist"
        ],
        "YAFTL_GC_Index": [
            "YAFTL_GC_Index",
            "WMR_TRACE_IST_2",
            "CheckBlockDist",
            "ChooseIndexSB",
            "BTOC_GET_IPN",
            "GetBlockTOC",
            "GetBlockTOC",
            "EvictIndex",
            "SanityCheckValid",
            "EraseIndex",
            "WMR_TRACE_IST_1",
            "WorkFifo_isEmpty",
            "CheckBlockDist",
            "WMR_TRACE_IST_1"
        ],
        "YAFTL_GC_Data_Enq": [
            "YAFTL_GC_Data_Enq",
            "WMR_TRACE_IST_1",
            "WorkFifo_Enq"
        ],
        "YAFTL_GC_Index_Enq": [
            "YAFTL_GC_Index_Enq",
            "WMR_TRACE_IST_1",
            "WorkFifo_Enq"
        ],
        "YAFTL_GC_Data": [
            "YAFTL_GC_Data",
            "WMR_TRACE_IST_2",
            "CheckBlockDist",
            "GCMachine_Data",
            "WMR_TRACE_IST_1",
            "WorkFifo_isEmpty",
            "WorkFifo_Deq",
            "CheckBlockDist",
            "WMR_TRACE_IST_1"
        ],
        "BTOC_Init": [
            "BTOC_Init",
            "WMR_ASSERT",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BufZone_Init",
            "WMR_Buf_Alloc_ForDMA",
            "WMR_BufZone_FinishedAllocs",
            "WMR_BufZone_Rebase",
            "WMR_BufZone_FinishedRebases"
        ],
        "BTOC_Close": [
            "BTOC_Close",
            "WMR_BufZone_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof"
        ],
        "BTOC_BootFixup": [
            "BTOC_BootFixup"
        ],
        "BTOC_GetSrc": [
            "BTOC_GetSrc"
        ],
        "BTOC_SetSrc": [
            "BTOC_SetSrc"
        ],
        "BTOC_Dealloc": [
            "BTOC_Dealloc",
            "invalidateCXT",
            "WMR_PANIC"
        ],
        "BTOC_Lock": [
            "BTOC_Lock"
        ],
        "BTOC_Unlock": [
            "BTOC_Unlock"
        ],
        "BTOC_Read": [
            "BTOC_Read",
            "_readPage"
        ],
        "BTOC_SetAll": [
            "BTOC_SetAll",
            "WMR_MEMSET"
        ],
        "BTOC_Copy": [
            "BTOC_Copy"
        ],
        "BTOC_Get": [
            "BTOC_Get"
        ],
        "BTOC_Set": [
            "BTOC_Set"
        ],
        "SetupMeta_Data": [
            "SetupMeta_Data"
        ],
        "SetupMeta_Data_UECC": [
            "SetupMeta_Data_UECC"
        ],
        "SetupMeta_Index": [
            "SetupMeta_Index"
        ],
        "SetupMeta_Data_BTOC": [
            "SetupMeta_Data_BTOC"
        ],
        "SetupMeta_Index_BTOC": [
            "SetupMeta_Index_BTOC"
        ],
        "SetupMeta_IndexGC": [
            "SetupMeta_IndexGC"
        ],
        "SetupMeta_DataGC": [
            "SetupMeta_DataGC"
        ],
        "SetupMeta_Cxt": [
            "SetupMeta_Cxt"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/FTL/L2V": {
        "L2V_Free": [
            "L2V_Free",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "WMR_FREE"
        ],
        "L2V_Search_Init": [
            "L2V_Search_Init"
        ],
        "L2V_Search": [
            "L2V_Search",
            "HitCache",
            "l2v_assert_lt",
            "LPTR_UNPACK",
            "L2V_Repack",
            "L2V_IDX_TO_NODE",
            "_L2V_NODE_ITERATE",
            "_L2V_NODE_ITERATE_NEXT",
            "_L2V_NODE_ITERATE_END",
            "WMR_PANIC",
            "l2v_assert",
            "deep"
        ],
        "_L2V_NodeBig_PushContig": [
            "_L2V_NodeBig_PushContig",
            "l2v_assert_ne",
            "l2v_assert_lt"
        ],
        "_L2V_NodeBig_PushContig_Node": [
            "_L2V_NodeBig_PushContig_Node"
        ],
        "_L2V_NodeBig_PushContig_Nand": [
            "_L2V_NodeBig_PushContig_Nand",
            "l2v_assert_ne"
        ],
        "L2V_ForgetBiggestTree": [
            "L2V_ForgetBiggestTree",
            "ChooseBiggest",
            "LPTR_IS_NODEPTR",
            "Forget",
            "L2V_IDX_TO_NODE",
            "LPTR_GET_NODEIDX",
            "ReplaceRoot"
        ],
        "L2V_PrintPtr": [
            "L2V_PrintPtr",
            "LPTR_UNPACK",
            "L2V_PrintCU"
        ],
        "L2V_PrintCU": [
            "L2V_PrintCU",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "L2V_PrintNode": [
            "L2V_PrintNode",
            "_L2V_NODE_ITERATE",
            "L2V_PrintCU",
            "_L2V_NODE_ITERATE_END"
        ],
        "L2V_PrintUsage": [
            "L2V_PrintUsage",
            "printf",
            "printf",
            "LPTR_UNPACK",
            "L2V_GetUsage",
            "L2V_IDX_TO_NODE",
            "printf",
            "printf",
            "printf",
            "l2v_assert_eq"
        ],
        "_L2V_FreeNode": [
            "_L2V_FreeNode",
            "l2v_assert_ge",
            "l2v_assert_le"
        ],
        "Usage": [
            "Usage",
            "printf",
            "r",
            "exit"
        ],
        "main": [
            "main",
            "L2V_Init",
            "Usage",
            "Usage",
            "RandomTest",
            "SequentialTest"
        ],
        "L2V_Update": [
            "L2V_Update",
            "L2V_ForgetBiggestTree",
            "min",
            "UpdateGuts"
        ],
        "L2V_PeriodicRepack": [
            "L2V_PeriodicRepack",
            "l2v_assert_ne",
            "L2V_Repack"
        ],
        "L2V_Repack": [
            "L2V_Repack",
            "LPTR_UNPACK",
            "WMR_TRACE_1",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "L2V_IDX_TO_NODE",
            "CopyAndDestroy",
            "l2v_assert_ne",
            "_L2V_NODE_FILL",
            "Rebuild",
            "ReplaceRoot",
            "WMR_TRACE_0"
        ],
        "L2V_Init": [
            "L2V_Init",
            "WMR_PANIC",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "sizeof",
            "l2v_assert_ne",
            "WMR_MALLOC",
            "l2v_assert_ne",
            "LPTR_PACK_NAND",
            "WMR_MALLOC",
            "_L2V_FreeNode"
        ],
        "_L2V_ValidUp": [
            "_L2V_ValidUp",
            "l2v_assert_le"
        ],
        "_L2V_ValidDown": [
            "_L2V_ValidDown",
            "l2v_assert_ge"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/FPart": {
        "_initSpecialBlockHeader": [
            "_initSpecialBlockHeader",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof"
        ],
        "_g_ppnfpartReadSpecialBlock": [
            "_g_ppnfpartReadSpecialBlock",
            "_ppnfpartReadSpecialBlock"
        ],
        "PPNFPart_Register": [
            "PPNFPart_Register",
            "WMR_MEMSET",
            "sizeof"
        ],
        "ppnfpartOldReadSpecialBlock": [
            "ppnfpartOldReadSpecialBlock",
            "_findSpecialBlock",
            "WMR_PRINT",
            "TEXT",
            "blocks",
            "andSBGetHandler",
            "oldReadSpecialBlockSingleVersion",
            "WMR_PRINT",
            "TEXT",
            "handler"
        ]
    },
    "drivers/flash_nand/ppn/WhimoryPPN/Core/VFL": {
        "callPrintV2PMapping": [
            "callPrintV2PMapping",
            "_printV2PMapping"
        ],
        "_isMixedBlock": [
            "_isMixedBlock",
            "WMR_ASSERT"
        ],
        "_testVFLCxtAfterOpenCycle": [
            "_testVFLCxtAfterOpenCycle",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "_getV2PMixedArraySize",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMCPY",
            "_getV2PMixedArraySize",
            "ppnMiscFillDevStruct",
            "_ppnvflOpen",
            "WMR_MEMCMP",
            "sizeof",
            "VFL_ERR_PRINT",
            "TEXT",
            "main",
            "WMR_MEMCMP",
            "sizeof",
            "VFL_ERR_PRINT",
            "TEXT",
            "RAM",
            "VFL_ERR_PRINT",
            "TEXT",
            "WMR_MEMCMP",
            "sizeof",
            "VFL_ERR_PRINT",
            "TEXT",
            "VFL_ERR_PRINT",
            "TEXT",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "sizeof",
            "WMR_FREE",
            "_getV2PMixedArraySize"
        ],
        "_analyzeMultiReadStatuses": [
            "_analyzeMultiReadStatuses",
            "case",
            "case",
            "case",
            "case",
            "case",
            "case",
            "case",
            "WMR_MEMSET",
            "WMR_MEMSET",
            "ppnMiscConvertPhysicalAddressToBankBlockPage",
            "ppnMiscGetCEFromBank",
            "_ReportFailure",
            "ppnMiscGetCEFromBank",
            "_ReportFailure",
            "_markBlockForReplacement",
            "VFL_WRN_PRINT",
            "TEXT",
            "X",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WRN_PRINT",
            "TEXT",
            "VFL_WRN_PRINT",
            "TEXT",
            "X",
            "VFL_WRN_PRINT",
            "TEXT",
            "meta",
            "ppnMiscConvertPhysicalAddressToBankBlockPage",
            "VFL_WRN_PRINT",
            "TEXT",
            "WMR_PANIC"
        ],
        "PPNVFL_Register": [
            "PPNVFL_Register",
            "WMR_MEMSET",
            "sizeof",
            "defined"
        ]
    },
    "drivers/samsung/dwi": {
        "dwi_init": [
            "dwi_init",
            "clock_gate",
            "clock_get_frequency",
            "clock_get_frequency",
            "DWI_CLOCK_CONFIG_CLOCK_SCALER"
        ],
        "dwi_send_backlight_command": [
            "dwi_send_backlight_command",
            "DWI_TR_CTRL_BYTE_CNT"
        ]
    },
    "drivers/samsung/swi": {
        "swi_backlight_enable": [
            "swi_backlight_enable",
            "clock_gate",
            "clock_get_frequency",
            "SWI_CON_SWI_CLK_DIV",
            "gpio_write"
        ]
    },
    "drivers/samsung/hdmi8947": {
        "hdmi_controller_start": [
            "hdmi_controller_start",
            "install_int_handler",
            "event_init",
            "clock_gate",
            "unmask_int",
            "reset",
            "power_down_phy",
            "task_start",
            "task_create",
            "read_reg",
            "debug",
            "hdmi_device_start",
            "interrupts",
            "write_reg",
            "or_reg",
            "write_reg"
        ],
        "hdmi_controller_stop": [
            "hdmi_controller_stop",
            "debug",
            "hdmi_controller_stop_video",
            "mask_int",
            "abort_edid",
            "hdmi_device_stop",
            "callout_dequeue"
        ],
        "hdmi_controller_validate_video": [
            "hdmi_controller_validate_video",
            "bzero",
            "sizeof",
            "bcopy",
            "sizeof",
            "debug",
            "validate_video_link"
        ],
        "hdmi_controller_read_bytes_i2c": [
            "hdmi_controller_read_bytes_i2c",
            "iic_read"
        ],
        "hdmi_controller_write_bytes_i2c": [
            "hdmi_controller_write_bytes_i2c"
        ],
        "hdmi_controller_start_video": [
            "hdmi_controller_start_video",
            "debug",
            "bcopy",
            "sizeof",
            "get_edid_timings",
            "configure_video"
        ],
        "hdmi_controller_stop_video": [
            "hdmi_controller_stop_video",
            "stop_video_link",
            "complete_video_link",
            "or_reg",
            "write_reg"
        ],
        "hdmi_controller_video_configured": [
            "hdmi_controller_video_configured"
        ],
        "hdmi_read_reg": [
            "hdmi_read_reg",
            "read_reg"
        ],
        "hdmi_write_reg": [
            "hdmi_write_reg",
            "write_reg"
        ],
        "get_is_PHY_ready": [
            "get_is_PHY_ready",
            "read_reg"
        ],
        "set_horizontal_blanking": [
            "set_horizontal_blanking",
            "write_regs"
        ],
        "set_vertical_blanking": [
            "set_vertical_blanking",
            "write_regs",
            "write_regs"
        ],
        "set_line_lengths": [
            "set_line_lengths",
            "debug",
            "write_regs",
            "write_regs"
        ],
        "set_bottom_field_extents": [
            "set_bottom_field_extents",
            "write_regs",
            "write_regs"
        ],
        "set_horizontal_sync_shape": [
            "set_horizontal_sync_shape",
            "write_reg",
            "write_regs",
            "write_regs"
        ],
        "set_vertical_sync_shape": [
            "set_vertical_sync_shape",
            "write_reg",
            "write_regs",
            "write_regs",
            "write_regs",
            "write_regs"
        ],
        "stop_info_frame": [
            "stop_info_frame",
            "set_bits_in_reg"
        ],
        "stop_general_control_packet": [
            "stop_general_control_packet",
            "set_bits_in_reg",
            "write_regs"
        ],
        "set_av_mute_enabled": [
            "set_av_mute_enabled",
            "set_bits_in_reg",
            "task_sleep",
            "debug"
        ],
        "get_is_PHY_write_in_progress": [
            "get_is_PHY_write_in_progress",
            "task_sleep",
            "read_reg",
            "debug"
        ],
        "write_phy_reg": [
            "write_phy_reg",
            "require_action",
            "require_action",
            "get_is_PHY_write_in_progress",
            "wait_for_PHY_write_completion",
            "debug",
            "debug"
        ],
        "write_regs_with_data": [
            "write_regs_with_data",
            "write_reg"
        ],
        "write_regs": [
            "write_regs",
            "write_reg"
        ]
    },
    "drivers/samsung/mipi": {
        "mipi_dsim_init": [
            "mipi_dsim_init",
            "dprintf",
            "mipi_dsim_init",
            "memcpy",
            "sizeof",
            "DISPLAY_CONFIG_LANES",
            "rDSIM_PLLCTRL_P",
            "DISPLAY_CONFIG_PLL_P",
            "rDSIM_PLLCTRL_M",
            "DISPLAY_CONFIG_PLL_M",
            "rDSIM_PLLCTRL_S",
            "DISPLAY_CONFIG_PLL_S",
            "DISPLAY_CONFIG_ESC_DIV",
            "clock_gate",
            "rDSIM_CLKCTRL_ByteClkSrc",
            "rDSIM_CLKCTRL_EscPrescalar",
            "DISPLAY_CONFIG_ESC_DIV",
            "rDSIM_PLLCTRL_FreqBand",
            "DISPLAY_CONFIG_PLL_B",
            "rDSIM_PLLCTRL_PreprCtl",
            "clock_get_frequency",
            "DISPLAY_CONFIG_PLL_P",
            "PHY",
            "rDSIM_PHYACCHR_AFC",
            "rDSIM_PHYACCHR_AFC",
            "rDSIM_PHYACCHR_DPHYCTL",
            "rDSIM_PHYACCHR_DOWN_CODE",
            "rDSIM_PHYACCHR2_DOWN_CODE",
            "rDSIM_PHYACCHR_UP_CODE",
            "rDSIM_PHYACCHR2_UP_CODE",
            "rDSIM_MDRESOL_MainVResol",
            "rDSIM_MDRESOL_MainHResol",
            "rDSIM_MVPORCH_CmdAllow",
            "rDSIM_MVPORCH_StableVfp",
            "rDSIM_MVPORCH_MainVbp",
            "rDSIM_CONFIG_MainPixFormat",
            "rDSIM_CONFIG_NumOfDatLane",
            "rDSIM_CONFIG_LaneEn",
            "rDSIM_CLKCTRL_LaneEscClkEn",
            "spin",
            "rDSIM_STATUS_StopstateDat",
            "rDSIM_STATUS_UlpsDat",
            "rDSIM_CONFIG_NumOfDatLane",
            "rDSIM_CONFIG_LaneEn",
            "rDSIM_CLKCTRL_LaneEscClkEn",
            "rDSIM_STATUS_UlpsDat",
            "spin",
            "rDSIM_STATUS_StopstateDat",
            "panic"
        ],
        "mipi_dsim_quiesce": [
            "mipi_dsim_quiesce",
            "dprintf",
            "mipi_dsim_quiesce",
            "rDSIM_CONFIG_NumOfDatLane",
            "rDSIM_CONFIG_LaneEn",
            "rDSIM_CLKCTRL_LaneEscClkEn",
            "spin",
            "rDSIM_STATUS_StopstateDat",
            "rDSIM_STATUS_UlpsDat",
            "clock_gate"
        ],
        "mipi_dsim_enable_high_speed": [
            "mipi_dsim_enable_high_speed"
        ],
        "mipi_dsim_enable_video": [
            "mipi_dsim_enable_video"
        ],
        "mipi_dsim_send_short_command": [
            "mipi_dsim_send_short_command",
            "clock_get_frequency",
            "spin",
            "spin"
        ],
        "mipi_dsim_send_long_command": [
            "mipi_dsim_send_long_command",
            "mipi_dsim_send_short_command"
        ],
        "mipi_dsim_read_short_command": [
            "mipi_dsim_read_short_command",
            "mipi_dsim_send_short_command",
            "now",
            "dprintf",
            "spin"
        ],
        "mipi_dsim_read_long_command": [
            "mipi_dsim_read_long_command",
            "mipi_dsim_send_short_command",
            "now",
            "dprintf",
            "spin",
            "dprintf"
        ]
    },
    "drivers/samsung/gpio": {
        "gpio_read": [
            "gpio_read",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_read",
            "rPDATn"
        ],
        "gpio_write": [
            "gpio_write",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_write"
        ],
        "gpio_configure": [
            "gpio_configure",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_configure",
            "rPPIEn",
            "rPPIEn",
            "panic",
            "rPPURn",
            "rPPDRn",
            "rPPURn",
            "rPPDRn",
            "rPPURn",
            "rPPDRn"
        ],
        "gpio_configure_pupdn": [
            "gpio_configure_pupdn",
            "GPIO2PAD",
            "GPIO2PIN",
            "rPPURn",
            "rPPDRn",
            "rPPURn",
            "rPPDRn",
            "rPPURn",
            "rPPDRn"
        ],
        "gpio_init_pinconfig": [
            "gpio_init_pinconfig",
            "dprintf",
            "gpio_init_pinconfig",
            "panic",
            "rPPURn",
            "rPPDRn",
            "rPCONn",
            "rPPIEn",
            "defined"
        ],
        "gpio_diag_pinconfig": [
            "gpio_diag_pinconfig"
        ]
    },
    "drivers/samsung/drex": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "spin",
            "spin",
            "drex_mrw",
            "spin",
            "drex_mrw",
            "drex_mrw"
        ],
        "mcu_adjust_performance": [
            "mcu_adjust_performance"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "chipid_get_memory_density",
            "chipid_get_memory_ranks",
            "chipid_get_memory_width"
        ]
    },
    "drivers/samsung/sha1": {
        "sha1_hw_calculate": [
            "sha1_hw_calculate",
            "Sha1NewInit",
            "sha1Run",
            "task_yield",
            "sha1Run",
            "sha1Run",
            "sha1Run",
            "clock_gate"
        ]
    },
    "drivers/samsung/usbphy": {
        "usbphy_power_up": [
            "usbphy_power_up",
            "platform_power_set_gate",
            "spin",
            "gate_clocks",
            "spin",
            "clock_get_frequency",
            "SET_REG",
            "block",
            "block",
            "clock",
            "SET_REG",
            "block",
            "block",
            "block",
            "PLL",
            "SET_REG",
            "SET_REG",
            "spin",
            "SET_REG_BITS",
            "SET_REG_BITS",
            "spin",
            "SET_REG_BITS",
            "spin"
        ],
        "usbphy_enable_pullup": [
            "usbphy_enable_pullup",
            "SET_REG_BITS"
        ],
        "usbphy_power_down": [
            "usbphy_power_down",
            "platform_power_set_gate",
            "gate_clocks",
            "SET_REG",
            "SET_REG_BITS",
            "SET_REG_BITS",
            "spin",
            "SET_REG_BITS",
            "gate_clocks",
            "platform_power_set_gate"
        ],
        "usbphy_is_cable_connected": [
            "usbphy_is_cable_connected",
            "clock_gate",
            "clock_gate",
            "GET_REG",
            "clock_gate",
            "clock_gate"
        ],
        "usbphy_set_dpdm_monitor": [
            "usbphy_set_dpdm_monitor",
            "clock_gate",
            "clock_gate",
            "SET_REG_BITS",
            "clock_gate",
            "clock_gate"
        ],
        "usbphy_update_device_tree": [
            "usbphy_update_device_tree",
            "FindProperty",
            "sizeof"
        ]
    },
    "drivers/samsung/uart": {
        "uart_init": [
            "uart_init",
            "uregs",
            "cb_create",
            "event_init",
            "clock_gate",
            "defined",
            "uart_set_clk",
            "uart_set_sample_rate",
            "uart_set_flow_control",
            "uart_set_fifo_enable",
            "uart_set_mode",
            "install_int_handler",
            "unmask_int",
            "defined",
            "uart_set_flow_control",
            "uart_set_fifo_enable",
            "uart_set_mode",
            "task_start",
            "task_create",
            "defined",
            "uart_set_flow_control",
            "uart_set_fifo_enable",
            "uart_set_mode",
            "task_start",
            "task_create"
        ],
        "uart_hw_init_extended": [
            "uart_hw_init_extended",
            "uregs",
            "uart_set_fifo_enable",
            "uart_set_baud_rate",
            "uart_set_fifo_enable"
        ],
        "uart_hw_set_rx_buf": [
            "uart_hw_set_rx_buf",
            "uregs",
            "cb_initialized",
            "cb_free",
            "cb_create",
            "uart_set_mode"
        ],
        "uart_putc": [
            "uart_putc",
            "uart_write"
        ],
        "uart_puts": [
            "uart_puts",
            "strlen",
            "uart_write"
        ],
        "uart_send_break": [
            "uart_send_break",
            "uregs"
        ]
    },
    "drivers/samsung/rgbout": {
        "rgbout_enable_clocks": [
            "rgbout_enable_clocks",
            "panic",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate"
        ],
        "rgbout_init": [
            "rgbout_init"
        ],
        "rgbout_get_enable_timing_generator": [
            "rgbout_get_enable_timing_generator"
        ],
        "rgbout_enable_timing_generator": [
            "rgbout_enable_timing_generator"
        ],
        "rgbout_install_gamma_table": [
            "rgbout_install_gamma_table"
        ]
    },
    "drivers/samsung/rgbout/include/drivers/rgbout": {},
    "drivers/samsung/pke": {
        "pke_do_exp": [
            "pke_do_exp",
            "sizeof",
            "clock_gate",
            "platform_power_set_gate",
            "system_time",
            "rsa_cal_exp",
            "system_time",
            "debug",
            "debug",
            "debug_data",
            "clock_gate"
        ],
        "PkeSetMode": [
            "PkeSetMode",
            "debug"
        ],
        "PkeGetSegmentCount": [
            "PkeGetSegmentCount"
        ],
        "rsa_cal_R0": [
            "rsa_cal_R0",
            "debug",
            "get_precision",
            "get_chunkSize",
            "highestSetBit",
            "bzero",
            "Calculate",
            "shift_left",
            "is_greater",
            "sub"
        ],
        "rsa_cal_exp": [
            "rsa_cal_exp",
            "debug",
            "PkeGetSegmentCount",
            "rsa_cal_R0",
            "rsa_cal_R2modM",
            "config_pke_key_len",
            "PkeSetMode",
            "copy_into_segment",
            "memcpy",
            "Compute",
            "copy_into_segment",
            "RSAPkeSetInOut",
            "RSAPkeRun",
            "compute",
            "RSAPkeSetInOut",
            "RSAPkeRun",
            "highestSetBit",
            "RSAPkeSetInOut",
            "RSAPkeRun",
            "debug",
            "RSAPkeSetInOut",
            "RSAPkeRun",
            "memcpy",
            "RSAPkeSetInOut",
            "RSAPkeRun",
            "add",
            "memcpy"
        ],
        "internalTest": [
            "internalTest",
            "config_pke_key_len",
            "PkeSetMode",
            "debug",
            "config_pke_key_len",
            "memset",
            "copy_into_segment",
            "memset",
            "copy_into_segment",
            "memset",
            "copy_into_segment",
            "RSAPkeSetInOut",
            "mach_absolute_time",
            "mach_absolute_time",
            "RSAPkeRun",
            "mach_absolute_time",
            "absolutetime_to_nanoseconds",
            "debug",
            "bzero",
            "bzero",
            "bzero"
        ]
    },
    "drivers/samsung/arm7m": {
        "arm7m_init": [
            "arm7m_init"
        ],
        "arm7m_halt": [
            "arm7m_halt"
        ],
        "arm7m_cache_operation": [
            "arm7m_cache_operation",
            "enter_critical_section",
            "exit_critical_section",
            "enter_critical_section",
            "exit_critical_section"
        ],
        "platform_sleep": [
            "platform_sleep",
            "enter_critical_section",
            "task_get_current_task",
            "arch_task_context_switch"
        ],
        "platform_wakeup": [
            "platform_wakeup",
            "ready",
            "platform_sleep",
            "interrupt_init",
            "callout_reset_deadline",
            "arch_task_context_restore",
            "panic"
        ]
    },
    "drivers/samsung/arm7m/include/drivers/arm7m": {},
    "drivers/samsung/rosc": {},
    "drivers/samsung/clcd_v2": {
        "clcd_enable_clocks": [
            "clcd_enable_clocks",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate"
        ],
        "clcd_init": [
            "clcd_init",
            "spin",
            "dither_init",
            "dither_set_enable",
            "CLCD_OTF_TCON1_VBPD",
            "CLCD_OTF_TCON1_VFPD",
            "CLCD_OTF_TCON1_VSPW",
            "defined",
            "CLCD_OTF_TCON2_HBPD",
            "CLCD_OTF_TCON2_HFPD",
            "CLCD_OTF_TCON2_HSPW",
            "CLCD_OTF_TCON3_HOZVAL",
            "CLCD_OTF_TCON3_LINEVAL"
        ],
        "clcd_get_enable_timing_generator": [
            "clcd_get_enable_timing_generator"
        ],
        "clcd_enable_timing_generator": [
            "clcd_enable_timing_generator"
        ],
        "clcd_install_gamma_table": [
            "clcd_install_gamma_table",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "clcd_load_gamma_table",
            "clcd_load_gamma_table",
            "clcd_load_gamma_table",
            "clcd_load_gamma_table",
            "clcd_load_gamma_table",
            "clcd_load_gamma_table"
        ]
    },
    "drivers/samsung/clcd_v2/include/drivers/clcd_v2": {},
    "drivers/samsung/displayport": {
        "dp_controller_start": [
            "dp_controller_start",
            "clock_gate",
            "spin",
            "write_reg",
            "read_reg",
            "FindNode",
            "FindProperty",
            "sizeof",
            "debug",
            "sizeof",
            "malloc",
            "bcopy",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "install_int_handler",
            "event_init",
            "task_start",
            "task_create",
            "event_init",
            "init_hw",
            "write_reg",
            "unmask_int",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug",
            "debug"
        ],
        "dp_controller_stop": [
            "dp_controller_stop",
            "dp_controller_stop_video",
            "mask_int",
            "mcu_set_passthrough_mode",
            "abort_edid",
            "dp_device_stop",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "callout_dequeue",
            "write_reg",
            "write_reg",
            "read_reg",
            "debug",
            "and_reg",
            "debug",
            "read_reg",
            "debug",
            "write_reg",
            "and_reg",
            "write_reg",
            "clock_gate",
            "free"
        ],
        "dp_controller_wait_for_HPD_to_BL": [
            "dp_controller_wait_for_HPD_to_BL",
            "system_time",
            "debug",
            "spin",
            "debug"
        ],
        "dp_controller_wait_for_edp_hpd": [
            "dp_controller_wait_for_edp_hpd",
            "event_wait_timeout",
            "system_time"
        ],
        "dp_controller_validate_video": [
            "dp_controller_validate_video",
            "bzero",
            "sizeof",
            "bcopy",
            "sizeof",
            "validate_video"
        ],
        "dp_controller_get_max_lane_count": [
            "dp_controller_get_max_lane_count"
        ],
        "dp_controller_get_max_link_rate": [
            "dp_controller_get_max_link_rate"
        ],
        "dp_controller_get_min_lane_count": [
            "dp_controller_get_min_lane_count"
        ],
        "dp_controller_get_min_link_rate": [
            "dp_controller_get_min_link_rate"
        ],
        "dp_controller_set_link_rate": [
            "dp_controller_set_link_rate",
            "write_reg"
        ],
        "dp_controller_get_link_rate": [
            "dp_controller_get_link_rate",
            "read_reg"
        ],
        "dp_controller_set_lane_count": [
            "dp_controller_set_lane_count",
            "write_reg",
            "and_reg",
            "write_reg",
            "debug",
            "read_reg",
            "debug",
            "or_reg",
            "or_reg",
            "write_reg",
            "and_reg",
            "and_reg",
            "and_reg",
            "and_reg",
            "and_reg",
            "debug",
            "write_reg",
            "spin",
            "and_reg",
            "and_reg"
        ],
        "dp_controller_get_lane_count": [
            "dp_controller_get_lane_count",
            "read_reg"
        ],
        "dp_controller_get_supports_fast_link_training": [
            "dp_controller_get_supports_fast_link_training"
        ],
        "dp_controller_get_supports_downspread": [
            "dp_controller_get_supports_downspread"
        ],
        "dp_controller_set_downspread": [
            "dp_controller_set_downspread",
            "write_reg"
        ],
        "dp_controller_get_downspread": [
            "dp_controller_get_downspread",
            "read_reg"
        ],
        "dp_controller_set_enhanced_mode": [
            "dp_controller_set_enhanced_mode",
            "or_reg",
            "and_reg"
        ],
        "dp_controller_get_enhanced_mode": [
            "dp_controller_get_enhanced_mode",
            "read_reg"
        ],
        "dp_controller_set_ASSR": [
            "dp_controller_set_ASSR",
            "or_reg",
            "and_reg"
        ],
        "dp_controller_get_ASSR": [
            "dp_controller_get_ASSR",
            "read_reg"
        ],
        "dp_controller_get_adjustment_levels": [
            "dp_controller_get_adjustment_levels"
        ],
        "dp_controller_set_adjustment_levels": [
            "dp_controller_set_adjustment_levels",
            "debug",
            "debug",
            "or_reg",
            "and_reg",
            "set_voltage_base",
            "write_reg",
            "write_reg",
            "write_reg"
        ],
        "dp_controller_set_training_pattern": [
            "dp_controller_set_training_pattern",
            "debug",
            "write_reg"
        ],
        "dp_controller_get_training_pattern": [
            "dp_controller_get_training_pattern",
            "read_reg"
        ],
        "dp_controller_read_bytes_dpcd": [
            "dp_controller_read_bytes_dpcd",
            "debug",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "commit_aux_transaction",
            "read_reg",
            "debug_dpcd",
            "debug",
            "debug",
            "__min",
            "read_reg",
            "sizeof",
            "printf",
            "printf"
        ],
        "dp_controller_read_bytes_i2c": [
            "dp_controller_read_bytes_i2c",
            "read_bytes_i2c_internal",
            "debug",
            "read_bytes_i2c_internal",
            "debug"
        ],
        "dp_controller_write_bytes_dpcd": [
            "dp_controller_write_bytes_dpcd",
            "debug",
            "write_reg",
            "write_reg",
            "write_reg",
            "write_reg",
            "debug",
            "printf",
            "write_reg",
            "sizeof",
            "write_reg",
            "commit_aux_transaction",
            "printf"
        ],
        "dp_controller_write_bytes_i2c": [
            "dp_controller_write_bytes_i2c",
            "start_i2c_transaction",
            "debug",
            "printf",
            "write_reg",
            "sizeof",
            "write_reg",
            "commit_aux_transaction",
            "printf",
            "stop_i2c_transaction"
        ],
        "dp_controller_start_video": [
            "dp_controller_start_video",
            "bcopy",
            "sizeof",
            "get_edid_timings",
            "configure_video"
        ],
        "dp_controller_stop_video": [
            "dp_controller_stop_video",
            "and_reg"
        ],
        "dp_controller_video_configured": [
            "dp_controller_video_configured"
        ],
        "dp_controller_get_supports_alpm": [
            "dp_controller_get_supports_alpm"
        ],
        "dp_controller_enable_alpm": [
            "dp_controller_enable_alpm"
        ]
    },
    "drivers/samsung/displayport/include/drivers/displayport": {},
    "drivers/samsung/timer": {
        "timer_init": [
            "timer_init",
            "dprintf",
            "timers_init",
            "clock_gate",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "setup_timer_clk",
            "clock_get_frequency",
            "dprintf",
            "dprintf",
            "install_int_handler",
            "unmask_int",
            "install_int_handler",
            "unmask_int"
        ],
        "timer_gpio": [
            "timer_gpio",
            "setup_timer"
        ],
        "timer_get_ticks": [
            "timer_get_ticks",
            "read_timer64"
        ],
        "timer_get_tick_rate": [
            "timer_get_tick_rate"
        ],
        "timer_ticks_to_usecs": [
            "timer_ticks_to_usecs"
        ],
        "timer_usecs_to_ticks": [
            "timer_usecs_to_ticks"
        ],
        "timer_stop_all": [
            "timer_stop_all",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer",
            "start_stop_timer"
        ],
        "timer_get_entropy": [
            "timer_get_entropy",
            "arch_get_entropy"
        ],
        "wdt_enable": [
            "wdt_enable"
        ],
        "wdt_chip_reset": [
            "wdt_chip_reset"
        ]
    },
    "drivers/samsung/arm7iop": {
        "do_arm7_go": [
            "do_arm7_go",
            "env_get_uint",
            "dprintf",
            "dprintf",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_reset_device"
        ],
        "do_arm7_stop": [
            "do_arm7_stop",
            "clock_gate"
        ],
        "do_arm7_jtag_select": [
            "do_arm7_jtag_select",
            "gpio_configure_out",
            "gpio_configure_in"
        ],
        "do_cortex_jtag_select": [
            "do_cortex_jtag_select",
            "gpio_configure_out",
            "gpio_configure_in"
        ]
    },
    "drivers/samsung/spi": {
        "spi_set_interdatadelay": [
            "spi_set_interdatadelay",
            "spiregs",
            "clock_get_frequency",
            "dprintf"
        ],
        "spi_set_clk": [
            "spi_set_clk"
        ],
        "spi_setup": [
            "spi_setup",
            "spiregs",
            "spi_set_port_enable",
            "spi_set_baud",
            "clock",
            "first",
            "width",
            "spi_set_port_enable",
            "dprintf"
        ],
        "spi_tx_complete": [
            "spi_tx_complete"
        ],
        "spi_rx_complete": [
            "spi_rx_complete"
        ],
        "spi_write_etc": [
            "spi_write_etc",
            "spiregs",
            "dprintf",
            "spi_write",
            "d",
            "spi_flush_tx_fifo",
            "spi_flush_rx_fifo",
            "spi_set_port_enable",
            "platform_cache_operation",
            "queue_dma_transfer",
            "dprintf",
            "BITS_SHIFT",
            "task_yield",
            "dprintf",
            "__min",
            "event_unsignal",
            "spi_set_port_enable",
            "event_wait",
            "BITS_SHIFT"
        ],
        "spi_write": [
            "spi_write",
            "spi_write_etc"
        ],
        "spi_read_etc": [
            "spi_read_etc",
            "spiregs",
            "dprintf",
            "spi_read",
            "d",
            "spi_flush_tx_fifo",
            "spi_flush_rx_fifo",
            "spi_set_port_enable",
            "spi_set_port_enable",
            "platform_cache_operation",
            "queue_dma_transfer",
            "dprintf",
            "task_yield",
            "dprintf",
            "event_unsignal",
            "spi_set_port_enable",
            "event_wait"
        ],
        "spi_read": [
            "spi_read",
            "spi_read_etc"
        ],
        "spi_init": [
            "spi_init",
            "dprintf",
            "spi_init",
            "bzero",
            "sizeof",
            "spiregs",
            "event_init",
            "clock_gate",
            "spi_set_port_enable",
            "spi_set_port_dma",
            "install_int_handler",
            "unmask_int"
        ],
        "spi_gpio_read": [
            "spi_gpio_read",
            "spiregs"
        ],
        "spi_gpio_write": [
            "spi_gpio_write",
            "spiregs"
        ],
        "spi_gpio_configure": [
            "spi_gpio_configure",
            "spiregs"
        ]
    },
    "drivers/samsung/aes": {
        "aes_init": [
            "aes_init",
            "dprintf",
            "aes_init",
            "clock_gate",
            "AES_MODULE_POWER_ON",
            "AesInit"
        ],
        "AesInit": [
            "AesInit",
            "install_int_handler",
            "unmask_int"
        ],
        "AesUninit": [
            "AesUninit",
            "AES_MODULE_POWER_OFF",
            "mask_int",
            "SysResetInterrupt"
        ],
        "AesOff": [
            "AesOff",
            "AES_MODULE_POWER_OFF"
        ],
        "_AesSetKeyType": [
            "_AesSetKeyType"
        ],
        "_AesSetKey": [
            "_AesSetKey",
            "swap32"
        ],
        "_AesClearKey": [
            "_AesClearKey",
            "memset"
        ],
        "_AesClearIV": [
            "_AesClearIV",
            "memset"
        ],
        "AesSoftwareReset": [
            "AesSoftwareReset"
        ],
        "AesReadyToStart": [
            "AesReadyToStart"
        ],
        "AesSetVector": [
            "AesSetVector",
            "swap32"
        ],
        "AesStartEncryption": [
            "AesStartEncryption",
            "AesReadyToStart",
            "AesSoftwareReset",
            "AES_MODULE_POWER_ON",
            "_AesSetKeyType",
            "_AesSetKey",
            "AesSetVector",
            "AesSetCryption",
            "AesSetKeySize",
            "AesSetChainingMode",
            "AesSetVector",
            "Number",
            "Buffer",
            "Buffer",
            "Buffer",
            "Buffer",
            "Buffer",
            "Encryption",
            "_AesStart"
        ],
        "AesStartDecryption": [
            "AesStartDecryption",
            "AesReadyToStart",
            "AesSoftwareReset",
            "AES_MODULE_POWER_ON",
            "_AesSetKeyType",
            "_AesSetKey",
            "AesSetVector",
            "AesSetCryption",
            "AesSetKeySize",
            "AesSetChainingMode",
            "AesSetVector",
            "Buffer",
            "Buffer",
            "Buffer",
            "Buffer",
            "Decryotion",
            "_AesStart"
        ],
        "_AesStart": [
            "_AesStart"
        ],
        "AesGetIrqStatus": [
            "AesGetIrqStatus"
        ],
        "AesSetIrqStatus": [
            "AesSetIrqStatus"
        ],
        "AesNotifyComplete": [
            "AesNotifyComplete"
        ],
        "AesWaitForComplete": [
            "AesWaitForComplete",
            "_AesClearKey",
            "_AesClearIV"
        ],
        "Isr_AesHandler": [
            "Isr_AesHandler",
            "dprintf",
            "AesNotifyComplete",
            "panic",
            "AesNotifyComplete"
        ],
        "AesSetKeySize": [
            "AesSetKeySize"
        ],
        "AesSetChainingMode": [
            "AesSetChainingMode"
        ],
        "AesSetCryption": [
            "AesSetCryption"
        ],
        "AesGetCryption": [
            "AesGetCryption"
        ],
        "AesSetCommand": [
            "AesSetCommand"
        ],
        "AesSetSourceConfig": [
            "AesSetSourceConfig"
        ],
        "AesSetCryptConfig": [
            "AesSetCryptConfig"
        ],
        "AES_CBC_DecryptInPlace": [
            "AES_CBC_DecryptInPlace",
            "aes_init",
            "memcpy",
            "platform_cache_operation",
            "AesStartDecryption",
            "AesWaitForComplete",
            "memcpy"
        ],
        "AES_CBC_EncryptInPlace": [
            "AES_CBC_EncryptInPlace",
            "aes_init",
            "memcpy",
            "platform_cache_operation",
            "AesStartEncryption",
            "AesWaitForComplete",
            "memcpy"
        ]
    },
    "drivers/power/hdqgauge": {
        "gasgauge_init": [
            "gasgauge_init",
            "power_is_suspended",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "task_sleep",
            "controlRead16",
            "controlOp16",
            "gg_close"
        ],
        "gasgauge_reset_timer": [
            "gasgauge_reset_timer",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "controlRead16",
            "dprintf",
            "reset_timer",
            "task_sleep",
            "hdqRead8",
            "dprintf",
            "dprintf",
            "gg_close"
        ],
        "gasgauge_print_status": [
            "gasgauge_print_status",
            "gasgauge_needs_precharge"
        ],
        "gasgauge_needs_precharge": [
            "gasgauge_needs_precharge",
            "target_get_precharge_gg_flag_mask",
            "target_get_boot_battery_capacity",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "hdqRead16",
            "controlRead16",
            "hdqRead16",
            "hdqRead16",
            "hdqRead16",
            "hdqRead16",
            "hdqRead16",
            "hdqRead16",
            "hdqRead8",
            "hdqRead8",
            "hdqRead8",
            "hdqRead8",
            "hdqRead8",
            "defined",
            "gasgauge_log",
            "gg_close",
            "to",
            "numbers",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "set",
            "gg_close"
        ],
        "gasgauge_will_shutdown": [
            "gasgauge_will_shutdown",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "task_sleep",
            "controlRead16",
            "controlOp16",
            "gg_close"
        ],
        "gasgauge_full": [
            "gasgauge_full",
            "gasgauge_read_soc"
        ],
        "gasgauge_read_soc": [
            "gasgauge_read_soc",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "hdqRead16",
            "gg_close"
        ],
        "gasgauge_get_battery_id": [
            "gasgauge_get_battery_id",
            "power_has_batterypack",
            "dprintf",
            "dprintf",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "readBlock",
            "gg_close"
        ],
        "gasgauge_read_charge_table": [
            "gasgauge_read_charge_table",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "readBlock",
            "dprintf",
            "high_nibble",
            "high_nibble",
            "header",
            "entries",
            "offsetof",
            "sizeof",
            "dprintf",
            "dprintf",
            "entries",
            "dprintf",
            "gg_close",
            "low_nibble",
            "high_nibble",
            "dprintf"
        ],
        "gasgauge_read_temperature": [
            "gasgauge_read_temperature",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "hdqRead16",
            "gg_close",
            "printf"
        ],
        "gasgauge_read_voltage": [
            "gasgauge_read_voltage",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "hdqRead16",
            "gg_close",
            "printf"
        ],
        "gasgauge_read_design_capacity": [
            "gasgauge_read_design_capacity",
            "gg_open",
            "gasgauge_check_reset",
            "uart_break",
            "hdqRead16",
            "gg_close"
        ],
        "gasgauge_check_health": [
            "gasgauge_check_health",
            "values",
            "dprintf",
            "now",
            "dprintf",
            "hdqRead16",
            "dprintf",
            "hdqRead16",
            "hdqRead16",
            "dprintf",
            "battery",
            "controlRead16",
            "dprintf",
            "controlRead16",
            "dprintf",
            "C",
            "readBlock",
            "dprintf",
            "dprintf",
            "mAh",
            "malloc",
            "ra_log_val",
            "ra_log_val",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "ra_log_val",
            "ra_log_val",
            "controlRead16",
            "ra_log_val",
            "ra_log_val",
            "controlRead16",
            "ra_log_val",
            "ra_log_block",
            "controlWrite16",
            "readBlock",
            "readBlock",
            "readBlock",
            "ra_log_block",
            "ra_log_block",
            "ra_log_block",
            "writeBlock",
            "writeBlock",
            "writeBlock",
            "writeBlock",
            "ra_log_block",
            "ra_log_block",
            "ra_log_block",
            "power_enable_charging",
            "task_sleep",
            "ra_log_val",
            "hdqRead16",
            "controlRead16",
            "task_sleep",
            "power_enable_charging",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "hdqRead16",
            "ra_log_val",
            "controlRead16",
            "ra_log_val",
            "controlRead16",
            "ra_log_val",
            "controlRead16",
            "ra_log_val",
            "controlRead16",
            "readBlock",
            "ra_log_block"
        ],
        "gasgauge_late_init": [
            "gasgauge_late_init",
            "env_set",
            "nvram_save"
        ]
    },
    "drivers/nvme": {
        "nvme_blockdev_init_boot": [
            "nvme_blockdev_init_boot",
            "nvme_bdev_create",
            "nvme_bdev_identify_and_create",
            "nvme_bdev_identify_and_create",
            "nvme_bdev_identify_and_create",
            "nvme_bdev_identify_and_create",
            "nvme_bdev_identify_and_create"
        ],
        "nvme_blockdev_init_normal": [
            "nvme_blockdev_init_normal",
            "nvme_bdev_identify_and_create",
            "partition_scan_and_publish_subdevices"
        ],
        "nvme_push_io_cmd_write": [
            "nvme_push_io_cmd_write",
            "nvme_sq_init_cmd",
            "nvme_sq_add_cmd"
        ],
        "nvme_init": [
            "nvme_init",
            "dprintf",
            "get_nvme_controller",
            "nvme_init_pci",
            "nvme_init_resources",
            "nvme_init_controller",
            "nvme_blockdev_init_boot",
            "dprintf",
            "nvme_quiesce"
        ],
        "nvme_quiesce": [
            "nvme_quiesce",
            "get_nvme_controller",
            "nvme_quiesce_controller",
            "nvme_quiesce_pci",
            "dart_disable_translation",
            "dart_unmap_page_range",
            "free",
            "dart_unmap_page_range"
        ],
        "nvme_quiesce_all": [
            "nvme_quiesce_all",
            "sizeof",
            "sizeof",
            "nvme_quiesce"
        ],
        "nvme_flush_namespace": [
            "nvme_flush_namespace",
            "get_nvme_controller",
            "nvme_get_hard_error",
            "nvme_sq_init_cmd",
            "nvme_sq_add_cmd",
            "nvme_wait_for_cmd",
            "nvme_update_error"
        ],
        "nvme_read_blocks": [
            "nvme_read_blocks",
            "nvme_do_io"
        ],
        "nvme_write_blocks": [
            "nvme_write_blocks",
            "nvme_do_io"
        ],
        "nvme_update_devicetree": [
            "nvme_update_devicetree",
            "get_nvme_controller",
            "dprintf",
            "dprintf",
            "dt_set_prop",
            "dprintf",
            "dt_set_prop"
        ],
        "nvme_identify_namespace": [
            "nvme_identify_namespace",
            "get_nvme_controller",
            "nvme_get_hard_error",
            "dprintf",
            "nvme_translate_bookkeeping",
            "nvme_push_admin_cmd_identify_namespace",
            "nvme_wait_for_cmd",
            "dprintf",
            "malloc",
            "sizeof",
            "memcpy",
            "sizeof",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "free",
            "nvme_get_hard_error"
        ],
        "nvme_get_max_transfer_blocks": [
            "nvme_get_max_transfer_blocks",
            "get_nvme_controller"
        ],
        "nvme_init_mass_storage": [
            "nvme_init_mass_storage",
            "get_nvme_controller",
            "nvme_switch_to_mode"
        ],
        "nvme_init_mass_storage_panic": [
            "nvme_init_mass_storage_panic",
            "get_nvme_controller",
            "nvme_switch_to_mode"
        ],
        "nvme_update_firmware": [
            "nvme_update_firmware",
            "dprintf",
            "get_nvme_controller",
            "dprintf",
            "nvme_get_hard_error",
            "dprintf",
            "dprintf",
            "dprintf",
            "memalign",
            "bzero",
            "memcpy",
            "dart_map_page_range",
            "nvme_push_admin_cmd_firmware_download",
            "nvme_wait_for_cmd",
            "dart_unmap_page_range",
            "nvme_update_error",
            "dprintf",
            "nvme_push_admin_cmd_firmware_activate",
            "nvme_wait_for_cmd",
            "printf",
            "dprintf",
            "free"
        ]
    },
    "drivers/displayport": {
        "displayport_init": [
            "displayport_init",
            "dp_controller_start"
        ],
        "displayport_init_with_timing_info": [
            "displayport_init_with_timing_info",
            "memcpy",
            "sizeof",
            "displayport_set_timings",
            "dp_controller_start"
        ],
        "displayport_set_timings": [
            "displayport_set_timings",
            "memcpy",
            "sizeof",
            "bzero",
            "sizeof",
            "debug",
            "restrict_edid"
        ],
        "displayport_quiesce": [
            "displayport_quiesce",
            "dp_controller_stop"
        ],
        "displayport_start_video": [
            "displayport_start_video",
            "get_edid_downstream_type",
            "dp_controller_read_bytes_dpcd",
            "sizeof",
            "debug",
            "dp_controller_write_bytes_dpcd",
            "sizeof",
            "dp_controller_start_video"
        ],
        "displayport_enable_alpm": [
            "displayport_enable_alpm",
            "dp_controller_enable_alpm"
        ],
        "displayport_get_raw_panel_id": [
            "displayport_get_raw_panel_id",
            "dp_device_get_raw_panel_id"
        ],
        "displayport_video_configured": [
            "displayport_video_configured",
            "dp_controller_video_configured"
        ],
        "dp_controller_train_link": [
            "dp_controller_train_link",
            "__min",
            "dp_controller_get_max_lane_count",
            "__min",
            "dp_controller_get_max_link_rate",
            "dp_controller_get_min_lane_count",
            "run_link_training_state_machine",
            "__min",
            "dp_controller_get_max_link_rate"
        ],
        "dp_device_start": [
            "dp_device_start",
            "debug",
            "event_init",
            "set_power",
            "debug",
            "cache_capabilities",
            "debug",
            "read_raw_panel_id",
            "debug",
            "debug",
            "sizeof",
            "debug",
            "debug",
            "event_signal",
            "train_link",
            "debug",
            "dp_device_get_sink_count",
            "debug",
            "obtain_edid",
            "get_edid_downstream_type",
            "debug",
            "WITH_HW_BS",
            "mcu_send_info_frames",
            "debug",
            "displayport_start_video",
            "debug",
            "enable_alpm",
            "debug",
            "dp_device_hdcp_enable",
            "debug",
            "debug",
            "debug",
            "system_time",
            "event_signal"
        ],
        "dp_device_wait_started": [
            "dp_device_wait_started",
            "system_time",
            "debug",
            "system_time",
            "debug",
            "event_wait_timeout",
            "debug",
            "system_time",
            "debug"
        ],
        "dp_device_stop": [
            "dp_device_stop",
            "set_power"
        ],
        "dp_device_is_alpm_enabled": [
            "dp_device_is_alpm_enabled"
        ],
        "dp_device_get_raw_panel_id": [
            "dp_device_get_raw_panel_id",
            "event_wait_timeout",
            "memset",
            "memcpy"
        ],
        "dp_device_get_alignment_status_mask": [
            "dp_device_get_alignment_status_mask",
            "dp_controller_read_bytes_dpcd",
            "update_lane_status_mask",
            "update_requested_adjustment_levels"
        ],
        "dp_device_get_lane_status_mask": [
            "dp_device_get_lane_status_mask",
            "dp_device_get_max_lane_count"
        ],
        "dp_device_get_training_pattern": [
            "dp_device_get_training_pattern",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_training_pattern": [
            "dp_device_set_training_pattern",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_requested_adjustment_levels": [
            "dp_device_get_requested_adjustment_levels",
            "dp_device_get_max_lane_count"
        ],
        "dp_device_set_adjustment_levels": [
            "dp_device_set_adjustment_levels",
            "dp_device_get_max_lane_count"
        ],
        "dp_device_get_enhanced_mode": [
            "dp_device_get_enhanced_mode",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_get_sink_count": [
            "dp_device_get_sink_count",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_enhanced_mode": [
            "dp_device_set_enhanced_mode",
            "dp_device_get_lane_count",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_ASSR": [
            "dp_device_get_ASSR",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_ASSR": [
            "dp_device_set_ASSR",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_downspread": [
            "dp_device_get_downspread",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_downspread": [
            "dp_device_set_downspread",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_lane_count": [
            "dp_device_get_lane_count",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_lane_count": [
            "dp_device_set_lane_count",
            "dp_device_get_enhanced_mode",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_link_rate": [
            "dp_device_get_link_rate",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_set_link_rate": [
            "dp_device_set_link_rate",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_hdcp_enable": [
            "dp_device_hdcp_enable",
            "dp_controller_read_bytes_dpcd",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_downstream_port_type": [
            "dp_device_get_downstream_port_type",
            "dp_device_get_revision",
            "dp_controller_read_bytes_dpcd"
        ],
        "dp_device_enable_alpm": [
            "dp_device_enable_alpm",
            "dp_controller_write_bytes_dpcd"
        ],
        "dp_device_get_revision": [
            "dp_device_get_revision"
        ],
        "dp_device_get_max_lane_count": [
            "dp_device_get_max_lane_count"
        ],
        "dp_device_get_max_link_rate": [
            "dp_device_get_max_link_rate"
        ],
        "dp_device_get_supports_enhanced_mode": [
            "dp_device_get_supports_enhanced_mode",
            "dp_device_get_revision"
        ],
        "dp_device_get_supports_training_pattern3": [
            "dp_device_get_supports_training_pattern3",
            "dp_device_get_revision"
        ],
        "dp_device_get_supports_fast_link_training": [
            "dp_device_get_supports_fast_link_training",
            "dp_controller_read_bytes_dpcd",
            "require_noerr"
        ],
        "dp_device_get_supports_alpm": [
            "dp_device_get_supports_alpm",
            "dp_controller_read_bytes_dpcd",
            "require_noerr"
        ],
        "dp_device_get_supports_assr": [
            "dp_device_get_supports_assr",
            "dp_controller_read_bytes_dpcd",
            "require_noerr"
        ],
        "dp_device_get_supports_downspread": [
            "dp_device_get_supports_downspread",
            "dp_device_get_revision",
            "dp_controller_read_bytes_dpcd",
            "require_noerr"
        ],
        "do_dp": [
            "do_dp",
            "puts",
            "strcmp",
            "displayport_init",
            "bzero",
            "sizeof",
            "strcmp",
            "displayport_quiesce",
            "strcmp",
            "strcmp",
            "dp_controller_start_video",
            "strcmp",
            "dp_controller_start_video",
            "strcmp",
            "dp_controller_start_video",
            "strcmp",
            "printf",
            "mask_int",
            "dp_controller_read_bytes_dpcd",
            "unmask_int",
            "printf",
            "printf",
            "puts",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "obtain_edid": [
            "obtain_edid",
            "bzero",
            "sizeof",
            "dp_device_get_downstream_port_type",
            "debug",
            "get_edid",
            "debug",
            "ports",
            "debug",
            "process_edid",
            "debug",
            "debug",
            "get_edid",
            "sizeof",
            "debug",
            "process_edid",
            "debug",
            "debug"
        ],
        "abort_edid": [
            "abort_edid"
        ],
        "restrict_edid": [
            "restrict_edid"
        ],
        "get_edid_timings": [
            "get_edid_timings",
            "bcopy",
            "sizeof",
            "debug"
        ],
        "get_edid_downstream_type": [
            "get_edid_downstream_type"
        ]
    },
    "drivers/apple/dart_lpae": {
        "dart_init": [
            "dart_init",
            "panic",
            "clear_mappings",
            "rDART_BYPASS_ADDR",
            "rDART_DIAG_BOGUS_ACCESS",
            "rDART_DIAG_CONFIG",
            "rDART_FETCH_REQ_CONFIG",
            "DART_FETCH_REQ_CONFIG_STE",
            "DART_FETCH_REQ_CONFIG_STE",
            "DART_FETCH_REQ_CONFIG_PTE",
            "DART_FETCH_REQ_CONFIG_PTE",
            "DART_FETCH_REQ_CONFIG_PTE_PREFETCH",
            "DART_FETCH_REQ_CONFIG_PTE_PREFETCH",
            "rDART_FETCH_REQ_CONFIG",
            "dart_enable_translation",
            "rDART_CONFIG"
        ],
        "dart_disable_translation": [
            "dart_disable_translation",
            "rDART_TTBR",
            "flush_tlb"
        ],
        "dart_enable_translation": [
            "dart_enable_translation",
            "rDART_TTBR",
            "flush_tlb"
        ],
        "dart_map_page_range": [
            "dart_map_page_range",
            "dprintf",
            "alloc_tt_page",
            "mem_static_map_physical",
            "calloc",
            "sizeof",
            "rDART_TTBR",
            "alloc_tt_page",
            "mem_static_map_physical",
            "RELEASE_ASSERT",
            "DART_PTE_WRPROT",
            "flush_tlb"
        ],
        "dart_unmap_page_range": [
            "dart_unmap_page_range",
            "dprintf",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "flush_tlb"
        ],
        "dart_write_protect_page_range": [
            "dart_write_protect_page_range",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "DART_PTE_WRPROT",
            "flush_tlb"
        ],
        "dart_assert_unmapped": [
            "dart_assert_unmapped",
            "RELEASE_ASSERT",
            "rDART_TTBR",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT"
        ]
    },
    "drivers/apple/dwi": {
        "dwi_init": [
            "dwi_init",
            "clock_gate",
            "clock_get_frequency",
            "clock_get_frequency",
            "DWI_CLOCK_CONFIG_CLOCK_SCALER"
        ],
        "dwi_send_backlight_command": [
            "dwi_send_backlight_command",
            "DWI_TR_CTRL_BYTE_CNT"
        ]
    },
    "drivers/apple/reconfig": {
        "reconfig_command_write": [
            "reconfig_command_write",
            "validate_stage",
            "dprintf",
            "commit_write_command",
            "commit_write_command",
            "WRITE_OFFSETS",
            "WRITE_OFFSETS",
            "commit_write_command"
        ],
        "reconfig_command_read": [
            "reconfig_command_read",
            "validate_stage",
            "reconfig_write_pending",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "ALIGNED_64",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "bounds_check_stage"
        ],
        "reconfig_command_delay": [
            "reconfig_command_delay",
            "validate_stage",
            "reconfig_write_pending",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "bounds_check_stage"
        ],
        "reconfig_command_nop": [
            "reconfig_command_nop",
            "validate_stage",
            "reconfig_write_pending",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "bounds_check_stage"
        ],
        "reconfig_command_raw": [
            "reconfig_command_raw",
            "validate_stage",
            "reconfig_write_pending",
            "reconfig_command_nop",
            "rRECONFIG_RAM_BASE",
            "bounds_check_stage",
            "dprintf"
        ],
        "reconfig_init": [
            "reconfig_init",
            "panic",
            "rAOP_GLOBAL",
            "dprintf"
        ],
        "reconfig_commit": [
            "reconfig_commit",
            "validate_stage",
            "reconfig_write_pending",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AWAKE_TO_AOP_DDR_PREAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AWAKE_TO_AOP_DDR_PREAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AWAKE_TO_AOP_DDR_POSTAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AWAKE_TO_AOP_DDR_POSTAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_S2R_AOP_PREAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_S2R_AOP_PREAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_S2R_AOP_POSTAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_S2R_AOP_POSTAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_S2R_AOP_TO_AOP_DDR_PREAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_S2R_AOP_TO_AOP_DDR_PREAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_S2R_AOP_TO_AOP_DDR_POSTAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_S2R_AOP_TO_AOP_DDR_POSTAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_AWAKE_PREAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_AWAKE_PREAMBLE_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_AWAKE_POSTAMBLE_ENABLE_INSRT",
            "AOP_GLOBAL_SOC_CFG_AOP_DDR_TO_AWAKE_POSTAMBLE_INSRT",
            "rAOP_GLOBAL",
            "panic",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "rRECONFIG_RAM_BASE",
            "dprintf"
        ],
        "reconfig_lock": [
            "reconfig_lock",
            "rAOP_GLOBAL",
            "panic",
            "AOP_GLOBAL_SOC_CFG_LOCKABLE_SRAM_BASE_INSRT",
            "AOP_GLOBAL_SOC_CFG_LOCKABLE_SRAM_LIMIT_INSRT",
            "rAOP_GLOBAL",
            "rAOP_GLOBAL",
            "RELEASE_ASSERT",
            "rAOP_GLOBAL"
        ],
        "dump_reconfig": [
            "dump_reconfig",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "dprintf",
            "rRECONFIG_RAM_BASE",
            "dprintf"
        ]
    },
    "drivers/apple/ausb": {
        "usbphy_power_up": [
            "usbphy_power_up",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "defined",
            "defined",
            "defined",
            "defined",
            "platform_get_chip_revision",
            "defined",
            "platform_get_chip_revision",
            "defined",
            "platform_get_chip_revision",
            "down",
            "spin",
            "spin"
        ],
        "usbphy_enable_pullup": [
            "usbphy_enable_pullup"
        ],
        "usbphy_power_down": [
            "usbphy_power_down",
            "spin",
            "spin",
            "clock_gate",
            "clock_gate",
            "clock_gate"
        ],
        "usbphy_is_cable_connected": [
            "usbphy_is_cable_connected",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate"
        ],
        "usbphy_set_dpdm_monitor": [
            "usbphy_set_dpdm_monitor"
        ],
        "update_devicetree_property": [
            "update_devicetree_property",
            "FindProperty",
            "sizeof"
        ],
        "usbphy_update_device_tree": [
            "usbphy_update_device_tree",
            "update_devicetree_property",
            "defined",
            "defined",
            "update_devicetree_property",
            "update_devicetree_property",
            "defined",
            "platform_get_chip_revision",
            "update_devicetree_property",
            "update_devicetree_property",
            "defined",
            "platform_get_chip_revision",
            "update_devicetree_property",
            "update_devicetree_property",
            "defined",
            "platform_get_chip_revision",
            "update_devicetree_property"
        ],
        "ausb_setup_widgets": [
            "ausb_setup_widgets",
            "clock_gate",
            "clock_gate"
        ]
    },
    "drivers/apple/ccc": {
        "ccc_override_and_lock_iorvbar": [
            "ccc_override_and_lock_iorvbar",
            "dprintf",
            "dprintf"
        ],
        "ccc_handle_asynchronous_exception": [
            "ccc_handle_asynchronous_exception",
            "dprintf",
            "dprintf",
            "defined",
            "dprintf",
            "dprintf"
        ],
        "ccc_enable_custom_errors": [
            "ccc_enable_custom_errors"
        ],
        "ccc_disable_custom_errors": [
            "ccc_disable_custom_errors"
        ],
        "ccc_dump_registers": [
            "ccc_dump_registers",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ]
    },
    "drivers/apple/ccc/include/drivers/ccc": {},
    "drivers/apple/asp": {
        "asp_send_command": [
            "asp_send_command",
            "platform_cache_operation",
            "csi_send_message",
            "ASPMBOX_MAKE_CMD_NEW1",
            "asp_wait_for_completion",
            "platform_cache_operation"
        ],
        "asp_wait_for_completion": [
            "asp_wait_for_completion",
            "event_wait_timeout",
            "dprintf",
            "event_wait",
            "csi_receive_message",
            "ASPMBOX_GET_TYPE",
            "ASPMBOX_FIN_GET_TAG",
            "ASPMBOX_FIN_GET_ERRCODE",
            "dprintf"
        ],
        "asp_set_writable": [
            "asp_set_writable",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf",
            "printf",
            "printf"
        ],
        "asp_get_geometry": [
            "asp_get_geometry",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf",
            "dprintf",
            "task_sleep",
            "memcpy",
            "memcpy",
            "dprintf"
        ],
        "asp_create_block_device": [
            "asp_create_block_device",
            "dprintf",
            "blockdevice",
            "calloc",
            "sizeof",
            "dprintf",
            "construct_blockdev",
            "construct_blockdev",
            "construct_blockdev",
            "construct_blockdev",
            "construct_blockdev",
            "construct_blockdev",
            "construct_blockdev",
            "dprintf",
            "free",
            "register_blockdev",
            "dprintf",
            "free",
            "asp_set_blkdev_for_type"
        ],
        "asp_set_photoflow_mode": [
            "asp_set_photoflow_mode",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf"
        ],
        "asp_enable_bg": [
            "asp_enable_bg",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf"
        ],
        "asp_disable_bg": [
            "asp_disable_bg",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf"
        ],
        "asp_set_dies_in_parallel": [
            "asp_set_dies_in_parallel",
            "asp_get_cmd_for_tag",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "asp_send_command",
            "dprintf"
        ],
        "asp_set_power_state": [
            "asp_set_power_state",
            "asp_get_cmd_for_tag",
            "dprintf",
            "asp_send_command",
            "dprintf"
        ],
        "asp_set_indirection_memory": [
            "asp_set_indirection_memory",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf"
        ],
        "asp_test_scratchpad": [
            "asp_test_scratchpad",
            "asp_get_cmd_for_tag",
            "dprintf",
            "asp_send_command",
            "dprintf"
        ],
        "asp_update_ppn_firmware": [
            "asp_update_ppn_firmware",
            "asp_disable_bg",
            "memalign",
            "dprintf",
            "memcpy",
            "asp_get_cmd_for_tag",
            "VADDR_TO_PADDR32",
            "dprintf",
            "asp_send_command",
            "dprintf",
            "dprintf",
            "dprintf",
            "asp_set_default_dies_in_parallel",
            "asp_enable_bg",
            "free"
        ],
        "asp_erase_block": [
            "asp_erase_block",
            "printf",
            "printf",
            "and",
            "asp_type_from_blkdev",
            "dprintf",
            "printf",
            "memalign",
            "printf",
            "memset",
            "asp_write_block",
            "printf",
            "free",
            "free"
        ],
        "asp_read_block": [
            "asp_read_block",
            "mem_static_map_physical",
            "asp_type_from_blkdev",
            "dprintf",
            "csi_is_panic_recovery",
            "asp_panic_recover",
            "dprintf",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "dprintf",
            "asp_get_cmd_for_tag",
            "dprintf",
            "memalign",
            "dprintf",
            "VADDR_TO_PADDR32",
            "dprintf",
            "platform_cache_operation",
            "MIN",
            "asp_send_command",
            "memset",
            "dprintf",
            "platform_cache_operation",
            "memset",
            "memcpy",
            "free"
        ],
        "asp_write_block": [
            "asp_write_block",
            "mem_static_map_physical",
            "asp_type_from_blkdev",
            "dprintf",
            "csi_is_panic_recovery",
            "asp_panic_recover",
            "dprintf",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "asp_get_cmd_for_tag",
            "dprintf",
            "printf",
            "memalign",
            "dprintf",
            "VADDR_TO_PADDR32",
            "memcpy",
            "platform_cache_operation",
            "dprintf",
            "MIN",
            "asp_send_command",
            "dprintf",
            "platform_cache_operation",
            "free"
        ],
        "asp_sync": [
            "asp_sync",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf",
            "dprintf"
        ],
        "asp_neuralize": [
            "asp_neuralize",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf",
            "dprintf"
        ],
        "asp_type_from_blkdev": [
            "asp_type_from_blkdev",
            "dprintf"
        ],
        "asp_set_blkdev_for_type": [
            "asp_set_blkdev_for_type",
            "dprintf"
        ],
        "asp_panic_recover": [
            "asp_panic_recover",
            "dprintf",
            "asp_init_tags",
            "dprintf",
            "asp_reinit",
            "dprintf",
            "asp_send_open",
            "dprintf"
        ],
        "asp_reinit": [
            "asp_reinit",
            "asp_set_indirection_memory",
            "asp_set_default_dies_in_parallel"
        ],
        "asp_test_write_bdev": [
            "asp_test_write_bdev",
            "panic",
            "printf",
            "malloc",
            "panic",
            "memset",
            "asp_write_block",
            "printf",
            "panic",
            "free"
        ],
        "asp_test_read_bdev": [
            "asp_test_read_bdev",
            "env_get_uint",
            "printf",
            "security_allow_memory",
            "panic",
            "memset",
            "asp_read_block",
            "panic",
            "panic",
            "printf"
        ],
        "asp_test_waterfall_start": [
            "asp_test_waterfall_start",
            "asp_get_cmd_for_tag",
            "printf",
            "asp_send_command",
            "panic"
        ],
        "asp_test_waterfall": [
            "asp_test_waterfall",
            "printf",
            "asp_send_open",
            "dprintf",
            "printf",
            "asp_set_writable",
            "printf",
            "printf",
            "asp_format",
            "printf",
            "asp_get_geometry",
            "asp_test_write_bdev",
            "asp_test_waterfall_start",
            "asp_test_read_bdev",
            "asp_test_write_bdev",
            "asp_test_waterfall_start",
            "asp_test_read_bdev",
            "asp_test_write_bdev",
            "asp_test_waterfall_start",
            "asp_test_read_bdev"
        ],
        "asp_init": [
            "asp_init",
            "event_init",
            "csi_register_endpoint",
            "dprintf",
            "dprintf",
            "asp_wait_for_ready",
            "asp_init_tags",
            "asp_get_geometry",
            "asp_create_block_device",
            "asp_get_nand_info",
            "dprintf",
            "asp_reinit",
            "asp_create_block_device",
            "asp_set_atv",
            "asp_create_block_device",
            "asp_create_block_device",
            "asp_create_block_device",
            "asp_create_block_device",
            "asp_create_block_device"
        ],
        "asp_wait_for_ready": [
            "asp_wait_for_ready",
            "event_wait_timeout",
            "dprintf",
            "event_wait",
            "csi_receive_message",
            "ASPMBOX_FIN_GET_TAG",
            "ASPMBOX_FIN_GET_ERRCODE",
            "dprintf",
            "ASPMBOX_FIN_GET_ERRCODE"
        ],
        "asp_init_tags": [
            "asp_init_tags",
            "csi_allocate_shared_memory",
            "dprintf",
            "mem_static_map_physical",
            "ASPMBOX_MAKE_CMD_SETBASE",
            "dprintf",
            "csi_send_message",
            "dprintf",
            "ASPMBOX_MAKE_CMD_SETADDR",
            "csi_send_message",
            "dprintf",
            "asp_get_cmd_for_tag"
        ],
        "asp_send_open": [
            "asp_send_open",
            "asp_get_cmd_for_tag",
            "asp_send_command",
            "dprintf"
        ],
        "asp_nand_open": [
            "asp_nand_open",
            "asp_send_open",
            "asp_get_geometry",
            "asp_create_block_device",
            "partition_scan_and_publish_subdevices"
        ],
        "asp_set_default_dies_in_parallel": [
            "asp_set_default_dies_in_parallel",
            "asp_set_dies_in_parallel",
            "asp_set_dies_in_parallel",
            "asp_set_power_state"
        ],
        "asp_disable_uid": [
            "asp_disable_uid",
            "asp_get_cmd_for_tag",
            "dprintf",
            "asp_send_command",
            "dprintf"
        ]
    },
    "drivers/apple/a7iop": {
        "akf_start": [
            "akf_start",
            "install_int_handler",
            "install_int_handler",
            "event_init",
            "event_init",
            "clock_gate",
            "rAKF_AP_MAILBOX_SET",
            "rAKF_AXI_START",
            "rAKF_AXI_START_EXT",
            "rAKF_AXI_END",
            "low_bits",
            "rAKF_AXI_END_EXT",
            "high_bits",
            "mem_static_map_physical",
            "rAKF_AXI_BASE",
            "low_bits",
            "rAKF_AXI_BASE_EXT",
            "high_bits",
            "rAKF_AP_INBOX_CTRL",
            "rAKF_AP_OUTBOX_CTRL",
            "rAKF_KIC_MAILBOX_EXT_CLR",
            "timebase",
            "_akf_set_timebase",
            "rAKF_CPU_CTRL",
            "unmask_int",
            "unmask_int"
        ],
        "akf_start_sep": [
            "akf_start_sep",
            "install_int_handler",
            "install_int_handler",
            "event_init",
            "event_init",
            "rAKF_AP_MAILBOX_SET",
            "rAKF_AP_INBOX_CTRL",
            "rAKF_AP_OUTBOX_CTRL",
            "unmask_int",
            "unmask_int"
        ],
        "akf_recv_mbox": [
            "akf_recv_mbox",
            "enter_critical_section",
            "rAKF_AP_OUTBOX_CTRL",
            "rAKF_AP_MAILBOX_CLR",
            "event_wait",
            "event_wait_timeout",
            "RELEASE_ASSERT",
            "rAKF_AP_OUTBOX_CTRL",
            "akf_read_ap_outbox",
            "exit_critical_section"
        ],
        "akf_send_mbox": [
            "akf_send_mbox",
            "enter_critical_section",
            "rAKF_AP_INBOX_CTRL",
            "rAKF_AP_MAILBOX_CLR",
            "event_wait",
            "event_wait_timeout",
            "RELEASE_ASSERT",
            "rAKF_AP_INBOX_CTRL",
            "akf_write_ap_inbox",
            "exit_critical_section"
        ],
        "akf_send_nmi": [
            "akf_send_nmi",
            "rAKF_KIC_TMR_CFG1",
            "dprintf",
            "rAKF_KIC_TMR_STATE_SET1"
        ],
        "akf_stop": [
            "akf_stop",
            "enter_critical_section",
            "mask_int",
            "mask_int",
            "rAKF_AP_INBOX_CTRL",
            "rAKF_AP_INBOX_CTRL",
            "rAKF_AP_OUTBOX_CTRL",
            "rAKF_AP_OUTBOX_CTRL",
            "idle",
            "rAKF_CPU_CTRL",
            "rAKF_CPU_CTRL",
            "rAKF_AXI_START",
            "rAKF_AXI_START_EXT",
            "rAKF_AXI_END",
            "rAKF_AXI_END_EXT",
            "rAKF_AXI_BASE",
            "rAKF_AXI_BASE_EXT",
            "clock_gate",
            "exit_critical_section"
        ]
    },
    "drivers/apple/a7iop/include/drivers/a7iop": {},
    "drivers/apple/anc": {
        "anc_bootrom_init": [
            "anc_bootrom_init",
            "anc_configure_pins",
            "anc_boot_init_minimal",
            "dprintf",
            "anc_boot_nand_reset",
            "dprintf"
        ],
        "anc_bootrom_read_phys_page": [
            "anc_bootrom_read_phys_page",
            "mem_static_map_physical",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "platform_cache_operation",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_CONFIG",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CE",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD1",
            "anc_boot_put_link_command",
            "LINK_COMMAND__OPCODE",
            "anc_boot_put_link_command",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD2",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_STATUS",
            "anc_boot_put_link_command",
            "LINK_COMMAND__OPCODE",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD1",
            "anc_boot_put_link_command",
            "LINK_COMMAND__OPCODE",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_PIO",
            "anc_boot_put_link_command",
            "LINK_COMMAND__SEND_INTERRUPT",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_DMA",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_BUFDESC",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_FLAG",
            "anc_boot_wait_interrupt",
            "dprintf",
            "dprintf",
            "anc_wr",
            "status",
            "dprintf",
            "anc_rd",
            "anc_wr",
            "sizeof",
            "anc_rd",
            "dprintf",
            "anc_boot_wait_reg",
            "dprintf",
            "anc_boot_wait_interrupt",
            "dprintf",
            "anc_wr",
            "platform_cache_operation"
        ],
        "anc_boot_put_link_command": [
            "anc_boot_put_link_command",
            "anc_boot_wait_reg",
            "anc_wr",
            "anc_boot_wait_reg_int_timeout",
            "anc_wr",
            "dprintf"
        ],
        "anc_boot_put_dma_command": [
            "anc_boot_put_dma_command",
            "anc_boot_wait_reg",
            "anc_wr",
            "anc_wr",
            "anc_boot_wait_reg_int_timeout",
            "anc_wr",
            "anc_wr",
            "dprintf"
        ],
        "anc_boot_wait_reg": [
            "anc_boot_wait_reg",
            "system_time",
            "anc_rd",
            "time_has_elapsed"
        ],
        "anc_boot_wait_reg_int_timeout": [
            "anc_boot_wait_reg_int_timeout",
            "anc_rd",
            "anc_rd",
            "anc_wr",
            "anc_rd"
        ],
        "anc_boot_wait_interrupt": [
            "anc_boot_wait_interrupt",
            "system_time",
            "anc_rd",
            "anc_wr",
            "time_has_elapsed"
        ],
        "anc_disable_uid_key": [
            "anc_disable_uid_key",
            "anc_bootrom_init",
            "anc_disable_uid"
        ],
        "anc_llb_init": [
            "anc_llb_init",
            "memalign",
            "sizeof",
            "panic",
            "anc_bootrom_init",
            "dprintf",
            "anc_llb_read_chip_ids",
            "dprintf",
            "anc_llb_set_normal_mode",
            "dprintf",
            "anc_llb_get_geometry",
            "dprintf",
            "dprintf"
        ],
        "anc_get_dip": [
            "anc_get_dip"
        ],
        "anc_get_dies_per_channel": [
            "anc_get_dies_per_channel"
        ],
        "anc_llb_read_phys_page": [
            "anc_llb_read_phys_page",
            "make_physical_page",
            "mem_static_map_physical",
            "dprintf",
            "dprintf",
            "dprintf",
            "platform_get_chip_id",
            "platform_get_chip_revision",
            "platform_cache_operation",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_CONFIG",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_AES_KEY_IV",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CE",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD1",
            "anc_boot_put_link_command",
            "LINK_COMMAND__OPCODE",
            "anc_boot_put_link_command",
            "LINK_COMMAND__OPCODE",
            "anc_boot_put_link_command",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD3",
            "anc_boot_put_link_command",
            "LINK_COMMAND__WAIT_TIME",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_STATUS",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_REGISTER",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD1",
            "anc_boot_put_link_command",
            "LINK_COMMAND__WAIT_TIME",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_PIO",
            "anc_boot_put_link_command",
            "LINK_COMMAND__SEND_INTERRUPT",
            "anc_boot_put_link_command",
            "LINK_COMMAND__READ_DMA",
            "anc_boot_put_dma_command",
            "DMA_COMMAND__OPCODE",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_BUFDESC",
            "anc_boot_put_link_command",
            "LINK_COMMAND__WAIT_TIME",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CMD1",
            "anc_boot_put_link_command",
            "LINK_COMMAND__CE",
            "anc_boot_put_dma_command",
            "DMA_COMMAND_FLAG",
            "anc_boot_wait_interrupt",
            "dprintf",
            "dprintf",
            "anc_wr",
            "anc_rd",
            "status",
            "dprintf",
            "anc_wr",
            "anc_rd",
            "dprintf",
            "sizeof",
            "anc_rd",
            "dprintf",
            "anc_boot_wait_interrupt",
            "dprintf",
            "anc_wr",
            "platform_cache_operation"
        ],
        "anc_reset": [
            "anc_reset",
            "anc_bootrom_init"
        ],
        "anc_firmware_init": [
            "anc_firmware_init",
            "memalign",
            "sizeof",
            "memalign",
            "sizeof",
            "dprintf",
            "dprintf",
            "bzero",
            "sizeof",
            "bzero",
            "sizeof",
            "anc_llb_init",
            "dprintf",
            "anc_llb_read_phys_page",
            "Boot_PostProcessDM",
            "dprintf",
            "dprintf",
            "malloc",
            "sizeof",
            "dprintf",
            "ROUNDUPTO",
            "construct_blockdev",
            "dprintf",
            "free",
            "register_blockdev",
            "dprintf",
            "free",
            "blockdev_set_buffer_alignment",
            "__max",
            "blockdev_set_buffer_alignment",
            "dprintf",
            "memset",
            "anc_read_fw_block",
            "panic",
            "dprintf",
            "anc_read_fw_block",
            "panic",
            "Boot_Find_UtilDM",
            "Boot_Find_Fast",
            "malloc",
            "sizeof",
            "dprintf",
            "construct_blockdev",
            "dprintf",
            "free",
            "register_blockdev",
            "dprintf",
            "free",
            "malloc",
            "sizeof",
            "dprintf",
            "ROUNDUPTO",
            "construct_blockdev",
            "dprintf",
            "free",
            "blockdev_set_buffer_alignment",
            "__max",
            "blockdev_set_buffer_alignment",
            "register_blockdev",
            "dprintf",
            "free"
        ],
        "anc_read_llb": [
            "anc_read_llb",
            "anc_bootrom_init",
            "anc_bootrom_read_phys_page",
            "dprintf",
            "dprintf",
            "dprintf",
            "anc_bootrom_read_phys_page"
        ],
        "Boot_Slip": [
            "Boot_Slip"
        ],
        "Boot_BandDip": [
            "Boot_BandDip",
            "anc_get_dies_per_channel",
            "anc_get_dies_per_channel",
            "anc_get_dip"
        ],
        "Boot_PostProcessDM": [
            "Boot_PostProcessDM",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "memcpy",
            "sizeof",
            "dprintf",
            "dprintf"
        ],
        "Boot_Find_Fast_Scan": [
            "Boot_Find_Fast_Scan",
            "Boot_Read",
            "dprintf",
            "dprintf",
            "Boot_PostProcessDM",
            "dprintf",
            "quantup",
            "quantup",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "Boot_Find_Fast": [
            "Boot_Find_Fast",
            "Boot_Find_Fast_Scan",
            "Boot_Read",
            "dprintf",
            "Boot_Read",
            "dprintf",
            "dprintf",
            "Boot_Find_Fast_Scan",
            "Boot_Find_Fast_Scan",
            "dprintf"
        ],
        "Boot_Read": [
            "Boot_Read",
            "Boot_Slip",
            "Boot_BandDip",
            "anc_llb_read_phys_page"
        ],
        "Boot_Find_UtilDM": [
            "Boot_Find_UtilDM",
            "Boot_Read",
            "Boot_PostProcessDM",
            "dprintf",
            "dprintf"
        ]
    },
    "drivers/apple/cdma": {
        "platform_disable_keys": [
            "platform_disable_keys",
            "cdma_clock_enable",
            "cdma_clock_enable"
        ],
        "aes_hw_crypto_cmd": [
            "aes_hw_crypto_cmd",
            "clock_gate",
            "cdma_clock_enable",
            "cdma_clock_enable",
            "rCDMA_FILTER_IVR0",
            "rCDMA_FILTER_IVR1",
            "rCDMA_FILTER_IVR2",
            "rCDMA_FILTER_IVR3",
            "rCDMA_FILTER_IVR0",
            "rCDMA_FILTER_IVR1",
            "rCDMA_FILTER_IVR2",
            "rCDMA_FILTER_IVR3",
            "rCDMA_FILTER_KBR7",
            "rCDMA_FILTER_KBR6",
            "rCDMA_FILTER_KBR5",
            "rCDMA_FILTER_KBR4",
            "rCDMA_FILTER_KBR3",
            "rCDMA_FILTER_KBR2",
            "rCDMA_FILTER_KBR1",
            "rCDMA_FILTER_KBR0",
            "dprintf",
            "rCDMA_FILTER_CSR",
            "Channel",
            "encode",
            "ecb",
            "length",
            "variable",
            "dma_setup_channel",
            "dma_setup_channel",
            "platform_cache_operation",
            "platform_cache_operation",
            "rCDMA_CHANNEL_CSR",
            "rCDMA_CHANNEL_CSR",
            "halt",
            "dma_wait_channel_halted",
            "dma_wait_channel_halted",
            "platform_cache_operation",
            "rCDMA_FILTER_KBR0",
            "rCDMA_FILTER_KBR1",
            "rCDMA_FILTER_KBR2",
            "rCDMA_FILTER_KBR3",
            "rCDMA_FILTER_KBR4",
            "rCDMA_FILTER_KBR5",
            "rCDMA_FILTER_KBR6",
            "rCDMA_FILTER_KBR7",
            "cdma_clock_enable",
            "cdma_clock_enable",
            "panic"
        ],
        "dma_init": [
            "dma_init",
            "dprintf",
            "cdma_init",
            "clock_gate",
            "rCDMA_CLOCK_ON"
        ],
        "dma_execute_cmd": [
            "dma_execute_cmd",
            "event_init",
            "dma_execute_async",
            "event_wait"
        ],
        "dma_execute_async": [
            "dma_execute_async",
            "dprintf",
            "CDMA_SOFTC",
            "enter_critical_section",
            "exit_critical_section",
            "dprintf",
            "exit_critical_section",
            "dma_init_channel",
            "cdma_clock_enable",
            "unlikely",
            "CDMA_DCR_REQ",
            "unlikely",
            "dprintf",
            "dprintf",
            "IDLE",
            "rCDMA_CHANNEL_CSR",
            "rCDMA_CHANNEL_DCR",
            "rCDMA_CHANNEL_DCR",
            "rCDMA_CHANNEL_DAR",
            "rCDMA_CHANNEL_DBR",
            "dma_continue_async"
        ],
        "dma_use_int": [
            "dma_use_int",
            "unmask_int",
            "mask_int"
        ],
        "dma_poll": [
            "dma_poll",
            "CDMA_SOFTC",
            "enter_critical_section",
            "rCDMA_CHANNEL_CSR",
            "dma_int_handler",
            "exit_critical_section"
        ],
        "dma_cancel": [
            "dma_cancel",
            "CDMA_SOFTC",
            "dprintf",
            "command",
            "system_time",
            "cdma_clock_enable",
            "CDMA_CSR_RUN",
            "rCDMA_CHANNEL_CSR",
            "rCDMA_CHANNEL_CSR",
            "rCDMA_CHANNEL_CSR",
            "time_has_elapsed",
            "panic",
            "rCDMA_CHANNEL_CSR",
            "CDMA_CSR_RUN",
            "rCDMA_CHANNEL_CSR",
            "time_has_elapsed",
            "panic",
            "dma_set_aes",
            "cdma_clock_enable"
        ],
        "dma_set_aes": [
            "dma_set_aes",
            "CDMA_SOFTC",
            "cdma_clock_enable",
            "enter_critical_section",
            "exit_critical_section",
            "panic",
            "CDMA_FCSR_CHANNEL",
            "rCDMA_FILTER_KBR7",
            "rCDMA_FILTER_KBR6",
            "rCDMA_FILTER_KBR5",
            "rCDMA_FILTER_KBR4",
            "rCDMA_FILTER_KBR3",
            "rCDMA_FILTER_KBR2",
            "rCDMA_FILTER_KBR1",
            "rCDMA_FILTER_KBR0",
            "CDMA_FCSR_KEY",
            "CDMA_FCSR_KEY",
            "CDMA_FCSR_KEY",
            "rCDMA_FILTER_CSR",
            "cdma_clock_enable"
        ],
        "cdma_clock_enable": [
            "cdma_clock_enable",
            "rCDMA_CLOCK_STATUS",
            "rCDMA_CLOCK_ON",
            "rCDMA_CLOCK_OFF"
        ]
    },
    "drivers/apple/h2fmi": {
        "h2fmi_trace_wr": [
            "h2fmi_trace_wr",
            "WMR_PRINT"
        ],
        "h2fmi_trace_wr8": [
            "h2fmi_trace_wr8",
            "WMR_PRINT"
        ],
        "h2fmc_trace_wr": [
            "h2fmc_trace_wr",
            "WMR_PRINT"
        ],
        "h2fmi_trace_rd": [
            "h2fmi_trace_rd",
            "WMR_PRINT"
        ],
        "h2fmi_trace_rd8": [
            "h2fmi_trace_rd8",
            "WMR_PRINT"
        ],
        "h2fmi_spew_config": [
            "h2fmi_spew_config",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmi_spew_status_regs": [
            "h2fmi_spew_status_regs",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT"
        ],
        "h2fmi_spew_fmi_regs": [
            "h2fmi_spew_fmi_regs",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd"
        ],
        "h2fmi_spew_fmc_regs": [
            "h2fmi_spew_fmc_regs",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd"
        ],
        "h2fmi_spew_ecc_regs": [
            "h2fmi_spew_ecc_regs",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT",
            "h2fmi_rd",
            "WMR_PRINT"
        ],
        "h2fmi_spew_regs": [
            "h2fmi_spew_regs",
            "h2fmi_spew_fmi_regs",
            "h2fmi_spew_fmc_regs",
            "h2fmi_spew_ecc_regs"
        ],
        "h2fmi_spew_buffer": [
            "h2fmi_spew_buffer",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "fmiss_raw_init_sequences": [
            "fmiss_raw_init_sequences",
            "fmiss_raw_init",
            "sizeof",
            "h2fmi_wr",
            "SEQUENCER_MACROS"
        ],
        "h2fmi_read_multi": [
            "h2fmi_read_multi",
            "h2fmi_reset",
            "h2fmi_set_page_format_and_ECC_level",
            "h2fmi_wr",
            "FMISS_TIMEOUT_VALUE",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM",
            "fmiss_ce_to_mask",
            "fmiss_ce_to_mask",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_put_operand",
            "FMC_ADDR1__SEQ4",
            "fmiss_put_operand",
            "FMC_ADDR0__SEQ3",
            "FMC_ADDR0__SEQ2",
            "fmiss_put_command",
            "CMD_MACRO",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_put_command",
            "CMD_MACRO",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_yield",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "FIL_Init": [
            "FIL_Init",
            "h2fmiPrintConfig",
            "h2fmiInit",
            "WMR_PRINT"
        ],
        "FIL_GetFuncTbl": [
            "FIL_GetFuncTbl"
        ],
        "FIL_GetStruct": [
            "FIL_GetStruct",
            "WMR_PRINT",
            "FIL_GetStruct",
            "h2fmiGetStruct"
        ],
        "FIL_SetStruct": [
            "FIL_SetStruct",
            "WMR_PRINT",
            "FIL_SetStruct",
            "h2fmiSetStruct"
        ],
        "FIL_Close": [
            "FIL_Close"
        ],
        "FIL_SwitchToPpn": [
            "FIL_SwitchToPpn"
        ],
        "fmiss_dump": [
            "fmiss_dump",
            "SEQUENCER_MACROS",
            "SEQUENCER_MACROS",
            "h2fmi_rd",
            "SEQ_MACRO_CONTROL__GET_MACRO_ADDRESS",
            "SEQ_MACRO_CONTROL__GET_WORD_COUNT",
            "SEQUENCER_COMMANDS",
            "SEQUENCER_COMMANDS",
            "h2fmi_rd",
            "COMMAND_FIFO_PTR__READ",
            "COMMAND_FIFO_PTR__LEVEL",
            "SEQUENCER_OPERANDS",
            "SEQUENCER_OPERANDS",
            "h2fmi_rd",
            "OPERAND_FIFO_PTR__READ",
            "OPERAND_FIFO_PTR__LEVEL",
            "SEQUENCER_STORES",
            "SEQUENCER_STORES",
            "h2fmi_rd",
            "STORE_FIFO_PTR__READ",
            "STORE_FIFO_PTR__LEVEL",
            "WMR_MAX",
            "WMR_MAX",
            "WMR_MAX",
            "printf",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "fmiss_ppn_macros",
            "fmiss_raw_macros",
            "printf",
            "sizeof",
            "printf",
            "h2fmi_rd",
            "SEQUENCER_MACROS",
            "fmiss_fifo_print",
            "sizeof",
            "h2fmi_rd",
            "SEQUENCER_COMMANDS",
            "fmiss_fifo_print",
            "sizeof",
            "h2fmi_rd",
            "SEQUENCER_OPERANDS",
            "fmiss_fifo_print",
            "sizeof",
            "h2fmi_rd",
            "SEQUENCER_STORES",
            "fmiss_fifo_print",
            "sizeof",
            "printf"
        ],
        "h2fmi_is_chipid_invalid": [
            "h2fmi_is_chipid_invalid",
            "WMR_MEMCMP",
            "sizeof",
            "WMR_MEMCMP",
            "sizeof"
        ],
        "h2fmi_reset": [
            "h2fmi_reset",
            "WMR_CLOCK_RESET_DEVICE",
            "h2fmi_get_gate",
            "h2fmi_wr",
            "turn_on_fmc",
            "restoreTimingRegs"
        ],
        "h2fmi_wait_done": [
            "h2fmi_wait_done",
            "WMR_GET_TICKS_PER_US",
            "WMR_CLOCK_TICKS",
            "h2fmi_rd",
            "WMR_HAS_TIME_ELAPSED_TICKS",
            "h2fmi_fail",
            "WMR_YIELD",
            "h2fmi_wr"
        ],
        "h2fmi_wait_dma_task_pending": [
            "h2fmi_wait_dma_task_pending",
            "WMR_GET_TICKS_PER_US",
            "WMR_CLOCK_TICKS",
            "FMI_DEBUG0__DMA_TASKS_PENDING",
            "h2fmi_rd",
            "WMR_HAS_TIME_ELAPSED_TICKS",
            "h2fmi_fail",
            "WMR_YIELD"
        ],
        "h2fmi_config_page_addr": [
            "h2fmi_config_page_addr",
            "h2fmi_wr",
            "FMC_ADDR1__SEQ7",
            "FMC_ADDR1__SEQ6",
            "FMC_ADDR1__SEQ5",
            "FMC_ADDR1__SEQ4",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ3",
            "FMC_ADDR0__SEQ2",
            "FMC_ADDR0__SEQ1",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM"
        ],
        "h2fmi_clean_ecc": [
            "h2fmi_clean_ecc",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_fmc_read_data": [
            "h2fmi_fmc_read_data",
            "h2fmi_rd",
            "h2fmi_set_if_ctrl",
            "WMR_GET_TICKS_PER_US",
            "h2fmi_wr",
            "FMC_DATANUM__NUM",
            "h2fmi_wr",
            "WMR_CLOCK_TICKS",
            "WMR_HAS_TIME_ELAPSED_TICKS",
            "h2fmi_rd",
            "h2fmi_wr",
            "h2fmi_set_if_ctrl"
        ],
        "h2fmi_nand_reset": [
            "h2fmi_nand_reset",
            "h2fmi_fmc_enable_ce",
            "WMR_SLEEP_US",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_fmc_disable_ce",
            "h2fmi_ppn_reset_feature_shadow"
        ],
        "h2fmi_nand_read_id": [
            "h2fmi_nand_read_id",
            "WMR_ASSERT",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_fmc_read_data",
            "h2fmi_wr",
            "h2fmi_wr",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "ROUNDUPTO",
            "sizeof",
            "sizeof",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_pio_read_sector",
            "sizeof",
            "h2fmi_reset",
            "h2fmi_fmc_disable_ce"
        ],
        "h2fmi_pio_write_sector": [
            "h2fmi_pio_write_sector",
            "h2fmi_wait_dma_task_pending",
            "WMR_PANIC",
            "h2fmi_fail",
            "sizeof",
            "h2fmi_wr"
        ],
        "h2fmi_pio_read_sector": [
            "h2fmi_pio_read_sector",
            "h2fmi_wait_dma_task_pending",
            "h2fmi_fail",
            "buffers",
            "sizeof",
            "h2fmi_rd",
            "sizeof",
            "WMR_MIN",
            "sizeof",
            "h2fmi_rd"
        ],
        "h2fmi_get_gate": [
            "h2fmi_get_gate",
            "h2fmi_select_by_bus"
        ],
        "h2fmi_start_nand_page_read": [
            "h2fmi_start_nand_page_read",
            "h2fmi_config_page_addr",
            "h2fmi_wr",
            "FMC_CMD__CMD2",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_wait_ready",
            "h2fmi_fail",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail"
        ],
        "h2fmi_read_bootpage_pio": [
            "h2fmi_read_bootpage_pio",
            "h2fmi_reset_ecc",
            "h2fmi_fmc_enable_ce",
            "h2fmi_read_page_start",
            "h2fmi_complete_read_page_start",
            "h2fmi_fail",
            "h2fmi_set_bootpage_data_format",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_pio_read_sector",
            "h2fmi_fmc_disable_ce",
            "h2fmi_rd",
            "h2fmi_wr",
            "h2fmi_rx_check_page_ecc",
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_reset"
        ],
        "h2fmi_read_bootpage": [
            "h2fmi_read_bootpage",
            "h2fmi_fmc_enable_ce",
            "h2fmi_read_page_start",
            "h2fmi_complete_read_page_start",
            "h2fmi_fail",
            "operation",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_set_bootpage_data_format",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_fail",
            "h2fmi_fmc_disable_ce",
            "h2fmi_rd",
            "h2fmi_wr",
            "h2fmi_rx_check_page_ecc",
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_reset"
        ],
        "h2fmi_read_raw_page": [
            "h2fmi_read_raw_page",
            "h2fmi_fmc_enable_ce",
            "h2fmi_read_page_start",
            "h2fmi_complete_read_page_start",
            "h2fmi_fail",
            "h2fmi_rx_raw",
            "h2fmi_fmc_disable_ce",
            "h2fmi_clear_interrupts_and_reset_masks"
        ],
        "h2fmi_rx_raw": [
            "h2fmi_rx_raw",
            "read_raw_sgl_prep",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "WMR_MIN",
            "h2fmi_wr",
            "FMI_CONFIG__META_PER_ENVELOPE",
            "FMI_CONFIG__META_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_fail",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_fail",
            "ROUNDUPTO",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_fail"
        ],
        "h2fmi_prepare_read": [
            "h2fmi_prepare_read",
            "h2fmi_fmc_enable_ce",
            "h2fmi_read_page_start"
        ],
        "_nandCmd": [
            "_nandCmd",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr"
        ],
        "_nandAddrSingleCycle": [
            "_nandAddrSingleCycle",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr"
        ],
        "h2fmiGenericNandReadSequence": [
            "h2fmiGenericNandReadSequence",
            "h2fmi_reset",
            "h2fmi_nand_reset",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wait_status",
            "h2fmi_fail",
            "h2fmi_fmc_disable_ce",
            "_nandCmd",
            "_nandAddrSingleCycle",
            "_nandCmd",
            "h2fmi_complete_read_page_start",
            "h2fmi_fail",
            "h2fmi_wr",
            "FMI_CONFIG__META_PER_ENVELOPE",
            "FMI_CONFIG__META_PER_PAGE",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_pio_read_sector",
            "h2fmi_fmc_disable_ce",
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_nand_reset",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wait_status",
            "h2fmi_fail",
            "h2fmi_fmc_disable_ce"
        ],
        "h2fmi_rx_check_page_ecc": [
            "h2fmi_rx_check_page_ecc",
            "defined",
            "WMR_MEMSET",
            "defined",
            "h2fmi_rd",
            "defined",
            "h2fmi_rx_check_sector_ecc",
            "h2fmi_wr",
            "h2fmi_rd"
        ],
        "h2fmi_read_page": [
            "h2fmi_read_page",
            "h2fmi_read_multi"
        ],
        "h2fmi_handle_read_ISR_state_machine": [
            "h2fmi_handle_read_ISR_state_machine",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear"
        ],
        "h2fmiInit": [
            "h2fmiInit",
            "WMR_PRINT",
            "h2fmiInit",
            "WMR_MAX",
            "sizeof",
            "WMR_MAX",
            "WMR_MALLOC",
            "h2fmi_init_minimal",
            "h2fmi_init_minimal",
            "h2fmi_nand_reset_all",
            "h2fmi_nand_reset_all",
            "h2fmi_nand_read_id_all",
            "h2fmi_nand_read_id_all",
            "h2fmi_reset_and_read_chipids",
            "h2fmi_reset_and_read_chipids",
            "WMR_MEMCPY",
            "sizeof",
            "reportDbgChipIds",
            "sizeof",
            "WMR_MEMCMP",
            "sizeof",
            "WMR_PRINT",
            "h2fmi_build_ce_bitmask",
            "h2fmi_build_ce_bitmask",
            "WMR_MEMCPY",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "h2fmiInitVirtToPhysMap",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "targetSupportsToggle",
            "targetSupportsDiffDQS",
            "targetSupportsDiffRE",
            "targetSupportsVREF",
            "setToggleMode",
            "WMR_PRINT",
            "WMR_PRINT",
            "_initPPN",
            "_initRawNand",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "h2fmiTrainDLL",
            "FMC_TOGGLE_CTRL_1_DDR_RD_PRE_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_RD_POST_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_WR_PRE_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_WR_POST_TIME",
            "FMC_TOGGLE_CTRL_2_CE_SETUP_TIME",
            "FMC_TOGGLE_CTRL_2_CE_HOLD_TIME",
            "FMC_TOGGLE_CTRL_2_NAND_TIMING_ADL",
            "FMC_TOGGLE_CTRL_2_NAND_TIMING_WHR",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "restoreTimingRegs",
            "reportToggleModeFMCTimingValues",
            "reportFMCTimingValues",
            "h2fmi_generate_meta_table",
            "reportDbgChipIds"
        ],
        "h2fmiTrainDLL": [
            "h2fmiTrainDLL",
            "WMR_GET_TICKS_PER_US",
            "WMR_DLL_CLOCK_GATE",
            "WMR_CLOCK_TICKS",
            "WMR_HAS_TIME_ELAPSED_TICKS",
            "WMR_PRINT",
            "h2fmi_dll_rd",
            "h2fmi_dll_rd",
            "NAND_DLL_STATUS__DLL_LOCKED_GET",
            "NAND_DLL_CONTROL__REFERENCE",
            "NAND_DLL_CONTROL__STEP_SIZE",
            "NAND_DLL_CONTROL__START_POINT",
            "h2fmi_dll_wr",
            "WMR_SLEEP_US",
            "register",
            "h2fmi_dll_rd",
            "h2fmi_dll_rd",
            "NAND_DLL_STATUS__LOCK_VALUE_GET",
            "WMR_PRINT"
        ],
        "h2fmiPrintConfig": [
            "h2fmiPrintConfig",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "_init_whimory_state": [
            "_init_whimory_state",
            "WMR_MEMSET",
            "sizeof",
            "WMR_LOG2",
            "WMR_LOG2",
            "WMR_LOG2",
            "WMR_LOG2",
            "WMR_LOG2"
        ],
        "_initRawNand": [
            "_initRawNand",
            "findNandInfo",
            "h2fmi_init_raw_state",
            "setECCLevels",
            "NandRequirementToIFCTRL",
            "Legacy_NandRequirementToIFCTRL",
            "_init_whimory_state",
            "WMR_PRINT"
        ],
        "_initPPN": [
            "_initPPN",
            "h2fmi_ppn_fil_init",
            "targetSupportsSingleCE",
            "WMR_PRINT",
            "checkPpnLandingMap",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BUS_FREQ_HZ",
            "h2fmi_ppn_init_channel",
            "WMR_PRINT",
            "h2fmi_ppn_post_rst_pre_pwrstate_operations",
            "h2fmi_ppn_get_device_params",
            "WMR_LSB1",
            "h2fmiPpnGetControllerInfo",
            "h2fmiPpnValidateManufacturerIds",
            "WMR_PRINT",
            "h2fmiPpnValidateFirmwareVersions",
            "WMR_PRINT",
            "h2fmiPpnFirmwareIsBlacklisted",
            "WMR_PRINT",
            "checkForWorkarounds",
            "h2fmi_ppn_set_channel_power_state",
            "SUPPORT_TOGGLE_NAND",
            "WMR_PRINT",
            "turn_on_fmc",
            "restoreTimingRegs",
            "h2fmi_ppn_fill_nandinfo",
            "h2fmi_ppn_verify_feature_shadow",
            "Toggle_NandRequirementToIFCTRL",
            "WMR_PRINT",
            "WMR_PRINT",
            "NandRequirementToIFCTRL",
            "WMR_PRINT",
            "WMR_PRINT",
            "setPpnFeatures",
            "WMR_PRINT",
            "h2fmi_ppn_calculate_fmi_config",
            "h2fmi_ppn_calculate_fmi_data_size",
            "_init_whimory_state",
            "setNandIdPpnConfig",
            "_init_whimory_state"
        ],
        "h2fmiPpnFirmwareIsBlacklisted": [
            "h2fmiPpnFirmwareIsBlacklisted",
            "sizeof",
            "sizeof",
            "WMR_MEMCMP",
            "WMR_MEMCMP"
        ],
        "checkForWorkarounds": [
            "checkForWorkarounds",
            "sizeof",
            "sizeof",
            "WMR_MEMCMP",
            "setPPNOptions"
        ],
        "h2fmiInitVirtToPhysMap": [
            "h2fmiInitVirtToPhysMap",
            "WMR_MEMSET",
            "sizeof",
            "WMR_PRINT",
            "enables",
            "h2fmiMapVirtualCEToBusAndEnable",
            "WMR_PRINT"
        ],
        "h2fmiMapVirtualCEToBusAndEnable": [
            "h2fmiMapVirtualCEToBusAndEnable",
            "WMR_PRINT"
        ],
        "h2fmiTranslateVirtualCEToBus": [
            "h2fmiTranslateVirtualCEToBus"
        ],
        "h2fmiTranslateVirtualCEToCe": [
            "h2fmiTranslateVirtualCEToCe"
        ],
        "h2fmiSetDeviceInfo": [
            "h2fmiSetDeviceInfo",
            "WMR_PRINT",
            "h2fmiSetDeviceInfo",
            "WMR_PANIC"
        ],
        "h2fmiGetDeviceInfo": [
            "h2fmiGetDeviceInfo",
            "WMR_PRINT",
            "h2fmiGetDeviceInfo",
            "WMR_PANIC"
        ],
        "h2fmi_write_bus_timings": [
            "h2fmi_write_bus_timings",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_SETUP",
            "h2fmi_set_if_ctrl",
            "h2fmi_set_if_ctrl",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "h2fmi_set_if_ctrl",
            "h2fmi_set_if_ctrl"
        ],
        "h2fmi_read_bus_timings": [
            "h2fmi_read_bus_timings",
            "FMC_IF_CTRL__GET_REB_SETUP",
            "FMC_IF_CTRL__GET_DCCYCLE",
            "FMC_IF_CTRL__GET_REB_SETUP",
            "FMC_IF_CTRL__GET_REB_HOLD",
            "FMC_IF_CTRL__GET_WEB_SETUP",
            "FMC_IF_CTRL__GET_WEB_HOLD"
        ],
        "h2fmiSetStruct": [
            "h2fmiSetStruct",
            "sizeof",
            "h2fmi_write_bus_timings"
        ],
        "h2fmiGetStruct": [
            "h2fmiGetStruct",
            "WMR_FILL_STRUCT",
            "sizeof",
            "h2fmiGetChipIdStruct",
            "h2fmiGetChipIdStruct",
            "defined",
            "h2fmiGetPPNUID",
            "h2fmiGetRAWUID",
            "by",
            "WMR_MEMSET",
            "defined",
            "h2fmi_get_nand_layout",
            "_GetBytesPerPageSpare",
            "WMR_FILL_STRUCT",
            "sizeof",
            "_GetPagesPerBlock",
            "_GetPagesPerBlock",
            "WMR_FILL_STRUCT",
            "sizeof",
            "WMR_FILL_STRUCT",
            "sizeof",
            "_GetDiesPerCS",
            "WMR_FILL_STRUCT",
            "sizeof",
            "_GetBlocksPerCS",
            "WMR_FILL_STRUCT",
            "sizeof",
            "sizeof",
            "h2fmi_read_bus_timings",
            "WMR_FILL_STRUCT",
            "sizeof",
            "h2fmiGetDeviceParameters",
            "WMR_PRINT"
        ],
        "h2fmiReset": [
            "h2fmiReset",
            "WMR_PRINT",
            "h2fmiReset",
            "AND_FIL_STAT"
        ],
        "h2fmiReadNoECC": [
            "h2fmiReadNoECC",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmiReadNoEcc",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "AND_FIL_STAT",
            "AND_FIL_STAT",
            "h2fmi_choose_aes",
            "h2fmi_read_raw_page",
            "WMR_COMPLETE_READ_BUFFER",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiReadSequentialPages": [
            "h2fmiReadSequentialPages",
            "_GetNumOfBanks",
            "WMR_PRINT",
            "h2fmiReadSequentialPages",
            "h2fmiReadSinglePage",
            "WMR_PRINT",
            "WMR_PRINT",
            "_GetSectorsPerPage",
            "_GetBytesPerPageMain"
        ],
        "h2fmiReadScatteredPages": [
            "h2fmiReadScatteredPages",
            "WMR_PRINT",
            "h2fmiReadScatteredPages",
            "h2fmiReadSinglePage",
            "WMR_PRINT",
            "WMR_PRINT",
            "_GetSectorsPerPage",
            "_GetBytesPerPageMain"
        ],
        "h2fmiReadBootpage": [
            "h2fmiReadBootpage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_read_bootpage_pio",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiReadSinglePage": [
            "h2fmiReadSinglePage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmiReadSinglePage",
            "AND_FIL_STAT",
            "AND_FIL_STAT",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_choose_aes",
            "h2fmi_read_page",
            "WMR_MEMCPY",
            "h2fmi_decrypt_metadata",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_COMPLETE_READ_BUFFER",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiReadSinglePageMaxECC": [
            "h2fmiReadSinglePageMaxECC",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmiReadSinglePageMaxECC",
            "AND_FIL_STAT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_choose_aes",
            "h2fmi_read_page",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiCalcCurrentTimings": [
            "h2fmiCalcCurrentTimings",
            "h2fmi_calc_bus_timings",
            "h2fmi_calc_bus_timings"
        ],
        "h2fmiSetWhiteningState": [
            "h2fmiSetWhiteningState"
        ],
        "h2fmiSetWhiteningMetadataState": [
            "h2fmiSetWhiteningMetadataState"
        ],
        "h2fmiPrintParameters": [
            "h2fmiPrintParameters",
            "_WMR_PRINT",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR"
        ],
        "h2fmiWriteMultiplePages": [
            "h2fmiWriteMultiplePages",
            "WMR_PRINT",
            "h2fmiWriteMultiplePages",
            "AND_FIL_STAT",
            "loop",
            "_GetNumOfBanks",
            "_GetBanksPerCS",
            "_GetNumOfCS",
            "_GetNumOfCS",
            "h2fmiTranslateVirtualCEToBus",
            "_GetBytesPerPageMain",
            "h2fmiWriteSinglePage",
            "_GetNumOfCS",
            "_GetNumOfBanks",
            "_GetNumOfCS",
            "_GetNumOfBanks"
        ],
        "h2fmiWriteScatteredPages": [
            "h2fmiWriteScatteredPages",
            "h2fmiTranslateVirtualCEToBus",
            "_GetBytesPerPageMain",
            "h2fmiWriteSinglePage"
        ],
        "h2fmiWriteSinglePage": [
            "h2fmiWriteSinglePage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmiWriteSinglePage",
            "AND_FIL_STAT",
            "AND_FIL_STAT",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_MEMCPY",
            "h2fmi_encrypt_metadata",
            "h2fmi_choose_aes",
            "WMR_PREPARE_WRITE_BUFFER",
            "WMR_PREPARE_WRITE_BUFFER",
            "h2fmi_write_page"
        ],
        "h2fmiWriteSinglePageMaxECC": [
            "h2fmiWriteSinglePageMaxECC",
            "h2fmiTranslateVirtualCEToBus",
            "AND_FIL_STAT",
            "WMR_MEMSET",
            "h2fmiWriteSinglePage"
        ],
        "h2fmiWriteBootpage": [
            "h2fmiWriteBootpage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_PREPARE_WRITE_BUFFER",
            "h2fmi_write_bootpage",
            "WMR_PRINT"
        ],
        "h2fmiEraseSingleBlock": [
            "h2fmiEraseSingleBlock",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmiEraseSingleBlock",
            "AND_FIL_STAT",
            "AND_FIL_STAT",
            "h2fmi_erase_blocks",
            "WMR_PRINT",
            "AND_FIL_STAT"
        ],
        "h2fmiRegisterCurrentTransaction": [
            "h2fmiRegisterCurrentTransaction",
            "WMR_PRINT"
        ],
        "h2fmi_calc_default_iv": [
            "h2fmi_calc_default_iv",
            "WMR_PRINT",
            "LFSR32",
            "LFSR32",
            "LFSR32",
            "LFSR32"
        ],
        "h2fmi_ppn_all_channel_power_state_transition": [
            "h2fmi_ppn_all_channel_power_state_transition",
            "h2fmi_ppn_set_channel_power_state",
            "h2fmi_ppn_set_channel_power_state"
        ],
        "transitionWorldFromDDR": [
            "transitionWorldFromDDR",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_ppn_all_channel_power_state_transition",
            "h2fmi_reset",
            "h2fmi_reset",
            "h2fmi_ppn_all_channel_power_state_transition",
            "h2fmi_ppn_verify_feature_shadow",
            "h2fmi_ppn_verify_feature_shadow"
        ],
        "transitionWorldToDDR": [
            "transitionWorldToDDR",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_ppn_all_channel_power_state_transition",
            "h2fmi_ppn_all_channel_power_state_transition",
            "h2fmi_reset",
            "h2fmi_reset",
            "h2fmi_ppn_verify_feature_shadow",
            "h2fmi_ppn_verify_feature_shadow"
        ],
        "h2fmi_test_hook": [
            "h2fmi_test_hook",
            "dprintf",
            "h2fmi_spew_config",
            "h2fmi_test_erase",
            "h2fmi_test_write",
            "h2fmi_test_read_bootblock"
        ],
        "h2fmi_dma_execute_cmd": [
            "h2fmi_dma_execute_cmd",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_wait"
        ],
        "h2fmi_dma_execute_async": [
            "h2fmi_dma_execute_async",
            "event_init",
            "WMR_ASSERT",
            "WMR_PRINT",
            "event_unsignal",
            "dma_set_aes",
            "dma_execute_async",
            "WMR_PRINT"
        ],
        "h2fmi_dma_wait": [
            "h2fmi_dma_wait",
            "WMR_CLOCK_NATIVE",
            "dma_use_int",
            "dma_poll",
            "WMR_HAS_TIME_ELAPSED_US",
            "dma_poll",
            "WMR_YIELD",
            "dma_use_int",
            "event_wait_timeout",
            "event_wait",
            "WMR_PRINT",
            "WMR_PANIC"
        ],
        "h2fmi_dma_cancel": [
            "h2fmi_dma_cancel",
            "dma_cancel",
            "event_unsignal"
        ],
        "h2fmi_init_sys": [
            "h2fmi_init_sys",
            "h2fmi_init_isr",
            "event_init",
            "h2fmi_wr"
        ],
        "h2fmi_prepare_wait_status": [
            "h2fmi_prepare_wait_status",
            "h2fmi_set_if_ctrl",
            "h2fmi_rd",
            "h2fmi_wr",
            "FMC_RBB_CONFIG__POL",
            "FMC_RBB_CONFIG__POS",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr",
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_wr",
            "FMC_DATANUM__NUM",
            "h2fmi_wr"
        ],
        "h2fmi_wait_status": [
            "h2fmi_wait_status",
            "h2fmi_prepare_wait_status",
            "h2fmi_wr",
            "h2fmi_wr",
            "event_wait_timeout",
            "h2fmi_fail",
            "h2fmi_fail",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_rd",
            "h2fmi_wr"
        ],
        "h2fmi_nand_read_chipid": [
            "h2fmi_nand_read_chipid",
            "h2fmi_rd",
            "h2fmi_set_if_ctrl",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr",
            "h2fmi_fmc_read_data",
            "h2fmi_fmc_disable_all_ces",
            "h2fmi_set_if_ctrl"
        ],
        "h2fmi_build_ce_bitmask": [
            "h2fmi_build_ce_bitmask",
            "WMR_MEMCMP",
            "sizeof",
            "WMR_MEMCMP",
            "_WMR_PRINT",
            "h2fmi_is_chipid_invalid",
            "_WMR_PRINT"
        ],
        "h2fmi_nand_read_id_all": [
            "h2fmi_nand_read_id_all",
            "WMR_MEMSET",
            "sizeof",
            "h2fmi_nand_read_id",
            "h2fmi_fail"
        ],
        "h2fmi_reset_and_read_chipids": [
            "h2fmi_reset_and_read_chipids",
            "h2fmi_nand_reset_all",
            "h2fmi_fail",
            "h2fmi_nand_read_id_all"
        ],
        "h2fmi_nand_reset_all": [
            "h2fmi_nand_reset_all",
            "h2fmi_nand_reset",
            "h2fmi_fail",
            "WMR_SLEEP_US",
            "restoreTimingRegs"
        ],
        "h2fmi_config_sectors_to_page_size": [
            "h2fmi_config_sectors_to_page_size",
            "case",
            "case",
            "case",
            "case",
            "WMR_PRINT"
        ],
        "h2fmi_set_raw_write_data_format": [
            "h2fmi_set_raw_write_data_format",
            "h2fmi_wr",
            "FMI_CONFIG__META_PER_ENVELOPE",
            "FMI_CONFIG__META_PER_PAGE",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE"
        ],
        "h2fmi_set_bootpage_data_format": [
            "h2fmi_set_bootpage_data_format",
            "h2fmi_wr",
            "FMI_CONFIG__META_PER_ENVELOPE",
            "FMI_CONFIG__META_PER_PAGE",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "ECC_CON1__ERROR_ALERT_LEVEL",
            "ECC_CON1__INT_ENABLE",
            "ECC_CON1__ALLOWED_STUCK_BIT_IN_FP",
            "h2fmi_wr",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "h2fmi_wr",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "h2fmi_wr",
            "ECC_CON1__ERROR_ALERT_LEVEL",
            "ECC_CON1__INT_ENABLE",
            "ECC_CON1__ALLOWED_STUCK_BIT_IN_FP"
        ],
        "h2fmi_set_page_format": [
            "h2fmi_set_page_format",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_calculate_ecc_bits": [
            "h2fmi_calculate_ecc_bits",
            "WMR_ASSERT"
        ],
        "h2fmi_calculate_ecc_output_bytes": [
            "h2fmi_calculate_ecc_output_bytes"
        ],
        "h2fmi_calculate_fmi_config": [
            "h2fmi_calculate_fmi_config",
            "FMI_CONFIG__META_PER_ENVELOPE",
            "FMI_CONFIG__META_PER_PAGE",
            "h2fmi_config_sectors_to_page_size",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS"
        ],
        "h2fmi_calculate_fmi_data_size": [
            "h2fmi_calculate_fmi_data_size",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE"
        ],
        "h2fmi_clear_interrupts_and_reset_masks": [
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_fmc_enable_ce": [
            "h2fmi_fmc_enable_ce",
            "h2fmi_calc_bus_ce",
            "h2fmi_wr",
            "FMC_CE_CTRL__CEB",
            "h2fmi_fmc_disable_all_ces"
        ],
        "h2fmi_fmc_disable_ce": [
            "h2fmi_fmc_disable_ce",
            "h2fmi_calc_bus_ce",
            "h2fmi_rd",
            "h2fmi_wr",
            "FMC_CE_CTRL__CEB"
        ],
        "h2fmi_fmc_disable_all_ces": [
            "h2fmi_fmc_disable_all_ces",
            "h2fmi_wr"
        ],
        "h2fmi_prepare_for_ready_busy_interrupt": [
            "h2fmi_prepare_for_ready_busy_interrupt",
            "h2fmi_prepare_wait_status",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_set_page_format_and_ECC_level": [
            "h2fmi_set_page_format_and_ECC_level",
            "h2fmi_set_page_format",
            "h2fmi_wr",
            "ECC_CON1__ERROR_ALERT_LEVEL",
            "ECC_CON1__INT_ENABLE",
            "h2fmi_wr",
            "ECC_CON1__ERROR_ALERT_LEVEL",
            "ECC_CON1__INT_ENABLE",
            "ECC_CON1__ALLOWED_STUCK_BIT_IN_FP",
            "h2fmi_wr",
            "ECC_CON1__ERROR_ALERT_LEVEL",
            "ECC_CON1__INT_ENABLE",
            "ECC_CON1__ALLOWED_STUCK_BIT_IN_FP"
        ],
        "h2fmi_get_current_CE_state": [
            "h2fmi_get_current_CE_state",
            "h2fmi_rd",
            "WMR_HAS_TIME_ELAPSED_TICKS"
        ],
        "h2fmi_instrument_bit_set": [
            "h2fmi_instrument_bit_set",
            "h2fmc_rd",
            "h2fmc_wr"
        ],
        "h2fmi_instrument_bit_clear": [
            "h2fmi_instrument_bit_clear",
            "h2fmc_rd",
            "h2fmc_wr"
        ],
        "h2fmi_common_idle_handler": [
            "h2fmi_common_idle_handler",
            "WMR_GET_TICKS_PER_US",
            "h2fmi_rx_prep",
            "h2fmi_tx_prep"
        ],
        "h2fmi_start_dma": [
            "h2fmi_start_dma",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof"
        ],
        "h2fmi_aes_iv": [
            "h2fmi_aes_iv",
            "WMR_MEMCPY",
            "WMR_PRINT",
            "WMR_PRINT",
            "LFSR32",
            "LFSR32",
            "LFSR32",
            "LFSR32"
        ],
        "h2fmi_set_if_ctrl": [
            "h2fmi_set_if_ctrl",
            "streaming",
            "FMC_IF_CTRL__GET_REB_SETUP",
            "FMC_IF_CTRL__GET_DCCYCLE",
            "FMC_IF_CTRL__GET_REB_HOLD",
            "h2fmi_wr"
        ],
        "restoreTimingRegs": [
            "restoreTimingRegs",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_set_if_ctrl",
            "h2fmi_set_if_ctrl"
        ],
        "h2fmi_setup_aes": [
            "h2fmi_setup_aes",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmi_restoreFmiRegs": [
            "h2fmi_restoreFmiRegs",
            "restoreTimingRegs",
            "turn_on_fmc",
            "fmiss_raw_init_sequences",
            "fmiss_init_sequences"
        ],
        "h2fmi_iop_set_config": [
            "h2fmi_iop_set_config",
            "dprintf",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "FMC_TOGGLE_CTRL_1_DDR_RD_PRE_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_RD_POST_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_WR_PRE_TIME",
            "FMC_TOGGLE_CTRL_1_DDR_WR_POST_TIME",
            "FMC_TOGGLE_CTRL_2_CE_SETUP_TIME",
            "FMC_TOGGLE_CTRL_2_CE_HOLD_TIME",
            "FMC_TOGGLE_CTRL_2_NAND_TIMING_ADL",
            "FMC_TOGGLE_CTRL_2_NAND_TIMING_WHR",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "h2fmi_restoreFmiRegs",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "turn_on_fmc",
            "h2fmi_init_sys",
            "h2fmi_ppn_init_channel",
            "WMR_PANIC",
            "WMR_PANIC",
            "h2fmi_ppn_calculate_fmi_config",
            "h2fmi_ppn_calculate_fmi_data_size",
            "WMR_PANIC",
            "h2fmi_calculate_ecc_bits",
            "h2fmi_calculate_fmi_config",
            "h2fmi_calculate_fmi_data_size"
        ],
        "h2fmi_iop_read_chip_ids": [
            "h2fmi_iop_read_chip_ids",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "h2fmi_nand_read_id",
            "WMR_PRINT",
            "WMR_PREPARE_WRITE_BUFFER",
            "sizeof"
        ],
        "h2fmi_iop_reset_everything": [
            "h2fmi_iop_reset_everything",
            "h2fmi_reset",
            "h2fmi_init_sys",
            "h2fmi_nand_reset_all"
        ],
        "h2fmi_iop_erase_multiple": [
            "h2fmi_iop_erase_multiple",
            "WMR_PRINT",
            "h2fmi_erase_blocks"
        ],
        "h2fmi_iop_erase_single": [
            "h2fmi_iop_erase_single",
            "WMR_PRINT",
            "h2fmi_erase_blocks"
        ],
        "h2fmi_iop_read_single": [
            "h2fmi_iop_read_single",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PRINT",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "h2fmi_setup_aes",
            "h2fmi_read_page",
            "WMR_PREPARE_WRITE_BUFFER",
            "sizeof"
        ],
        "h2fmi_iop_read_multiple": [
            "h2fmi_iop_read_multiple",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_setup_aes",
            "WMR_PRINT",
            "h2fmi_read_multi",
            "WMR_PREPARE_WRITE_BUFFER",
            "sizeof",
            "defined",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmi_iop_write_single": [
            "h2fmi_iop_write_single",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "WMR_PRINT",
            "h2fmi_setup_aes",
            "h2fmi_write_page"
        ],
        "h2fmi_iop_write_multiple": [
            "h2fmi_iop_write_multiple",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PRINT",
            "h2fmi_setup_aes",
            "h2fmi_write_multi"
        ],
        "h2fmi_iop_read_raw": [
            "h2fmi_iop_read_raw",
            "WMR_PRINT",
            "h2fmi_read_raw_page"
        ],
        "h2fmi_iop_write_raw": [
            "h2fmi_iop_write_raw",
            "WMR_PRINT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_write_raw_page"
        ],
        "h2fmi_iop_read_bootpage": [
            "h2fmi_iop_read_bootpage",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PRINT",
            "h2fmi_read_bootpage",
            "WMR_PREPARE_WRITE_BUFFER",
            "sizeof"
        ],
        "h2fmi_iop_write_bootpage": [
            "h2fmi_iop_write_bootpage",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PRINT",
            "h2fmi_write_bootpage"
        ],
        "h2fmi_iop_sleep": [
            "h2fmi_iop_sleep",
            "dprintf",
            "h2fmi_bus_index"
        ],
        "h2fmi_iop_wake": [
            "h2fmi_iop_wake",
            "dprintf",
            "h2fmi_bus_index"
        ],
        "dump_fmi_state": [
            "dump_fmi_state",
            "printf",
            "printf",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "h2fmi_rd",
            "printf",
            "h2fmi_rd",
            "fmiss_dump"
        ],
        "HertzToPicoseconds": [
            "HertzToPicoseconds"
        ],
        "NandRequirementToIFCTRL": [
            "NandRequirementToIFCTRL",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "HertzToPicoseconds",
            "ROUNDUPTO",
            "DUMP_VAR",
            "ROUNDUPTO",
            "WMR_MAX",
            "DUMP_VAR",
            "ROUNDUPTO",
            "WMR_MAX",
            "DUMP_VAR",
            "ROUNDUPTO",
            "mode",
            "ROUNDUPTO",
            "WMR_ASSERT",
            "ROUNDUPTO",
            "WMR_MAX",
            "DUMP_VAR",
            "DUMP_VAR",
            "ROUNDUPTO",
            "ROUNDUPTO",
            "WMR_MAX"
        ],
        "Legacy_NandRequirementToIFCTRL": [
            "Legacy_NandRequirementToIFCTRL",
            "timing_nanos",
            "SUB_MIN_ZERO",
            "HertzToPicoseconds",
            "h2fmi_nanos_to_clocks",
            "SUB_MIN_ZERO",
            "WMR_MAX",
            "h2fmi_nanos_to_clocks",
            "h2fmi_nanos_to_clocks",
            "WMR_MAX",
            "SUB_MIN_ZERO",
            "WMR_MAX",
            "h2fmi_nanos_to_clocks",
            "SUB_MIN_ZERO",
            "ROUNDUPTO"
        ],
        "Toggle_NandRequirementToIFCTRL": [
            "Toggle_NandRequirementToIFCTRL",
            "WMR_MAX",
            "WMR_MAX",
            "WMR_MAX",
            "WMR_MAX",
            "WMR_MAX",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "CEIL_DIV",
            "WMR_MAX",
            "CEIL_DIV",
            "CEIL_DIV"
        ],
        "h2fmi_write_page": [
            "h2fmi_write_page",
            "h2fmi_write_multi"
        ],
        "h2fmi_write_multi": [
            "h2fmi_write_multi",
            "defined",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_clear",
            "WMR_ASSERT",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_set",
            "h2fmi_rd",
            "WMR_ENTER_CRITICAL_SECTION",
            "h2fmi_reset",
            "h2fmi_set_if_ctrl",
            "WMR_EXIT_CRITICAL_SECTION",
            "h2fmi_instrument_bit_set",
            "event_unsignal",
            "WMR_ENTER_CRITICAL_SECTION",
            "h2fmi_handle_write_ISR_state_machine",
            "WMR_EXIT_CRITICAL_SECTION",
            "WMR_YIELD"
        ],
        "h2fmi_write_bootpage": [
            "h2fmi_write_bootpage",
            "h2fmi_rd",
            "h2fmi_fmc_enable_ce",
            "h2fmi_set_if_ctrl",
            "program",
            "h2fmi_start_nand_page_program",
            "h2fmi_prepare_write_confirm",
            "h2fmi_set_bootpage_data_format",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_tx_bootpage_pio",
            "h2fmi_send_write_confirm",
            "h2fmi_wait_status",
            "h2fmi_wr",
            "h2fmi_set_if_ctrl",
            "h2fmi_fmc_disable_ce",
            "h2fmi_reset"
        ],
        "h2fmi_write_raw_page": [
            "h2fmi_write_raw_page",
            "h2fmi_rd",
            "h2fmi_reset",
            "h2fmi_fmc_enable_ce",
            "h2fmi_set_if_ctrl",
            "h2fmi_wr",
            "program",
            "h2fmi_start_nand_page_program",
            "h2fmi_prepare_write_confirm",
            "h2fmi_tx_raw_page",
            "h2fmi_fail",
            "h2fmi_send_write_confirm",
            "h2fmi_wait_status",
            "h2fmi_wr",
            "h2fmi_set_if_ctrl",
            "h2fmi_fmc_disable_ce",
            "h2fmi_fmc_disable_all_ces"
        ],
        "h2fmi_do_write_setup": [
            "h2fmi_do_write_setup",
            "h2fmi_fmc_enable_ce",
            "h2fmi_prepare_for_ready_busy_interrupt"
        ],
        "h2fmi_ISR_state_machine_start_page": [
            "h2fmi_ISR_state_machine_start_page",
            "program",
            "h2fmi_start_nand_page_program",
            "h2fmi_wr",
            "h2fmi_wr",
            "WMR_CLOCK_TICKS",
            "h2fmi_prepare_write_confirm"
        ],
        "h2fmi_handle_write_ISR_state_machine": [
            "h2fmi_handle_write_ISR_state_machine",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear",
            "h2fmi_instrument_bit_set",
            "h2fmi_instrument_bit_clear"
        ],
        "h2fmi_ppn_fil_init": [
            "h2fmi_ppn_fil_init",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof"
        ],
        "h2fmiPpnPerformCommandList": [
            "h2fmiPpnPerformCommandList",
            "defined",
            "h2fmiPpnReadMulti",
            "h2fmiPpnReadMultiWithSingles",
            "defined",
            "defined",
            "h2fmiPpnWriteMulti",
            "h2fmi_ppn_erase_blocks",
            "defined",
            "h2fmi_ppn_read_cau_bbt",
            "WMR_PANIC",
            "WMR_PRINT",
            "h2fmi_ppn_recover_nand",
            "WMR_PRINT",
            "h2fmi_ppn_recover_nand"
        ],
        "h2fmiPpnReadMulti": [
            "h2fmiPpnReadMulti",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "sizeof",
            "WMR_MEMSET",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "fmiss_ppn_read_multi",
            "h2fmi_ppn_read_multi",
            "WMR_COMPLETE_READ_BUFFER",
            "WMR_COMPLETE_READ_BUFFER",
            "WMR_MEMCPY"
        ],
        "h2fmiPpnReadSinglePage": [
            "h2fmiPpnReadSinglePage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "h2fmiPpnPerformCommandList",
            "WMR_MEMCPY",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmiPpnReadBootpage": [
            "h2fmiPpnReadBootpage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_read_bootpage",
            "WMR_PRINT",
            "AND_FIL_STAT",
            "WMR_PRINT",
            "WMR_PRINT",
            "AND_FIL_STAT",
            "WMR_PRINT",
            "h2fmi_ppn_recover_nand",
            "WMR_PRINT",
            "AND_FIL_STAT",
            "h2fmi_ppn_recover_nand",
            "AND_FIL_STAT",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiPpnWriteSinglePage": [
            "h2fmiPpnWriteSinglePage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "h2fmiPpnPerformCommandList"
        ],
        "h2fmiPpnWriteBootpage": [
            "h2fmiPpnWriteBootpage",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_CHECK_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_write_bootpage",
            "WMR_PRINT",
            "AND_FIL_STAT",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_recover_nand",
            "WMR_PRINT",
            "AND_FIL_STAT",
            "h2fmi_ppn_recover_nand",
            "AND_FIL_STAT",
            "WMR_COMPLETE_READ_BUFFER"
        ],
        "h2fmiPpnEraseSingleBlock": [
            "h2fmiPpnEraseSingleBlock",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "h2fmiPpnPerformCommandList"
        ],
        "h2fmiPpnGetFirmwareVersion": [
            "h2fmiPpnGetFirmwareVersion",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "h2fmi_ppn_get_fw_version"
        ],
        "h2fmiPpnValidateFirmwareVersions": [
            "h2fmiPpnValidateFirmwareVersions",
            "h2fmiPpnGetFirmwareVersion",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmiPpnGetControllerHwId": [
            "h2fmiPpnGetControllerHwId",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "h2fmi_ppn_get_controller_hw_id"
        ],
        "h2fmiPpnGetManufacturerId": [
            "h2fmiPpnGetManufacturerId",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "h2fmi_ppn_get_manufacturer_id"
        ],
        "h2fmiPpnValidateManufacturerIds": [
            "h2fmiPpnValidateManufacturerIds",
            "h2fmiPpnGetManufacturerId",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmiPpnGetControllerInfo": [
            "h2fmiPpnGetControllerInfo",
            "h2fmiPpnGetManufacturerId",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmiPpnGetFirmwareVersion",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmiPpnUpdateFw": [
            "h2fmiPpnUpdateFw",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "WMR_PRINT",
            "h2fmi_ppn_fw_update",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_fw_update",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_recover_nand": [
            "h2fmi_ppn_recover_nand",
            "h2fmi_nand_reset_all",
            "h2fmi_nand_reset_all",
            "h2fmi_reset",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_post_rst_pre_pwrstate_operations",
            "h2fmi_ppn_post_rst_pre_pwrstate_operations",
            "h2fmi_ppn_set_channel_power_state",
            "SUPPORT_TOGGLE_NAND",
            "h2fmi_ppn_set_channel_power_state",
            "SUPPORT_TOGGLE_NAND",
            "h2fmi_reset",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_verify_feature_shadow",
            "h2fmi_ppn_verify_feature_shadow"
        ],
        "h2fmiDmaDebugData": [
            "h2fmiDmaDebugData",
            "WMR_ASSERT",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "h2fmi_ppn_dma_debug_data_payload"
        ],
        "h2fmiVthSweepSetup": [
            "h2fmiVthSweepSetup",
            "FIL_GetFuncTbl",
            "GetDeviceInfo",
            "h2fmiTranslateVirtualCEToBus",
            "h2fmiTranslateVirtualCEToCe",
            "h2fmi_ppn_set_debug_data",
            "sizeof",
            "WMR_PRINT",
            "h2fmi_ppn_get_general_error_info"
        ],
        "fmiss_init_sequences": [
            "fmiss_init_sequences",
            "CMD_TIMED_WAIT",
            "COMMAND_FIFO__COMMAND",
            "CMD_TIMED_WAIT",
            "FMISS_NS_TO_CLKS",
            "CMD_TIMED_WAIT",
            "sizeof",
            "h2fmi_wr",
            "SEQUENCER_MACROS"
        ],
        "fmiss_ppn_read_multi": [
            "fmiss_ppn_read_multi",
            "WMR_ASSERT",
            "h2fmi_wr",
            "fmiss_ce_index_to_physical",
            "WMR_PRINT",
            "h2fmi_ppn_force_geb_address",
            "h2fmi_ppn_set_features",
            "WMR_PANIC",
            "d",
            "h2fmi_wr",
            "h2fmi_wr",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "h2fmi_wr",
            "FMISS_TIMEOUT_VALUE",
            "h2fmi_wr",
            "h2fmi_wr",
            "fmiss_ce_index_to_physical",
            "fmiss_ce_index_to_physical",
            "WMR_PRINT",
            "ce_index",
            "PPN_MAX_CES_PER_BUS",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "FMC_CMD__CMD1",
            "FMC_CMD__CMD2",
            "fmiss_put_operand",
            "FMC_CMD__CMD1",
            "FMC_CMD__CMD2",
            "fmiss_put_command",
            "CMD_MACRO",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "sizeof",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_get_next_operation_status",
            "fmiss_get_store",
            "fmiss_put_command",
            "CMD_MACRO",
            "WMR_PRINT",
            "fmiss_put_command",
            "CMD_TIMED_WAIT",
            "FMISS_NS_TO_CLKS",
            "fmiss_put_command",
            "CMD_COMMAND",
            "fmiss_put_command",
            "CMD_TIMED_WAIT",
            "FMISS_NS_TO_CLKS",
            "fmiss_put_command",
            "CMD_TIMED_WAIT",
            "fmiss_put_command",
            "fmiss_put_command",
            "CMD_TIMED_WAIT",
            "FMISS_NS_TO_CLKS",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_put_command",
            "CMD_COMMAND",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_get_store",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_wr",
            "WMR_PRINT",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan"
        ],
        "fmiss_ppn_write_multi": [
            "fmiss_ppn_write_multi",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_wr",
            "h2fmi_wr",
            "FMISS_TIMEOUT_VALUE",
            "h2fmi_wr",
            "h2fmi_wr",
            "fmiss_ppn_prep_write_multi",
            "h2fmi_wr",
            "h2fmi_wr",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "sizeof",
            "fmiss_ce_index_to_physical",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_put_operand",
            "fmiss_put_operand",
            "FMC_CMD__CMD1",
            "fmiss_put_operand",
            "FMC_CMD__CMD1",
            "fmiss_put_command",
            "CMD_MACRO",
            "fmiss_put_command",
            "fmiss_put_command",
            "CMD_COMMAND",
            "fmiss_get_controller_status",
            "fmiss_put_command",
            "CMD_TIMED_WAIT",
            "CMD_MACRO",
            "fmiss_put_command",
            "CMD_SEND_INTERRUPT",
            "fmiss_put_command",
            "CMD_ENABLE_CHIP",
            "fmiss_yield",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_wr",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "h2fmi_wr"
        ],
        "h2fmi_ppn_get_uid": [
            "h2fmi_ppn_get_uid",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_read_multi": [
            "h2fmi_ppn_read_multi",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_ce_index_to_physical",
            "WMR_PANIC",
            "WMR_PRINT",
            "h2fmi_ppn_force_geb_address",
            "h2fmi_ppn_ce_index_to_physical",
            "h2fmi_ppn_set_features",
            "WMR_PANIC",
            "d",
            "h2fmi_ppn_ce_index_to_physical",
            "h2fmi_ppn_ce_index_to_physical",
            "WMR_ASSERT",
            "h2fmi_ppn_switch_ce",
            "h2fmi_ppn_prep_read",
            "WMR_ASSERT",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "sizeof",
            "h2fmi_ppn_switch_ce",
            "h2fmi_ppn_get_next_operation_status",
            "h2fmi_send_cmd",
            "h2fmi_ppn_get_page_data",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd",
            "h2fmi_ppn_disable_all_ces",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_read_bootpage": [
            "h2fmi_ppn_read_bootpage",
            "transitionWorldFromDDR",
            "WMR_ASSERT",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr_cmd",
            "h2fmi_ppn_get_next_operation_status",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_clean_ecc",
            "h2fmi_send_cmd",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_pio_read_sector",
            "WMR_PANIC",
            "h2fmi_rx_check_page_ecc",
            "WMR_PRINT",
            "h2fmi_send_cmd",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_reset",
            "transitionWorldToDDR"
        ],
        "h2fmi_ppn_read_cau_bbt": [
            "h2fmi_ppn_read_cau_bbt",
            "h2fmi_ppn_ce_index_to_physical",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PRINT",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_idle_counter": [
            "h2fmi_ppn_get_idle_counter",
            "h2fmi_ppn_get_feature",
            "WMR_PANIC",
            "h2fmi_reset"
        ],
        "h2fmi_ppn_write_multi": [
            "h2fmi_ppn_write_multi",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_prep_write_multi",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_meta_fifo",
            "sizeof",
            "sizeof",
            "h2fmi_ppn_ce_index_to_physical",
            "h2fmi_ppn_switch_ce",
            "h2fmi_ppn_program_page",
            "h2fmi_ppn_get_controller_status",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_wait",
            "h2fmi_dma_meta_chan",
            "WMR_PRINT",
            "h2fmi_dma_cancel",
            "h2fmi_dma_meta_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_reset",
            "h2fmi_ppn_ce_index_to_physical",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "h2fmi_ppn_process_error_list",
            "h2fmi_ppn_set_features"
        ],
        "h2fmi_ppn_process_error_list": [
            "h2fmi_ppn_process_error_list",
            "WMR_PRINT",
            "d",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_write_bootpage": [
            "h2fmi_ppn_write_bootpage",
            "transitionWorldFromDDR",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_switch_ce",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_send_cmd_addr",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_ppn_start_fmi_write_and_wait",
            "h2fmi_send_cmd",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "WMR_PANIC",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_ppn_get_controller_status",
            "WMR_PRINT",
            "h2fmi_ppn_disable_all_ces",
            "WMR_PRINT",
            "error",
            "h2fmi_ppn_set_features",
            "transitionWorldToDDR"
        ],
        "h2fmi_ppn_erase_blocks": [
            "h2fmi_ppn_erase_blocks",
            "WMR_ASSERT",
            "h2fmi_ppn_ce_index_to_physical",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr_cmd",
            "h2fmi_ppn_get_controller_status",
            "h2fmi_ppn_get_next_operation_status",
            "h2fmi_send_cmd",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_set_features": [
            "h2fmi_ppn_set_features",
            "WMR_ASSERT",
            "h2fmi_ppn_switch_ce",
            "h2fmi_wr",
            "h2fmi_send_cmd_addr",
            "h2fmi_clear_interrupts_and_reset_masks",
            "WMR_MIN",
            "sizeof",
            "WMR_MEMCPY",
            "sizeof",
            "ROUNDDOWNTO",
            "sizeof",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_pio_write_sector",
            "h2fmi_busy_wait",
            "h2fmi_wr",
            "h2fmi_send_cmd",
            "h2fmi_ppn_get_next_operation_status",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_send_cmd",
            "h2fmi_wr",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_reset",
            "_update_feature_shadow"
        ],
        "h2fmi_ppn_get_feature": [
            "h2fmi_ppn_get_feature",
            "h2fmi_ppn_switch_ce",
            "h2fmi_clear_interrupts_and_reset_masks",
            "h2fmi_send_cmd_addr_cmd",
            "h2fmi_ppn_get_next_operation_status",
            "WMR_PRINT",
            "h2fmi_send_cmd",
            "WMR_MIN",
            "sizeof",
            "sizeof",
            "ROUNDDOWNTO",
            "sizeof",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_pio_read_sector",
            "WMR_MEMCPY",
            "WMR_MIN",
            "h2fmi_wr",
            "h2fmi_send_cmd",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_get_debug_data": [
            "h2fmi_ppn_get_debug_data",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr_cmd",
            "WMR_SLEEP_US",
            "h2fmi_send_cmd",
            "h2fmi_get_nand_status",
            "WMR_ASSERT",
            "h2fmi_ppn_read_serial_output",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_set_debug_data": [
            "h2fmi_ppn_set_debug_data",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr",
            "h2fmi_prepare_for_fmi_interrupt",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_pio_write_sector",
            "h2fmi_wait_for_fmi_interrupt",
            "h2fmi_ppn_disable_all_ces",
            "WMR_PANIC",
            "h2fmi_wr",
            "h2fmi_send_cmd",
            "WMR_SLEEP_US",
            "h2fmi_send_cmd",
            "h2fmi_get_nand_status",
            "WMR_PRINT",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_get_fw_version": [
            "h2fmi_ppn_get_fw_version",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_get_package_assembly_code": [
            "h2fmi_ppn_get_package_assembly_code",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_controller_unique_id": [
            "h2fmi_ppn_get_controller_unique_id",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_controller_hw_id": [
            "h2fmi_ppn_get_controller_hw_id",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_marketing_name": [
            "h2fmi_ppn_get_marketing_name",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_manufacturer_id": [
            "h2fmi_ppn_get_manufacturer_id",
            "toggle",
            "WMR_ASSERT",
            "h2fmi_reset",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr",
            "h2fmi_ppn_set_format",
            "h2fmi_wr",
            "h2fmi_pio_read_sector",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_reset"
        ],
        "h2fmi_ppn_get_die_chip_id": [
            "h2fmi_ppn_get_die_chip_id",
            "h2fmi_reset",
            "h2fmi_ppn_get_feature"
        ],
        "h2fmi_ppn_get_general_error_info": [
            "h2fmi_ppn_get_general_error_info",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "h2fmi_reset",
            "sizeof",
            "sizeof",
            "h2fmi_ppn_get_debug_data",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_dma_debug_data_payload",
            "WMR_PRINT",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_fw_update": [
            "h2fmi_ppn_fw_update",
            "WMR_PANIC",
            "h2fmi_reset",
            "h2fmi_set_if_ctrl",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "FMC_IF_CTRL__DCCYCLE",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_switch_ce",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "WMR_MIN",
            "h2fmi_ppn_update_fw_chunk",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_disable_all_ces",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "WMR_PRINT",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan"
        ],
        "h2fmi_ppn_poweron": [
            "h2fmi_ppn_poweron"
        ],
        "h2fmi_ppn_poweroff": [
            "h2fmi_ppn_poweroff",
            "WMR_PANIC"
        ],
        "h2fmi_ppn_set_power_low_power": [
            "h2fmi_ppn_set_power_low_power",
            "h2fmi_ppn_reset",
            "SetFeatures"
        ],
        "h2fmi_ppn_set_power_standby": [
            "h2fmi_ppn_set_power_standby"
        ],
        "h2fmi_ppn_get_next_operation_status": [
            "h2fmi_ppn_get_next_operation_status",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "FMC_CMD__CMD2",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr",
            "h2fmi_get_nand_status"
        ],
        "h2fmi_ppn_get_next_operation_status_with_addr": [
            "h2fmi_ppn_get_next_operation_status_with_addr",
            "h2fmi_send_cmd_addr_cmd",
            "h2fmi_get_nand_status"
        ],
        "h2fmi_ppn_get_controller_status": [
            "h2fmi_ppn_get_controller_status",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_busy_wait",
            "h2fmi_wr",
            "h2fmi_get_nand_status"
        ],
        "h2fmi_ppn_get_device_params": [
            "h2fmi_ppn_get_device_params",
            "WMR_ASSERT",
            "h2fmi_set_if_ctrl",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "FMC_IF_CTRL__DCCYCLE",
            "h2fmi_ppn_switch_ce",
            "h2fmi_send_cmd_addr_cmd",
            "h2fmi_ppn_get_next_operation_status",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_read_serial_output",
            "h2fmi_send_cmd",
            "h2fmi_ppn_disable_all_ces",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "DUMP_VAR",
            "WMR_ASSERT",
            "sizeof",
            "WMR_ASSERT",
            "sizeof",
            "_validate_device_parameters",
            "h2fmi_set_if_ctrl"
        ],
        "h2fmi_ppn_init_channel": [
            "h2fmi_ppn_init_channel",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "sizeof",
            "WMR_MALLOC",
            "WMR_ASSERT",
            "fmiss_init_sequences"
        ],
        "_validate_device_parameters": [
            "_validate_device_parameters",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "area",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "_validate_item",
            "WMR_PRINT",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_post_rst_pre_pwrstate_operations": [
            "h2fmi_ppn_post_rst_pre_pwrstate_operations",
            "h2fmi_ppn_configure_debug_data",
            "h2fmi_ppn15_enable_optional_signals"
        ],
        "h2fmi_ppn_set_channel_power_state": [
            "h2fmi_ppn_set_channel_power_state",
            "WMR_ASSERT",
            "PS_TRANS_GET_TO",
            "WMR_PRINT",
            "h2fmi_ppn_set_features",
            "WMR_ASSERT",
            "WMR_PRINT",
            "restoreTimingRegs"
        ],
        "h2fmi_ppn_fill_nandinfo": [
            "h2fmi_ppn_fill_nandinfo",
            "WMR_LOG2",
            "WMR_MEMSET",
            "sizeof",
            "WMR_BUS_FREQ_HZ",
            "getPPNFormat"
        ],
        "h2fmi_ppn_calculate_fmi_config": [
            "h2fmi_ppn_calculate_fmi_config",
            "FMI_CONFIG__ECC_CORRECTABLE_BITS",
            "FMI_CONFIG__DMA_BURST",
            "WMR_LOG2"
        ],
        "h2fmi_ppn_calculate_fmi_data_size": [
            "h2fmi_ppn_calculate_fmi_data_size",
            "FMI_DATA_SIZE__META_BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__META_BYTES_PER_PAGE",
            "FMI_DATA_SIZE__BYTES_PER_SECTOR",
            "FMI_DATA_SIZE__SECTORS_PER_PAGE"
        ],
        "h2fmi_ppn15_get_temperature": [
            "h2fmi_ppn15_get_temperature",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT"
        ],
        "h2fmi_ppn15_enable_optional_signals": [
            "h2fmi_ppn15_enable_optional_signals",
            "WMR_PRINT",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "WMR_PRINT",
            "h2fmi_ppn_set_features",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_configure_debug_data": [
            "h2fmi_ppn_configure_debug_data",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "h2fmi_ppn_set_features",
            "WMR_PRINT",
            "h2fmi_ppn_set_features"
        ],
        "h2fmi_ppn_dma_debug_data_payload": [
            "h2fmi_ppn_dma_debug_data_payload",
            "h2fmi_reset",
            "h2fmi_ppn_switch_ce",
            "reset",
            "h2fmi_ppn_reset",
            "h2fmi_send_cmd",
            "h2fmi_get_nand_status",
            "WMR_ASSERT",
            "h2fmi_dma_execute_async",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_data_fifo",
            "sizeof",
            "h2fmi_send_cmd_addr_cmd",
            "WMR_SLEEP_US",
            "h2fmi_send_cmd",
            "h2fmi_get_nand_status",
            "WMR_PANIC",
            "h2fmi_send_cmd",
            "h2fmi_ppn_set_format",
            "h2fmi_ppn_start_fmi_read_and_wait",
            "h2fmi_dma_wait",
            "h2fmi_dma_data_chan",
            "WMR_PRINT",
            "h2fmi_dma_data_chan",
            "h2fmi_dma_cancel",
            "h2fmi_dma_data_chan",
            "h2fmi_ppn_disable_all_ces"
        ],
        "h2fmi_ppn_force_geb_address": [
            "h2fmi_ppn_force_geb_address",
            "h2fmi_reset",
            "WMR_PRINT",
            "h2fmi_ppn_set_debug_data",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_set_feature_list": [
            "h2fmi_ppn_set_feature_list",
            "WMR_MEMCPY",
            "sizeof",
            "h2fmi_ppn_set_features",
            "WMR_ASSERT"
        ],
        "h2fmi_ppn_verify_feature_shadow": [
            "h2fmi_ppn_verify_feature_shadow",
            "WMR_LOG2",
            "sizeof",
            "NUMELEMENTS",
            "NUMELEMENTS",
            "h2fmi_ppn_get_feature",
            "WMR_PRINT",
            "WMR_MEMCMP",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_PRINT",
            "WMR_ASSERT"
        ],
        "h2fmi_ppn_reset_feature_shadow": [
            "h2fmi_ppn_reset_feature_shadow"
        ],
        "h2fmi_erase_blocks": [
            "h2fmi_erase_blocks",
            "sizeof",
            "sizeof",
            "h2fmi_rd",
            "h2fmi_set_if_ctrl",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wait_erase_status",
            "h2fmi_fail",
            "defined",
            "WMR_PRINT",
            "h2fmi_fail",
            "test",
            "h2fmi_fmc_enable_ce",
            "h2fmi_start_nand_block_erase",
            "h2fmi_fmc_enable_ce",
            "h2fmi_wait_erase_status",
            "h2fmi_fail",
            "defined",
            "WMR_PRINT",
            "h2fmi_fail",
            "h2fmi_set_if_ctrl",
            "h2fmi_fmc_disable_all_ces"
        ],
        "h2fmi_ppn_iop_reset_everything": [
            "h2fmi_ppn_iop_reset_everything",
            "h2fmi_restoreFmiRegs",
            "h2fmi_iop_reset_everything"
        ],
        "h2fmi_ppn_iop_erase_multiple": [
            "h2fmi_ppn_iop_erase_multiple",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_erase_blocks",
            "WMR_PREPARE_WRITE_BUFFER",
            "WMR_PRINT"
        ],
        "h2fmi_ppn_iop_erase_single": [
            "h2fmi_ppn_iop_erase_single",
            "WMR_MEMSET",
            "sizeof",
            "h2fmi_ppn_erase_blocks"
        ],
        "h2fmi_ppn_iop_read_single": [
            "h2fmi_ppn_iop_read_single",
            "mem_static_map_physical",
            "mem_static_map_physical",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "fmiss_ppn_read_multi",
            "h2fmi_ppn_read_multi"
        ],
        "h2fmi_ppn_iop_read_multiple": [
            "h2fmi_ppn_iop_read_multiple",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "h2fmi_setup_aes",
            "fmiss_ppn_read_multi",
            "h2fmi_ppn_read_multi",
            "WMR_PREPARE_WRITE_BUFFER"
        ],
        "h2fmi_ppn_iop_write_single": [
            "h2fmi_ppn_iop_write_single",
            "mem_static_map_physical",
            "mem_static_map_physical",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_MEMSET",
            "sizeof",
            "fmiss_ppn_write_multi",
            "h2fmi_ppn_write_multi"
        ],
        "h2fmi_ppn_iop_write_multiple": [
            "h2fmi_ppn_iop_write_multiple",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "sizeof",
            "h2fmi_setup_aes",
            "fmiss_ppn_write_multi",
            "h2fmi_ppn_write_multi",
            "WMR_PREPARE_WRITE_BUFFER"
        ],
        "h2fmi_ppn_iop_read_raw": [
            "h2fmi_ppn_iop_read_raw",
            "WMR_MEMSET"
        ],
        "h2fmi_ppn_iop_write_raw": [
            "h2fmi_ppn_iop_write_raw",
            "panic"
        ],
        "h2fmi_ppn_iop_read_bootpage": [
            "h2fmi_ppn_iop_read_bootpage",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "h2fmi_ppn_read_bootpage",
            "WMR_PREPARE_WRITE_BUFFER",
            "WMR_PREPARE_WRITE_BUFFER",
            "sizeof"
        ],
        "h2fmi_ppn_iop_write_bootpage": [
            "h2fmi_ppn_iop_write_bootpage",
            "mem_static_map_physical",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_write_bootpage"
        ],
        "h2fmi_ppn_iop_read_cau_bbt": [
            "h2fmi_ppn_iop_read_cau_bbt",
            "mem_static_map_cached",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "WMR_PREPARE_READ_BUFFER",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "h2fmi_ppn_read_cau_bbt",
            "WMR_PREPARE_WRITE_BUFFER",
            "WMR_PREPARE_WRITE_BUFFER"
        ],
        "h2fmi_ppn_iop_get_temperature": [
            "h2fmi_ppn_iop_get_temperature",
            "h2fmi_ppn15_get_temperature"
        ],
        "h2fmi_ppn_iop_get_controller_info": [
            "h2fmi_ppn_iop_get_controller_info",
            "h2fmi_ppn_get_fw_version",
            "h2fmi_ppn_get_package_assembly_code",
            "h2fmi_ppn_get_controller_unique_id",
            "h2fmi_ppn_get_controller_hw_id",
            "h2fmi_ppn_get_manufacturer_id",
            "h2fmi_ppn_get_device_params",
            "WMR_ASSERT",
            "h2fmi_ppn_get_marketing_name"
        ],
        "h2fmi_ppn_iop_get_die_info": [
            "h2fmi_ppn_iop_get_die_info",
            "h2fmi_ppn_get_uid",
            "h2fmi_ppn_get_die_chip_id"
        ],
        "h2fmi_ppn_iop_update_firmware": [
            "h2fmi_ppn_iop_update_firmware",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_get_fw_version",
            "h2fmi_ppn_fw_update"
        ],
        "h2fmi_ppn_iop_post_rst_pre_pwrstate_operations": [
            "h2fmi_ppn_iop_post_rst_pre_pwrstate_operations",
            "h2fmi_ppn_post_rst_pre_pwrstate_operations"
        ],
        "h2fmi_ppn_iop_set_power": [
            "h2fmi_ppn_iop_set_power",
            "h2fmi_ppn_set_channel_power_state"
        ],
        "h2fmi_ppn_iop_get_failure_info": [
            "h2fmi_ppn_iop_get_failure_info",
            "WMR_ASSERT",
            "mem_static_map_cached",
            "WMR_ASSERT",
            "WMR_PREPARE_READ_BUFFER",
            "h2fmi_ppn_get_general_error_info"
        ],
        "h2fmi_ppn_iop_set_feature_list": [
            "h2fmi_ppn_iop_set_feature_list",
            "mem_static_map_cached",
            "h2fmi_ppn_set_feature_list",
            "sizeof"
        ],
        "h2fmi_ppn_iop_power_state_changed": [
            "h2fmi_ppn_iop_power_state_changed",
            "h2fmi_ppn_verify_feature_shadow"
        ]
    },
    "drivers/apple/h2fmi/boot": {
        "nand_read_bootblock": [
            "nand_read_bootblock",
            "dprintf",
            "dprintf",
            "dprintf",
            "h2fmi_init_minimal",
            "dprintf",
            "h2fmi_nand_reset",
            "dprintf",
            "h2fmi_nand_read_id",
            "dprintf",
            "h2fmi_is_chipid_invalid",
            "dprintf",
            "dprintf",
            "h2fmi_pio_discard_bootpage",
            "dprintf",
            "dprintf",
            "h2fmi_pio_read_bootpage",
            "h2fmi_gate",
            "dprintf",
            "dprintf"
        ],
        "h2fmi_init_minimal": [
            "h2fmi_init_minimal",
            "h2fmi_fail",
            "h2fmi_ungate",
            "h2fmi_reset",
            "h2fmi_calc_init_timings"
        ],
        "h2fmi_is_chipid_invalid": [
            "h2fmi_is_chipid_invalid"
        ],
        "h2fmi_ungate": [
            "h2fmi_ungate",
            "clock_gate",
            "h2fmi_get_gate",
            "clock_gate",
            "h2fmi_get_bch_gate"
        ],
        "h2fmi_gate": [
            "h2fmi_gate",
            "clock_gate",
            "h2fmi_get_gate",
            "clock_gate",
            "h2fmi_get_bch_gate"
        ],
        "h2fmi_reset": [
            "h2fmi_reset",
            "clock_reset_device",
            "h2fmi_get_gate",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_calc_bus_timings": [
            "h2fmi_calc_bus_timings",
            "clock_get_frequency",
            "h2fmi_get_clock",
            "timing_nanos",
            "h2fmi_calc_timing_clocks",
            "h2fmi_calc_timing_clocks",
            "h2fmi_calc_read_capture",
            "FMC_IF_CTRL__DCCYCLE",
            "FMC_IF_CTRL__REB_SETUP",
            "FMC_IF_CTRL__REB_HOLD",
            "FMC_IF_CTRL__WEB_SETUP",
            "FMC_IF_CTRL__WEB_HOLD",
            "timing_nanos",
            "timing_nanos",
            "timing_nanos",
            "timing_nanos",
            "timing_nanos",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "h2fmi_wr"
        ],
        "h2fmi_wait_done": [
            "h2fmi_wait_done",
            "system_time",
            "h2fmi_rd",
            "time_has_elapsed",
            "h2fmi_fail",
            "task_yield",
            "h2fmi_wr"
        ],
        "h2fmi_wait_dma_task_pending": [
            "h2fmi_wait_dma_task_pending",
            "system_time",
            "FMI_DEBUG0__DMA_TASKS_PENDING",
            "h2fmi_rd",
            "time_has_elapsed",
            "h2fmi_fail",
            "task_yield"
        ],
        "h2fmi_config_page_addr": [
            "h2fmi_config_page_addr",
            "h2fmi_wr",
            "FMC_ADDR1__SEQ7",
            "FMC_ADDR1__SEQ6",
            "FMC_ADDR1__SEQ5",
            "FMC_ADDR1__SEQ4",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ3",
            "FMC_ADDR0__SEQ2",
            "FMC_ADDR0__SEQ1",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM"
        ],
        "h2fmi_clean_ecc": [
            "h2fmi_clean_ecc",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr",
            "h2fmi_wr"
        ],
        "h2fmi_fmc_read_data": [
            "h2fmi_fmc_read_data",
            "h2fmi_wr",
            "FMC_DATANUM__NUM",
            "h2fmi_wr",
            "h2fmi_rd",
            "h2fmi_wr"
        ],
        "h2fmi_nand_reset": [
            "h2fmi_nand_reset",
            "h2fmi_wr",
            "FMC_CE_CTRL__CEB",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_wait_millis",
            "h2fmi_wr"
        ],
        "h2fmi_nand_read_id": [
            "h2fmi_nand_read_id",
            "h2fmi_wr",
            "FMC_CE_CTRL__CEB",
            "h2fmi_wr",
            "FMC_CMD__CMD1",
            "h2fmi_wr",
            "FMC_ADDR0__SEQ0",
            "h2fmi_wr",
            "FMC_ADDRNUM__NUM",
            "h2fmi_wr",
            "h2fmi_wait_done",
            "h2fmi_fail",
            "h2fmi_fmc_read_data",
            "h2fmi_wr"
        ],
        "h2fmi_pio_read_sector": [
            "h2fmi_pio_read_sector",
            "h2fmi_wait_dma_task_pending",
            "h2fmi_fail",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd",
            "h2fmi_rd"
        ]
    },
    "drivers/apple/amp": {
        "amp_swizzle_init": [
            "amp_swizzle_init",
            "rAMP_CACALBYTESEL",
            "rAMP_CACALBYTESEL",
            "rAMP_CACALBITSELMAP",
            "rAMP_CACALBITSELMAP",
            "rAMP_CACALBITSELMAP",
            "rAMP_CACALBITSELMAP",
            "rAMP_CACALBITSELMAP",
            "rAMP_CACALBITSELMAP",
            "of"
        ],
        "amc_phy_init": [
            "amc_phy_init",
            "rAMP_DLLUPDTCTRL",
            "rAMP_DLLUPDTCTRL",
            "amc_phy_enable_dqs_pulldown",
            "amp_swizzle_init",
            "rAMP_AMPEN",
            "rAMP_AMPEN",
            "rAMP_DQDQSDS",
            "rAMP_NONDQDS",
            "rAMP_DIFFMODE_FREQ",
            "rAMP_RDDQDESKEW_CTRL",
            "rAMP_DLLLOCKTIM",
            "rAMP_DLLLOCKTIM",
            "rAMP_DQSINDLLSCL_FREQ",
            "rAMP_CAOUTDLLSCL_FREQ",
            "rAMP_RDCAPCFG_FREQ",
            "rAMP_DLLUPDTCTRL",
            "rAMP_DLLUPDTCTRL",
            "rAMP_IMPAUTOCAL",
            "rAMP_IMPAUTOCAL",
            "rAMP_IMPAUTOCAL",
            "rAMP_IMPAUTOCAL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_MDLLFREQBINDISABLE",
            "rAMP_MDLLFREQBINDISABLE",
            "rAMP_DLLUPDTINTVL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_MDLLFREQBINDISABLE",
            "rAMP_MDLLFREQBINDISABLE",
            "rAMP_DLLEN",
            "rAMP_DLLEN",
            "rAMP_DLLEN",
            "rAMP_DLLEN",
            "rAMP_DLLEN",
            "rAMP_DLLEN",
            "amc_phy_run_dll_update",
            "rAMP_AMPINIT",
            "rAMP_AMPINIT",
            "rAMP_IMPCALCMD",
            "rAMP_IMPCALCMD",
            "rAMP_IMPCALCMD",
            "rAMP_IMPCALCMD",
            "spin",
            "save_restore_ca_wrlvl_regs"
        ],
        "amc_phy_enable_dqs_pulldown": [
            "amc_phy_enable_dqs_pulldown"
        ],
        "amc_phy_scale_dll": [
            "amc_phy_scale_dll"
        ],
        "amc_phy_run_dll_update": [
            "amc_phy_run_dll_update",
            "rAMP_DLLUPDTCMD",
            "rAMP_DLLUPDTCMD",
            "rAMP_DLLUPDTCMD",
            "rAMP_DLLUPDTCMD"
        ],
        "amc_phy_bypass_prep": [
            "amc_phy_bypass_prep"
        ],
        "amc_phy_finalize": [
            "amc_phy_finalize"
        ],
        "amc_phy_calibration_ca_rddq_cal": [
            "amc_phy_calibration_ca_rddq_cal",
            "panic",
            "hwloops",
            "swloops",
            "amc_calibration_start",
            "calibrate_ca",
            "calibrate_rddq",
            "calibrate_wrlvl",
            "save_restore_ca_wrlvl_regs",
            "amc_calibration_start"
        ],
        "amc_phy_calibration_wrdq_cal": [
            "amc_phy_calibration_wrdq_cal",
            "save_restore_memory_region",
            "amc_calibration_start",
            "amc_wrdqcal_start",
            "calibrate_wrdq",
            "calibrate_rddq",
            "amc_wrdqcal_start",
            "amc_calibration_start",
            "save_restore_memory_region",
            "rAMP_DLLUPDTINTVL",
            "rAMP_DLLUPDTINTVL",
            "rAMP_AMPCLK",
            "rAMP_AMPCLK"
        ],
        "amc_phy_rddq_cal": [
            "amc_phy_rddq_cal"
        ],
        "amc_phy_reset_fifos": [
            "amc_phy_reset_fifos"
        ],
        "amc_phy_calibration_init": [
            "amc_phy_calibration_init",
            "amc_get_memory_device_info",
            "AMP_INDEX_FOR_CHANNEL",
            "rAMP_DLLUPDTCTRL",
            "rAMP_DLLUPDTCTRL",
            "rAMP_MDLLCODE",
            "rAMP_CALPATCFG",
            "rAMP_DQTRNCFG",
            "rAMP_CALDQMSK",
            "rAMP_CALDQMSK"
        ],
        "amc_phy_set_addr_offset": [
            "amc_phy_set_addr_offset",
            "rAMP_CAOUTDLLOVRRD",
            "AMP_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_set_rd_offset": [
            "amc_phy_set_rd_offset",
            "rAMP_DQSINDLLOVRRD",
            "AMP_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_set_wr_offset": [
            "amc_phy_set_wr_offset",
            "rAMP_DQOUTDLLOVRRD",
            "AMP_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_run_dq_training": [
            "amc_phy_run_dq_training",
            "AMP_INDEX_FOR_CHANNEL",
            "amc_phy_run_dll_update",
            "rAMP_DQTRNCMD",
            "rAMP_DQTRNCMD"
        ],
        "amc_phy_get_dq_training_status": [
            "amc_phy_get_dq_training_status",
            "rAMP_DQTRNSTS",
            "AMP_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_configure_dll_pulse_mode": [
            "amc_phy_configure_dll_pulse_mode",
            "AMP_INDEX_FOR_CHANNEL",
            "rAMP_DLLUPDTCTRL",
            "rAMP_DLLUPDTCTRL",
            "amc_phy_run_dll_update"
        ],
        "amc_phy_shift_dq_offset": [
            "amc_phy_shift_dq_offset",
            "amc_dram_shift_dq_offset"
        ]
    },
    "drivers/apple/amp/include/drivers/amp": {},
    "drivers/apple/dither": {
        "dither_set_enable": [
            "dither_set_enable"
        ]
    },
    "drivers/apple/consistent_debug": {
        "consistent_debug_resume": [
            "consistent_debug_resume",
            "scratch",
            "dprintf",
            "consistent_debug_ensure_visibility",
            "consistent_debug_register_root_pointer"
        ],
        "consistent_debug_init": [
            "consistent_debug_init",
            "dprintf",
            "sizeof",
            "init_consistent_debug_registry",
            "mem_static_map_physical",
            "sizeof",
            "consistent_debug_update_ap_cpr",
            "consistent_debug_register_header",
            "dprintf",
            "consistent_debug_register_header",
            "RELEASE_ASSERT",
            "consistent_debug_ensure_visibility",
            "consistent_debug_register_root_pointer"
        ],
        "consistent_debug_get_registry": [
            "consistent_debug_get_registry"
        ],
        "consistent_debug_update_ap_cpr": [
            "consistent_debug_update_ap_cpr",
            "enter_critical_section",
            "dprintf",
            "consistent_debug_ensure_visibility",
            "timer_get_ticks",
            "consistent_debug_ensure_visibility",
            "exit_critical_section",
            "dprintf",
            "d"
        ],
        "consistent_debug_register_header": [
            "consistent_debug_register_header",
            "consistent_debug_allocate_entry",
            "consistent_debug_ensure_visibility",
            "consistent_debug_ensure_visibility"
        ],
        "consistent_debug_unregister_header": [
            "consistent_debug_unregister_header"
        ]
    },
    "drivers/apple/consistent_debug/include/consistent_debug": {},
    "drivers/apple/adfe": {
        "adfe_init": [
            "adfe_init",
            "env_get",
            "strcmp",
            "dprintf",
            "adfe_init",
            "adfe_enable_error_handler",
            "DPCPFDMA_WATERMARK",
            "panic",
            "DPCPANCNFG_PANTIMER",
            "panic",
            "rDPBCSCCOEFR",
            "rDPBCSCCOEFG",
            "rDPBCSCCOEFB",
            "rDPCWBSTRD",
            "rDPUSRCSTRD",
            "rDPUREQCFG",
            "rDPUREQCFG",
            "rDPVREQCFG",
            "rDPVREQCFG",
            "rDPVSRCSTRD",
            "rDPCWBSTRD",
            "rDPUSRCSTRD",
            "rDPUREQCFG",
            "rDPUREQCFG",
            "rDPVREQCFG",
            "rDPVREQCFG",
            "rDPVSRCSTRD",
            "panic"
        ],
        "adfe_set_ui_layer": [
            "adfe_set_ui_layer",
            "RELEASE_ASSERT",
            "panic",
            "rDPUSRCFMT",
            "layer",
            "rDPUSRCBASE",
            "rDPUSRCSTRD",
            "rDPUSRCSTRD",
            "rDPUSRCXY",
            "rDPUSRCWH",
            "rDPUDSTXY",
            "rDPUDSTWH",
            "rDPUSRCRGN",
            "rDPUMMUCNTL",
            "scaling",
            "rDPUDDAINITX",
            "rDPUDDAINITY",
            "rDPUDDASTEPX",
            "rDPUDDASTEPY",
            "rDPUMMUCNTL",
            "rDPUSRCSTRXY",
            "rDPUSRCENDXY",
            "rDPUSRCRGNENAB",
            "rDPUCLKLVL",
            "rDPUPANLVL"
        ],
        "adfe_enable_error_handler": [
            "adfe_enable_error_handler",
            "install_int_handler",
            "unmask_int"
        ],
        "adfe_disable_error_handler": [
            "adfe_disable_error_handler",
            "mask_int"
        ],
        "adfe_set_background_color": [
            "adfe_set_background_color"
        ],
        "adfe_activate_window": [
            "adfe_activate_window"
        ],
        "adfe_get_enable": [
            "adfe_get_enable"
        ]
    },
    "drivers/apple/adfe/include/drivers/adfe": {},
    "drivers/apple/iic": {
        "iic_init": [
            "iic_init",
            "dprintf",
            "iic_init",
            "iic_setup",
            "get_iic_device"
        ],
        "iic_set_filter": [
            "iic_set_filter",
            "rFILTER"
        ],
        "iic_set_frequency": [
            "iic_set_frequency",
            "get_iic_device",
            "iic_set_clock"
        ],
        "iic_read": [
            "iic_read",
            "get_iic_device",
            "task_yield",
            "combined",
            "rSMSTA",
            "enter_critical_section",
            "kS5L8940XIICMTXFIFOData",
            "rMTXFIFO",
            "kS5L8940XIICMTXFIFOData",
            "rMTXFIFO",
            "exit_critical_section",
            "enter_critical_section",
            "rMTXFIFO",
            "kS5L8940XIICMTXFIFOData",
            "rMTXFIFO",
            "kS5L8940XIICMTXFIFOData",
            "exit_critical_section",
            "rMRXFIFO",
            "rSMSTA",
            "dprintf",
            "iic_read",
            "rCTL",
            "rCTL",
            "rSMSTA",
            "kS5L8940XIICMRXFIFOData"
        ],
        "iic_write": [
            "iic_write",
            "get_iic_device",
            "task_yield",
            "rSMSTA",
            "enter_critical_section",
            "rMTXFIFO",
            "kS5L8940XIICMTXFIFOData",
            "kS5L8940XIICMTXFIFOData",
            "rMTXFIFO",
            "exit_critical_section",
            "SPIN_W_TMO_WHILE",
            "rSMSTA",
            "rSMSTA",
            "dprintf",
            "iic_write",
            "rCTL",
            "rCTL",
            "rSMSTA"
        ],
        "iic_probe": [
            "iic_probe"
        ]
    },
    "drivers/apple/gpio": {
        "gpio_read": [
            "gpio_read",
            "GPIO2CONTROLLER",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_read",
            "rGPIOCFG"
        ],
        "gpio_write": [
            "gpio_write",
            "GPIO2CONTROLLER",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_write",
            "rGPIOCFG",
            "rGPIOCFG"
        ],
        "gpio_safe_reconfigure": [
            "gpio_safe_reconfigure",
            "rGPIOCFG",
            "rGPIOCFG",
            "rGPIOCFG",
            "rGPIOCFG"
        ],
        "gpio_configure": [
            "gpio_configure",
            "GPIO2CONTROLLER",
            "GPIO2PAD",
            "GPIO2PIN",
            "defined",
            "spi_gpio_configure",
            "platform_get_default_gpio_cfg",
            "gpio_safe_reconfigure",
            "rGPIOCFG"
        ],
        "gpio_configure_pupdn": [
            "gpio_configure_pupdn",
            "GPIO2CONTROLLER",
            "GPIO2PAD",
            "GPIO2PIN",
            "rGPIOCFG",
            "rGPIOCFG"
        ],
        "gpio_init_pinconfig": [
            "gpio_init_pinconfig",
            "platform_get_default_gpio_cfg",
            "gpio_safe_reconfigure",
            "rGPIO_SR_EN",
            "rGPIO_SR_EN",
            "rGPIO_FMI_DIFF_SEL",
            "rGPIO_NPL_IN_EN",
            "rGPIO_MISC_CTRL"
        ],
        "gpio_fixup_pinconfig": [
            "gpio_fixup_pinconfig",
            "GPIO2CONTROLLER",
            "GPIO2PAD",
            "GPIO2PIN",
            "gpio_safe_reconfigure"
        ],
        "gpio_init_memory": [
            "gpio_init_memory",
            "sizeof",
            "sizeof",
            "GPIO2PAD",
            "GPIO2PIN",
            "gpio_safe_reconfigure"
        ],
        "gpio_get_board_id": [
            "gpio_get_board_id",
            "RELEASE_ASSERT",
            "rGPIO_PINSTRAPS_VALID",
            "MINIPMGR_SECURITY_GPIO_STRAPS_BOARD_ID_XTRCT",
            "panic",
            "gpio_get_board_id"
        ],
        "gpio_diag_pinconfig": [
            "gpio_diag_pinconfig"
        ]
    },
    "drivers/apple/gpio/include/drivers/apple": {},
    "drivers/apple/aes_v2": {
        "command_fifo_level": [
            "command_fifo_level"
        ],
        "push_commands": [
            "push_commands",
            "sizeof",
            "sizeof",
            "command_fifo_level",
            "dprintf"
        ],
        "key_size": [
            "key_size",
            "panic"
        ],
        "push_command_key": [
            "push_command_key",
            "memset",
            "sizeof",
            "key",
            "key_size",
            "memcpy",
            "push_commands",
            "sizeof",
            "push_commands",
            "push_commands",
            "sizeof"
        ],
        "push_command_iv": [
            "push_command_iv",
            "memset",
            "sizeof",
            "memcpy",
            "sizeof",
            "push_commands",
            "sizeof"
        ],
        "push_command_data": [
            "push_command_data",
            "memset",
            "sizeof",
            "push_commands",
            "sizeof"
        ],
        "push_command_flag": [
            "push_command_flag",
            "push_commands",
            "sizeof"
        ],
        "create_key_command": [
            "create_key_command"
        ],
        "wait_for_command_flag": [
            "wait_for_command_flag",
            "dprintf",
            "dprintf",
            "dprintf",
            "panic"
        ],
        "aes_hw_crypto_cmd": [
            "aes_hw_crypto_cmd",
            "dprintf",
            "clock_gate",
            "dpa_seeded",
            "sep_client_seed_aes",
            "dpa_seeded",
            "panic",
            "platform_keys_disabled",
            "platform_keys_disabled",
            "platform_keys_disabled",
            "dprintf",
            "create_key_command",
            "dprintf",
            "platform_memory_barrier",
            "dprintf",
            "platform_cache_operation",
            "ROUNDUP",
            "push_command_key",
            "platform_cache_operation",
            "ROUNDUP",
            "push_command_iv",
            "platform_cache_operation",
            "ROUNDUP",
            "push_command_data",
            "push_command_flag",
            "wait_for_command_flag",
            "platform_memory_barrier",
            "platform_cache_operation",
            "ROUNDUP",
            "dprintf",
            "clock_gate",
            "panic"
        ]
    },
    "drivers/apple/dpb_v2": {
        "dpb_init": [
            "dpb_init",
            "DPB"
        ],
        "dpb_install_gamma_table": [
            "dpb_install_gamma_table"
        ]
    },
    "drivers/apple/aes_s7002": {
        "aes_execute_cmd": [
            "aes_execute_cmd",
            "event_init",
            "dma_execute_async",
            "event_wait",
            "dma_execute_async"
        ],
        "aes_hw_crypto_cmd": [
            "aes_hw_crypto_cmd",
            "dprintf",
            "clock_gate",
            "platform_keys_disabled",
            "platform_keys_disabled",
            "platform_keys_disabled",
            "dprintf",
            "dprintf",
            "platform_cache_operation",
            "ROUNDUP",
            "aes_execute_cmd",
            "platform_cache_operation",
            "ROUNDUP",
            "aes_execute_cmd",
            "_load_input_block",
            "_load_input_block",
            "_store_output_block",
            "_store_output_block",
            "clock_gate",
            "panic"
        ],
        "_load_input_block": [
            "_load_input_block",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "_store_output_block": [
            "_store_output_block",
            "dprintf",
            "dprintf",
            "dprintf"
        ]
    },
    "drivers/apple/apcie": {
        "apcie_config_read_raw": [
            "apcie_config_read_raw",
            "dprintf",
            "panic",
            "dprintf"
        ],
        "apcie_config_write_raw": [
            "apcie_config_write_raw",
            "dprintf",
            "dprintf",
            "dprintf",
            "panic"
        ],
        "apcie_setup_root_port_bridge": [
            "apcie_setup_root_port_bridge",
            "dprintf",
            "pci_bridge_probe",
            "panic",
            "pci_get_header_type",
            "panic",
            "d",
            "pci_bridge_assign_secondary_bus",
            "pci_bus_master_enable",
            "pci_memory_space_enable",
            "pci_bridge_serr_enable"
        ],
        "apcie_disable_all": [
            "apcie_disable_all",
            "apcie_disable_link"
        ],
        "apcie_init": [
            "apcie_init",
            "platform_map_host_to_pci_addr",
            "pci_create_host_bridge"
        ],
        "apcie_get_port_bridge": [
            "apcie_get_port_bridge"
        ],
        "apcie_free_port_bridge": [
            "apcie_free_port_bridge",
            "pci_free"
        ]
    },
    "drivers/apple/aic": {
        "interrupt_init": [
            "interrupt_init",
            "_aic_init",
            "interrupt_mask_all",
            "exit_critical_section"
        ],
        "interrupt_mask_all": [
            "interrupt_mask_all",
            "rAIC_EIR_MASK_SET"
        ],
        "mask_int": [
            "mask_int",
            "_aic_mask_int_internal"
        ],
        "unmask_int": [
            "unmask_int",
            "_aic_unmask_int_internal"
        ],
        "set_int_type": [
            "set_int_type",
            "enter_critical_section",
            "_aic_read_reg",
            "panic",
            "_aic_write_reg",
            "AIC_TMRCFG_FSL",
            "arm_enable_fiqs",
            "_aic_write_reg",
            "AIC_TMRCFG_FSL",
            "arm_enable_fiqs",
            "_aic_write_reg",
            "_aic_read_reg",
            "_aic_write_reg",
            "_aic_read_reg",
            "panic",
            "exit_critical_section"
        ],
        "install_int_handler": [
            "install_int_handler",
            "enter_critical_section",
            "rAIC_EIR_DEST",
            "exit_critical_section"
        ],
        "platform_irq": [
            "platform_irq",
            "rAIC_EIR_INT_RO",
            "rAIC_EIR_MASK_CLR",
            "_aic_read_reg",
            "panic",
            "printf",
            "AIC_INT_EXT",
            "AIC_INT_EXTID",
            "AIC_INT_IPI",
            "panic",
            "_aic_write_reg",
            "panic",
            "handler",
            "_aic_unmask_int_internal",
            "_aic_read_reg"
        ],
        "platform_fiq": [
            "platform_fiq",
            "_aic_write_reg",
            "panic",
            "handler",
            "_aic_unmask_int_internal"
        ],
        "interrupt_generate_ipc": [
            "interrupt_generate_ipc",
            "AIC_SRC_TO_EIR",
            "rAIC_EIR_SW_SET",
            "AIC_SRC_TO_MASK"
        ],
        "interrupt_clear_ipc": [
            "interrupt_clear_ipc",
            "AIC_SRC_TO_EIR",
            "rAIC_EIR_SW_CLR",
            "AIC_SRC_TO_MASK"
        ],
        "timer_init": [
            "timer_init",
            "_aic_write_reg",
            "install_int_handler",
            "unmask_int"
        ],
        "timer_stop_all": [
            "timer_stop_all",
            "_aic_write_reg",
            "_aic_read_reg"
        ],
        "aic_get_ticks": [
            "aic_get_ticks"
        ],
        "aic_spin": [
            "aic_spin"
        ],
        "timer_ticks_to_usecs": [
            "timer_ticks_to_usecs"
        ],
        "timer_usecs_to_ticks": [
            "timer_usecs_to_ticks"
        ],
        "timer_get_tick_rate": [
            "timer_get_tick_rate"
        ],
        "timer_get_ticks": [
            "timer_get_ticks",
            "aic_get_ticks"
        ],
        "timer_get_entropy": [
            "timer_get_entropy",
            "arch_get_entropy"
        ],
        "wdt_chip_reset": [
            "wdt_chip_reset"
        ],
        "wdt_enable": [
            "wdt_enable"
        ],
        "wdt_system_reset": [
            "wdt_system_reset"
        ]
    },
    "drivers/apple/aic/include/drivers/aic": {},
    "drivers/apple/dockfifo": {
        "cobs_encode": [
            "cobs_encode",
            "dprintf",
            "dprintf"
        ],
        "cobs_decode": [
            "cobs_decode",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "main": [
            "main",
            "printf",
            "test_case",
            "sizeof",
            "test_case",
            "sizeof",
            "sizeof",
            "test_case",
            "sizeof",
            "sizeof",
            "memset",
            "sizeof",
            "memset",
            "sizeof",
            "sizeof",
            "test_case",
            "sizeof",
            "sizeof",
            "memset",
            "sizeof",
            "sizeof",
            "memset",
            "sizeof",
            "sizeof",
            "sizeof",
            "test_case",
            "sizeof",
            "sizeof",
            "printf"
        ],
        "dockfifo_bulk_read_frame": [
            "dockfifo_bulk_read_frame",
            "dockfifo_bulk_read_byte",
            "dprintf",
            "dprintf",
            "dockfifo_bulk_read_byte",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "cobs_decode",
            "sizeof",
            "dprintf",
            "dprintf",
            "dprintf",
            "crc32",
            "read_le_32",
            "dprintf",
            "dprintf",
            "memcpy"
        ],
        "dockfifo_bulk_write_frame": [
            "dockfifo_bulk_write_frame",
            "sizeof",
            "dprintf",
            "memcpy",
            "crc32",
            "write_le_32",
            "cobs_encode",
            "sizeof",
            "dprintf",
            "dprintf",
            "dprintf",
            "dockfifo_bulk_write_byte",
            "dprintf",
            "dockfifo_bulk_write_bytes",
            "dprintf",
            "dockfifo_bulk_write_byte"
        ],
        "dockfifo_bulk_init": [
            "dockfifo_bulk_init",
            "dprintf",
            "cb_create",
            "clock_gate",
            "clock_gate",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "spin",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "event_init",
            "dprintf",
            "install_int_handler",
            "platform_dockfifo_access_enable",
            "platform_dockfifo_access_enable"
        ],
        "dockfifo_bulk_quiesce": [
            "dockfifo_bulk_quiesce",
            "dprintf",
            "mask_int",
            "platform_dockfifo_access_enable",
            "platform_dockfifo_access_enable",
            "cb_reset",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "spin",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "clock_gate",
            "clock_gate"
        ],
        "dockfifo_uart_init": [
            "dockfifo_uart_init",
            "clock_gate",
            "clock_gate",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "spin",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_CNFG",
            "rDBGFIFO_DRAIN",
            "rDBGFIFO_R_DATA",
            "rDBGFIFO_W_STAT",
            "cb_create",
            "event_init",
            "install_int_handler",
            "unmask_int",
            "task_start",
            "task_create"
        ],
        "dockfifo_uart_putc": [
            "dockfifo_uart_putc",
            "dockfifo_uart_write"
        ],
        "dockfifo_enable_clock_gating": [
            "dockfifo_enable_clock_gating",
            "rDBGFIFO_CNFG"
        ]
    },
    "drivers/apple/dockfifo/include/drivers/dockfifo": {},
    "drivers/apple/mcu": {
        "mcu_init": [
            "mcu_init",
            "uart_hw_init_extended",
            "uart_hw_set_rx_buf",
            "panic",
            "mcu_init",
            "uart_send_break",
            "task_sleep",
            "uart_send_break",
            "event_init",
            "event_init",
            "event_init",
            "task_start",
            "task_create",
            "mcu_get_version",
            "sizeof",
            "mcu_set_sil",
            "dprintf",
            "dprintf",
            "mcu_init"
        ],
        "mcu_start_recover": [
            "mcu_start_recover",
            "event_wait",
            "mcu_set_sil",
            "event_signal"
        ],
        "mcu_start_boot": [
            "mcu_start_boot",
            "event_wait",
            "mcu_set_sil",
            "event_signal"
        ],
        "mcu_set_passthrough_mode": [
            "mcu_set_passthrough_mode",
            "event_wait",
            "mcu_set_bs",
            "mcu_set_bs",
            "mcu_set_bs",
            "dprintf",
            "event_signal"
        ],
        "mcu_send_info_frames": [
            "mcu_send_info_frames",
            "event_wait",
            "mcu_set_bs",
            "event_signal",
            "dprintf"
        ],
        "mcu_quiesce_uart": [
            "mcu_quiesce_uart",
            "uart_hw_set_rx_buf",
            "panic"
        ]
    },
    "drivers/apple/voltage_knobs": {
        "knobs_store_knob_in_NVRAM": [
            "knobs_store_knob_in_NVRAM",
            "knobs_remove_knob_from_NVRAM",
            "env_get",
            "snprintf",
            "sizeof",
            "strlen",
            "strlen",
            "malloc",
            "strlcpy",
            "strlcat",
            "env_set",
            "nvram_save",
            "free"
        ],
        "knobs_remove_knob_from_NVRAM": [
            "knobs_remove_knob_from_NVRAM",
            "env_get",
            "strstr",
            "strdup",
            "strstr",
            "strlen",
            "strlcat",
            "strlen",
            "strlen",
            "env_set",
            "nvram_save",
            "free"
        ],
        "knobs_load_knob_from_NVRAM": [
            "knobs_load_knob_from_NVRAM",
            "env_get",
            "strstr",
            "strstr",
            "strdup",
            "strstr",
            "atoi",
            "atoi",
            "free"
        ],
        "knobs_prepare_standby_storage": [
            "knobs_prepare_standby_storage",
            "printf",
            "power_store_voltage_knobs"
        ],
        "knobs_update_PMU_registers": [
            "knobs_update_PMU_registers",
            "printf",
            "snprintf",
            "sizeof",
            "knobs_load_knob_from_NVRAM",
            "power_store_voltage_knobs",
            "sizeof",
            "sizeof",
            "knobs_load_from_standby_storage"
        ],
        "get_bit": [
            "get_bit"
        ],
        "get_knob_bits": [
            "get_knob_bits",
            "check",
            "check",
            "check"
        ],
        "knobs_load_from_standby_storage": [
            "knobs_load_from_standby_storage",
            "power_load_voltage_knobs",
            "get_bit",
            "get_knob_bits",
            "knobs_platform_get_cpu_perf_voltage",
            "knobs_platform_set_cpu_perf_voltage",
            "get_knob_bits",
            "knobs_platform_get_gfx_perf_voltage",
            "knobs_platform_set_gfx_perf_voltage",
            "get_knob_bits",
            "knobs_platform_get_soc_perf_voltage",
            "knobs_platform_set_soc_perf_voltage",
            "get_knob_bits",
            "knobs_pmu_set_data",
            "knobs_get_default_val",
            "knobs_pmu_set_data",
            "check"
        ],
        "knobs_get_default_val": [
            "knobs_get_default_val",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "__min",
            "platform_get_gpu_voltages",
            "platform_convert_voltages",
            "knobs_convert_mv_to_dwi",
            "platform_get_base_ram_voltage"
        ],
        "knobs_platform_get_gfx_perf_voltage": [
            "knobs_platform_get_gfx_perf_voltage",
            "rPMGR_GFX_PERF_STATE_ENTRY"
        ],
        "knobs_platform_set_gfx_perf_voltage": [
            "knobs_platform_set_gfx_perf_voltage",
            "rPMGR_GFX_PERF_STATE_ENTRY",
            "rPMGR_GFX_PERF_STATE_ENTRY"
        ],
        "knobs_platform_get_cpu_perf_voltage": [
            "knobs_platform_get_cpu_perf_voltage",
            "rCCC_DVFM_ST"
        ],
        "knobs_platform_set_cpu_perf_voltage": [
            "knobs_platform_set_cpu_perf_voltage",
            "rCCC_DVFM_ST",
            "rCCC_DVFM_ST",
            "CCC_DVFM_ST_SAFEVOL"
        ],
        "knobs_platform_get_soc_perf_voltage": [
            "knobs_platform_get_soc_perf_voltage",
            "rPMGR_SOC_PERF_STATE_ENTRY_C"
        ],
        "knobs_platform_set_soc_perf_voltage": [
            "knobs_platform_set_soc_perf_voltage",
            "rPMGR_SOC_PERF_STATE_ENTRY_C"
        ],
        "knobs_pmu_set_data": [
            "knobs_pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data"
        ],
        "knobs_convert_dwi_to_mv": [
            "knobs_convert_dwi_to_mv",
            "KNOBS_BUCK3_BUCKMV",
            "power_convert_dwi_to_mv",
            "power_convert_dwi_to_mv"
        ],
        "knobs_convert_mv_to_dwi": [
            "knobs_convert_mv_to_dwi",
            "KNOBS_BUCK3_BUCKOUT",
            "power_get_buck_value",
            "power_get_buck_value"
        ],
        "knob_type_by_name": [
            "knob_type_by_name",
            "strcmp"
        ]
    },
    "drivers/apple/voltage_knobs/include/drivers/voltage_knobs": {},
    "drivers/apple/swifterpmu": {
        "charger_has_usb": [
            "charger_has_usb"
        ],
        "charger_has_firewire": [
            "charger_has_firewire"
        ],
        "charger_has_external": [
            "charger_has_external"
        ],
        "charger_has_batterypack": [
            "charger_has_batterypack"
        ],
        "charger_clear_usb_state": [
            "charger_clear_usb_state"
        ],
        "charger_get_max_charge_current": [
            "charger_get_max_charge_current"
        ],
        "charger_set_charging": [
            "charger_set_charging"
        ],
        "charger_clear_alternate_usb_current_limit": [
            "charger_clear_alternate_usb_current_limit"
        ],
        "charger_read_battery_level": [
            "charger_read_battery_level"
        ],
        "charger_charge_done": [
            "charger_charge_done"
        ],
        "power_clr_events": [
            "power_clr_events"
        ],
        "pmu_read_brick_id_level": [
            "pmu_read_brick_id_level"
        ],
        "power_get_rail_value": [
            "power_get_rail_value"
        ],
        "power_get_buck_value": [
            "power_get_buck_value"
        ],
        "power_convert_dwi_to_mv": [
            "power_convert_dwi_to_mv"
        ],
        "pmu_early_init": [
            "pmu_early_init",
            "event",
            "read_pmu",
            "dprintf"
        ],
        "pmu_setup": [
            "pmu_setup"
        ],
        "pmu_late_init": [
            "pmu_late_init"
        ],
        "pmu_check_events": [
            "pmu_check_events"
        ],
        "power_get_boot_flag": [
            "power_get_boot_flag"
        ],
        "pmu_will_resume": [
            "pmu_will_resume",
            "use",
            "power_set_nvram"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "pmu_set_backlight_enable": [
            "pmu_set_backlight_enable"
        ],
        "power_get_nvram": [
            "power_get_nvram",
            "read_pmu"
        ],
        "power_set_nvram": [
            "power_set_nvram",
            "write_pmu"
        ],
        "pmu_shutdown": [
            "pmu_shutdown",
            "write_pmu"
        ],
        "pmu_suspend": [
            "pmu_suspend",
            "write_pmu"
        ],
        "power_get_calendar_time": [
            "power_get_calendar_time"
        ],
        "charger_print_status": [
            "charger_print_status"
        ]
    },
    "drivers/apple/lpdp_phy": {
        "lpdp_init": [
            "lpdp_init",
            "per",
            "FindNode",
            "FindProperty",
            "strcmp",
            "strcmp",
            "panic",
            "panic",
            "FindProperty",
            "sizeof",
            "sizeof",
            "debug",
            "bcopy",
            "panic",
            "debug",
            "assert",
            "read_reg",
            "assert",
            "read_reg",
            "read_reg"
        ],
        "lpdp_initialize_phy_and_pll": [
            "lpdp_initialize_phy_and_pll",
            "or_reg",
            "set_lane_adjustment_levels",
            "set_aux_voltage_swing",
            "set_phy_configure_ldos",
            "set_lane_adjustment_levels",
            "set_aux_voltage_swing",
            "write_reg",
            "write_reg",
            "write_reg",
            "or_reg",
            "set_bias_power_enable",
            "set_lane_power_enable",
            "enable_phy_ldos",
            "set_aux_power_enable",
            "and_reg",
            "LPDP_PHY_BIST_LOOPBACK_SRC_SEL",
            "spin",
            "spin",
            "write_reg",
            "and_reg",
            "and_reg",
            "spin",
            "lpdp_phy_impedance_calibration",
            "panic",
            "set_lane_power_controls",
            "lpdp_set_link_rate",
            "write_reg"
        ],
        "lpdp_init_finalize": [
            "lpdp_init_finalize",
            "and_reg"
        ],
        "lpdp_quiesce": [
            "lpdp_quiesce",
            "set_lane_power_enable",
            "set_aux_power_enable",
            "set_bias_power_enable",
            "lpdp_power_pll"
        ],
        "lpdp_set_link_rate": [
            "lpdp_set_link_rate",
            "debug",
            "or_reg",
            "or_reg",
            "lpdp_power_pll",
            "update_pll_dividers",
            "lpdp_power_pll",
            "lpdp_power_pll"
        ],
        "lpdp_get_link_rate": [
            "lpdp_get_link_rate"
        ],
        "lpdp_phy_set_adjustment_levels": [
            "lpdp_phy_set_adjustment_levels",
            "debug",
            "set_lane_adjustment_levels",
            "set_lane_adjustment_levels",
            "set_lane_adjustment_levels",
            "set_lane_adjustment_levels"
        ],
        "lpdp_phy_reset": [
            "lpdp_phy_reset",
            "lpdp_phy_impedance_calibration"
        ],
        "lpdp_get_supports_downspread": [
            "lpdp_get_supports_downspread"
        ],
        "lpdp_set_downspread": [
            "lpdp_set_downspread"
        ],
        "lpdp_get_downspread": [
            "lpdp_get_downspread"
        ],
        "lpdp_phy_get_adjustment_levels": [
            "lpdp_phy_get_adjustment_levels"
        ],
        "lpdp_phy_set_lane_count": [
            "lpdp_phy_set_lane_count",
            "set_lane_power_controls",
            "set_lane_power_controls"
        ],
        "lpdp_phy_update_device_tree": [
            "lpdp_phy_update_device_tree",
            "FindProperty",
            "FindProperty",
            "memset",
            "strlen",
            "panic",
            "snprintf",
            "strlen",
            "panic",
            "snprintf",
            "panic",
            "FindProperty",
            "memset",
            "sizeof",
            "sizeof",
            "panic",
            "bcopy",
            "panic"
        ],
        "lpdp_phy_configure_alpm": [
            "lpdp_phy_configure_alpm",
            "and_reg",
            "write_reg",
            "LPDP_GEN_SEQ_1_START_COUNT",
            "or_reg",
            "LPDP_GEN_SEQ_1_SETUP_COUNT",
            "write_reg",
            "write_reg",
            "write_reg",
            "LPDP_GEN_SEQ_4_HOLD_COUNT",
            "write_reg",
            "LPDP_GEN_SEQ_5_FINISH_COUNT",
            "or_reg",
            "LPDP_GEN_SEQ_4_UPDATE_COUNT",
            "write_reg",
            "LPDP_GEN_SEQ_5_WAKEUP_COUNT"
        ]
    },
    "drivers/apple/lpdp_phy/include/drivers/lpdp_phy": {},
    "drivers/apple/csi": {
        "csi_init": [
            "csi_init",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "bi_ep_mgmt_create",
            "bi_ep_crashlog_create",
            "bi_ep_console_create",
            "bi_ep_syslog_create",
            "fw_fixup_and_relocate",
            "CSI_LOG",
            "fw_fixup_and_relocate",
            "error",
            "CSI_STATUS_STR",
            "csi_start",
            "event_init"
        ],
        "csi_start": [
            "csi_start",
            "akf_start",
            "KFW",
            "CSI_LOG",
            "akf_start",
            "csi_clr_feature",
            "CSI_LOG",
            "llx",
            "csi_get_feature",
            "task_start",
            "task_create",
            "task_yield"
        ],
        "csi_panic_recover": [
            "csi_panic_recover",
            "csi_stop",
            "handle_power_state_ack",
            "clock_reset_device",
            "task_yield",
            "fw_fixup_and_relocate",
            "CSI_LOG",
            "fw_fixup_and_relocate",
            "error",
            "CSI_STATUS_STR",
            "csi_start"
        ],
        "csi_late_init": [
            "csi_late_init",
            "env_get",
            "strstr",
            "strlen",
            "bi_ep_syslog_verbosity"
        ],
        "csi_stop": [
            "csi_stop",
            "akf_stop",
            "KFW"
        ],
        "csi_quiesce": [
            "csi_quiesce",
            "hibernate_iop"
        ],
        "request_iop_power_state": [
            "request_iop_power_state",
            "signaled",
            "event_unsignal",
            "bi_ep_mgmt_send_ps",
            "event_wait",
            "bi_ep_mgmt_get_power_state"
        ],
        "quiesce_iop": [
            "quiesce_iop",
            "request_iop_power_state",
            "CSI_LOG",
            "CSI_LOG"
        ],
        "hibernate_iop": [
            "hibernate_iop",
            "csi_set_feature",
            "request_iop_power_state",
            "CSI_LOG",
            "CSI_LOG",
            "csi_stop"
        ],
        "set_send_timeout": [
            "set_send_timeout"
        ],
        "get_send_timeout": [
            "get_send_timeout"
        ],
        "csi_set_feature": [
            "csi_set_feature"
        ],
        "csi_get_feature": [
            "csi_get_feature"
        ],
        "csi_clr_feature": [
            "csi_clr_feature"
        ],
        "csi_info": [
            "csi_info",
            "fw_print_version"
        ],
        "csi_register_endpoint": [
            "csi_register_endpoint",
            "find_endpoint",
            "CSI_LOG",
            "csi_register_endpoint",
            "CSI_LOG",
            "csi_register_endpoint"
        ],
        "csi_free_shared_memory": [
            "csi_free_shared_memory",
            "free_shared_memory"
        ],
        "csi_receive_message": [
            "csi_receive_message",
            "REQUIRE",
            "EP_QUEUE_ADVANCE"
        ],
        "csi_send_message": [
            "csi_send_message",
            "REQUIRE",
            "ipc_msg_set_endpoint",
            "ipc_msg_get_endpoint",
            "ipc_msg_set_endpoint",
            "akf_send_mbox",
            "KFW",
            "CSI_LOG",
            "csi_send_message"
        ],
        "maybe_do_cache_operation": [
            "maybe_do_cache_operation",
            "roundup",
            "platform_cache_operation"
        ]
    },
    "drivers/apple/csi/endpoints": {
        "bi_ep_syslog_create": [
            "bi_ep_syslog_create",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "task_start",
            "task_create"
        ],
        "syslog_quiesce": [
            "syslog_quiesce",
            "csi_free_shared_memory"
        ],
        "bi_ep_syslog_verbosity": [
            "bi_ep_syslog_verbosity"
        ],
        "ep_syslog_task": [
            "ep_syslog_task",
            "event_init",
            "csi_register_endpoint",
            "REQUIRE",
            "event_wait",
            "csi_receive_message",
            "syslog_msg_handler"
        ],
        "syslog_msg_handler": [
            "syslog_msg_handler",
            "syslog_get_cmd",
            "ipc_buff_msg_get_size",
            "REQUIRE",
            "csi_allocate_shared_memory",
            "REQUIRE",
            "mem_static_map_physical",
            "bi_ep_send_message",
            "syslog_construct_msg",
            "ipc_buff_msg_get_size",
            "CSI_EP_LOG",
            "llx",
            "CSI_EP_LOG",
            "syslog_get_address",
            "maybe_do_cache_operation",
            "sizeof",
            "LOG_PRI",
            "LOG_FAC",
            "CSI_EP_LOG",
            "syslog_get_facility_name",
            "CSI_EP_LOG",
            "bi_ep_send_message",
            "syslog_construct_msg",
            "syslog_get_address",
            "CSI_EP_LOG",
            "CSI_EP_LOG",
            "CSI_EP_LOG"
        ],
        "bi_ep_console_create": [
            "bi_ep_console_create",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "task_start",
            "task_create"
        ],
        "console_quiesce": [
            "console_quiesce",
            "csi_free_shared_memory"
        ],
        "bi_ep_console_send_custom_cmd": [
            "bi_ep_console_send_custom_cmd",
            "ipc_console_create_custom_cmd",
            "bi_ep_send_message"
        ],
        "bi_ep_console_set_verbosity": [
            "bi_ep_console_set_verbosity",
            "ipc_console_create_flow_enable_cmd",
            "bi_ep_send_message"
        ],
        "ep_console_task": [
            "ep_console_task",
            "event_init",
            "csi_register_endpoint",
            "REQUIRE",
            "malloc",
            "REQUIRE",
            "event_wait",
            "csi_receive_message",
            "console_msg_handler"
        ],
        "console_msg_handler": [
            "console_msg_handler",
            "ipc_msg_extract",
            "ipc_buff_msg_get_size",
            "csi_allocate_shared_memory",
            "REQUIRE",
            "mem_static_map_physical",
            "ipc_buff_create_msg",
            "ipc_msg_set",
            "bi_ep_send_message",
            "CSI_EP_LOG",
            "ipc_console_create_flow_enable_cmd",
            "bi_ep_send_message",
            "CSI_EP_LOG",
            "ipc_console_iocmd_get_channel",
            "ipc_console_iocmd_get_rdptr",
            "ipc_console_iocmd_get_wrptr",
            "REQUIRE",
            "maybe_do_cache_operation",
            "memcpy",
            "REQUIRE",
            "maybe_do_cache_operation",
            "memcpy",
            "maybe_do_cache_operation",
            "memcpy",
            "CSI_EP_LOG",
            "csi_is_shutdown_in_progress",
            "ipc_console_create_iocmd",
            "ipc_console_iocmd_get_channel",
            "bi_ep_send_message",
            "CSI_EP_LOG",
            "CSI_EP_LOG"
        ],
        "bi_ep_send_message": [
            "bi_ep_send_message",
            "csi_send_message"
        ],
        "bi_ep_mgmt_create": [
            "bi_ep_mgmt_create",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "task_start",
            "task_create"
        ],
        "bi_ep_mgmt_get_state": [
            "bi_ep_mgmt_get_state"
        ],
        "bi_ep_mgmt_get_power_state": [
            "bi_ep_mgmt_get_power_state"
        ],
        "bi_ep_mgmt_send_ps": [
            "bi_ep_mgmt_send_ps",
            "csi_mgmt_create_msg",
            "csi_mgmt_create_ps_msg",
            "csi_send_message"
        ],
        "ep_mgmt_task": [
            "ep_mgmt_task",
            "event_init",
            "csi_register_endpoint",
            "REQUIRE",
            "pinger_init",
            "event_wait",
            "csi_receive_message",
            "mgmt_msg_handler"
        ],
        "mgmt_msg_handler": [
            "mgmt_msg_handler",
            "csi_mgmt_get_type",
            "handle_hello",
            "CSI_EP_LOG",
            "CSI_EP_LOG",
            "CSI_EP_LOG",
            "handle_power_state",
            "handle_power_state_ack",
            "CSI_EP_LOG",
            "CSI_EP_LOG"
        ],
        "handle_hello": [
            "handle_hello",
            "message",
            "validate_protocol",
            "csi_mgmt_get_prot",
            "csi_is_panic_recovery",
            "csi_mgmt_create_msg",
            "csi_mgmt_create_hello_msg",
            "csi_mgmt_create_msg",
            "csi_mgmt_create_hello_msg",
            "CSI_EP_LOG",
            "csi_mgmt_get_prot_major",
            "csi_mgmt_get_prot_minor",
            "CSI_EP_LOG",
            "csi_mgmt_get_prot_major",
            "csi_mgmt_get_prot_minor",
            "csi_mgmt_create_msg",
            "bi_ep_send_message"
        ],
        "handle_power_state": [
            "handle_power_state",
            "csi_mgmt_get_ps_state",
            "csi_mgmt_create_msg",
            "csi_mgmt_create_ps_msg",
            "bi_ep_send_message"
        ],
        "handle_power_state_ack": [
            "handle_power_state_ack",
            "csi_mgmt_get_ps_state",
            "syslog_quiesce",
            "console_quiesce",
            "crashlog_quiesce",
            "CSI_EP_LOG",
            "x",
            "event_signal"
        ],
        "validate_protocol": [
            "validate_protocol"
        ],
        "bi_ep_mgmt_send_ping": [
            "bi_ep_mgmt_send_ping",
            "timer_get_ticks",
            "csi_mgmt_create_msg",
            "csi_mgmt_create_ping_msg",
            "timer_get_ticks",
            "bi_ep_send_message",
            "timer_get_ticks",
            "timer_ticks_to_usecs",
            "timer_get_ticks",
            "task_yield",
            "csi_mgmt_get_ping_seqnum",
            "CSI_EP_LOG",
            "timer_ticks_to_usecs",
            "timer_get_ticks",
            "CSI_EP_LOG",
            "timer_ticks_to_usecs",
            "timer_get_ticks"
        ],
        "bi_ep_crashlog_create": [
            "bi_ep_crashlog_create",
            "REQUIRE",
            "malloc",
            "sizeof",
            "REQUIRE",
            "task_start",
            "task_create"
        ],
        "crashlog_quiesce": [
            "crashlog_quiesce",
            "csi_free_shared_memory"
        ],
        "bi_ep_crashlog_force_event": [
            "bi_ep_crashlog_force_event",
            "akf_send_nmi",
            "KFW",
            "bi_ep_send_message"
        ],
        "ep_crashlog_task": [
            "ep_crashlog_task",
            "event_init",
            "csi_register_endpoint",
            "REQUIRE",
            "event_wait",
            "csi_receive_message",
            "crashlog_msg_handler"
        ],
        "crashlog_msg_handler": [
            "crashlog_msg_handler",
            "ipc_buff_msg_get_address",
            "ipc_buff_msg_get_size",
            "csi_allocate_shared_memory",
            "REQUIRE",
            "mem_static_map_physical",
            "CSI_EP_LOG",
            "llx",
            "ipc_buff_create_msg",
            "bi_ep_send_message",
            "maybe_do_cache_operation",
            "cl_print",
            "CSI_EP_LOG",
            "csi_panic_recover",
            "CSI_EP_LOG",
            "unrecognizable"
        ],
        "cl_print": [
            "cl_print",
            "sizeof",
            "CSI_EP_LOG",
            "LOG_MAJOR_VERSION",
            "LOG_MAJOR_VERSION",
            "CSI_EP_LOG",
            "LOG_MAJOR_VERSION",
            "LOG_MAJOR_VERSION",
            "CSI_EP_LOG",
            "memcmp",
            "sizeof",
            "CSI_EP_LOG",
            "corrupted",
            "get_exc_type_str",
            "CSI_EP_LOG",
            "CSI_EP_LOG",
            "CSI_EP_LOG",
            "get_exc_type_str",
            "sizeof",
            "RUN_IF_COMPATIBLE",
            "cl_print_register_frame",
            "RUN_IF_COMPATIBLE",
            "cl_print_os_info",
            "RUN_IF_COMPATIBLE",
            "cl_print_string",
            "RUN_IF_COMPATIBLE",
            "cl_print_mailbox",
            "RUN_IF_COMPATIBLE",
            "cl_print_call_stack",
            "CSI_EP_LOG",
            "get_signature_string",
            "LOG_PRINT_VERSION",
            "warnings",
            "csi_is_panic_recovery",
            "csi_set_feature",
            "CSI_EP_LOG"
        ],
        "cl_print_register_frame": [
            "cl_print_register_frame",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW",
            "cl_decode_fsr",
            "CSI_LOG_RAW",
            "cl_decode_fsr",
            "CSI_LOG_RAW"
        ],
        "cl_print_os_info": [
            "cl_print_os_info",
            "CSI_LOG_RAW",
            "sizeof",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW",
            "cl_decode_task_status"
        ],
        "cl_print_string": [
            "cl_print_string",
            "sizeof",
            "CSI_LOG_RAW"
        ],
        "cl_print_mailbox": [
            "cl_print_mailbox",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW"
        ],
        "cl_print_call_stack": [
            "cl_print_call_stack",
            "CSI_LOG_RAW",
            "get_call_stack_error_string",
            "CSI_LOG_RAW",
            "CSI_LOG_RAW"
        ]
    },
    "drivers/apple/csi/firmware": {
        "fw_fixup_and_relocate": [
            "fw_fixup_and_relocate",
            "get_csi_config_offset",
            "CSI_LOG",
            "get_fw_image",
            "get_csi_config_offset",
            "CSI_LOG",
            "CSI_LOG",
            "CSI_LOG",
            "size",
            "large",
            "is_power_of_2",
            "CSI_LOG",
            "requirement",
            "CSI_LOG",
            "alignment",
            "size",
            "memset",
            "memcpy",
            "get_fw_image",
            "get_fw_image_size",
            "CSI_LOG",
            "get_name_str",
            "get_build_str",
            "get_version_str",
            "CSI_LOG",
            "mem_static_map_physical",
            "get_fw_image_size",
            "get_csi_config_offset",
            "CSI_LOG",
            "chipid_get_chip_id",
            "chipid_get_chip_revision",
            "clock_get_frequency",
            "clock_get_frequency",
            "roundup",
            "CSI_LOG",
            "of",
            "size",
            "CSI_LOG",
            "p",
            "power_get_nvram",
            "CSI_LOG",
            "maybe_do_cache_operation",
            "maybe_do_cache_operation"
        ],
        "fw_print_version": [
            "fw_print_version",
            "get_csi_config_offset",
            "CSI_LOG",
            "get_name_str",
            "get_build_str",
            "get_version_str",
            "mem_static_map_physical",
            "CSI_LOG",
            "csi_mgmt_get_prot_major",
            "csi_mgmt_get_prot_minor"
        ]
    },
    "drivers/apple/csi/include": {},
    "drivers/apple/csi/include/endpoints": {},
    "drivers/apple/sep": {
        "sep_client_get_nonce": [
            "sep_client_get_nonce",
            "RELEASE_ASSERT",
            "_sep_client_get_nonce",
            "dprintf",
            "memcpy"
        ],
        "sep_client_seed_aes": [
            "sep_client_seed_aes",
            "_sep_client_seed_aes",
            "dprintf"
        ]
    },
    "drivers/apple/sep/include/drivers/sep": {},
    "drivers/apple/dcs": {
        "loopchrnk_index_calc": [
            "loopchrnk_index_calc"
        ],
        "dcs_init_config": [
            "dcs_init_config",
            "actual",
            "platform_get_chip_id",
            "dbgprintf",
            "dbgprintf",
            "c"
        ],
        "dcs_init_debug_enable": [
            "dcs_init_debug_enable"
        ],
        "dcs_init_debug_disable": [
            "dcs_init_debug_disable"
        ],
        "dcs_init_variant_enable": [
            "dcs_init_variant_enable"
        ],
        "dcs_init_variant_disable": [
            "dcs_init_variant_disable"
        ],
        "dcs_reg_write": [
            "dcs_reg_write",
            "dbgprintf",
            "REG",
            "DCS_REG_ACCESS"
        ],
        "dcs_reg_poll": [
            "dcs_reg_poll",
            "dbgprintf",
            "REG",
            "Mask",
            "SPIN_W_TMO_WHILE",
            "DCS_REG_ACCESS"
        ],
        "dcs_reg_write_all_chan": [
            "dcs_reg_write_all_chan",
            "dbgprintf",
            "REG",
            "DCS_REG_ACCESS",
            "dbgprintf",
            "dbgprintf"
        ],
        "dcs_reg_poll_all_chan": [
            "dcs_reg_poll_all_chan",
            "dbgprintf",
            "REG",
            "Mask",
            "dbgprintf",
            "SPIN_W_TMO_WHILE",
            "DCS_REG_READ_CH",
            "dbgprintf",
            "dbgprintf"
        ],
        "dcs_reg_is_outside_dcs_block": [
            "dcs_reg_is_outside_dcs_block"
        ],
        "dcs_mrcmd_to_ch_rnk": [
            "dcs_mrcmd_to_ch_rnk",
            "dcs_form_mrcmd_word",
            "dcs_mrcmd_to_specific_ch_rnk",
            "dbgprintf"
        ],
        "dcs_mrcmd": [
            "dcs_mrcmd",
            "dcs_form_mrcmd_word",
            "dbgprintf",
            "MRCMD",
            "dbgprintf",
            "dbgprintf",
            "dcs_mrcmd_send_specific_ch_rnk",
            "dbgprintf",
            "dcs_mrcmd_poll_specific_ch_rnk",
            "dbgprintf",
            "dbgprintf",
            "dbgprintf"
        ],
        "dcs_spin": [
            "dcs_spin",
            "dbgprintf",
            "delay_for_us"
        ],
        "dcs_init_apply_tunables": [
            "dcs_init_apply_tunables",
            "dcs_init_tunable_table",
            "register",
            "dcs_reg_is_outside_dcs_block",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "value",
            "register",
            "dcs_reg_is_outside_dcs_block",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_ROWHAM_CTL"
        ],
        "mcu_late_init": [
            "mcu_late_init"
        ],
        "density_to_Gb": [
            "density_to_Gb",
            "panic"
        ],
        "dcs_get_memory_size": [
            "dcs_get_memory_size",
            "panic",
            "density",
            "density_to_Gb"
        ],
        "dcs_get_memory_info": [
            "dcs_get_memory_info",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "panic",
            "density_to_Gb",
            "dcs_get_memory_size",
            "dprintf",
            "dprintf",
            "panic",
            "Gbit"
        ],
        "dcs_change_freq": [
            "dcs_change_freq",
            "dbgprintf",
            "shim_panic",
            "clocks_set_performance"
        ],
        "dcs_store_memory_calibration": [
            "dcs_store_memory_calibration",
            "power_store_memory_calibration",
            "shim_panic"
        ],
        "dcs_load_memory_calibration": [
            "dcs_load_memory_calibration",
            "power_load_memory_calibration",
            "shim_panic"
        ],
        "dcs_init": []
    },
    "drivers/apple/dcs/include/drivers/dcs": {},
    "drivers/apple/audio": {
        "do_ae2_go": [
            "do_ae2_go",
            "env_get_uint",
            "dprintf",
            "dprintf"
        ],
        "do_ae2_stop": [
            "do_ae2_stop"
        ],
        "timer_init": [
            "timer_init",
            "install_int_handler",
            "set_int_type",
            "mask_int"
        ],
        "timer_ticks_to_usecs": [
            "timer_ticks_to_usecs"
        ],
        "timer_usecs_to_ticks": [
            "timer_usecs_to_ticks"
        ],
        "timer_get_tick_rate": [
            "timer_get_tick_rate"
        ],
        "timer_get_ticks": [
            "timer_get_ticks",
            "aic_get_ticks",
            "aic_get_ticks"
        ],
        "interrupt_init": [
            "interrupt_init",
            "exit_critical_section"
        ],
        "unmask_int": [
            "unmask_int"
        ],
        "mask_int": [
            "mask_int"
        ],
        "set_int_type": [
            "set_int_type",
            "arm_enable_fiqs"
        ],
        "install_int_handler": [
            "install_int_handler",
            "enter_critical_section",
            "exit_critical_section"
        ],
        "platform_irq": [
            "platform_irq",
            "__builtin_ctz",
            "handler"
        ],
        "platform_fiq": [
            "platform_fiq",
            "__builtin_ctz",
            "handler"
        ],
        "interrupt_generate_ipc": [
            "interrupt_generate_ipc"
        ],
        "interrupt_clear_ipc": [
            "interrupt_clear_ipc"
        ]
    },
    "drivers/apple/audio/include/drivers/audio": {},
    "drivers/apple/sha2": {
        "sha1_hw_calculate": [
            "sha1_hw_calculate",
            "sha_hw_calculate"
        ],
        "do_sha": [
            "do_sha",
            "printf",
            "printf",
            "printf",
            "security_allow_memory",
            "printf",
            "memset",
            "sizeof",
            "sha_hw_calculate",
            "printf",
            "printf",
            "printf"
        ]
    },
    "drivers/apple/amp_v3": {
        "calibration_ca_rddq_wrlvl": [
            "calibration_ca_rddq_wrlvl",
            "calibration_init_cfg_params",
            "shim_panic",
            "hwloops",
            "swloops",
            "shim_configure_pre_ca",
            "calibrate_ca",
            "calibrate_rddq",
            "calibrate_wrlvl",
            "shim_configure_post_wrlvl"
        ],
        "calibration_wrdq_rddq": [
            "calibration_wrdq_rddq",
            "shim_configure_pre_wrdq",
            "calibrate_wrdq",
            "calibrate_rddq",
            "shim_configure_post_prbs_rddq"
        ],
        "calibration_save_restore_regs": [
            "calibration_save_restore_regs",
            "array",
            "CSR_READ",
            "rAMP_CASDLLCTRL",
            "CSR_READ",
            "rAMP_CADESKEW_CTRL",
            "offset_convert",
            "INT_TO_OFFSET",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "CSR_READ",
            "rAMP_CKDESKEW_CTRL",
            "offset_convert",
            "channel",
            "map_byte_to_dq",
            "CSR_READ",
            "rAMP_CAWRLVLSDLLCODE",
            "CSR_READ",
            "rAMP_DQWRLVLSDLLCODE",
            "channel",
            "map_byte_to_dq",
            "CSR_READ",
            "rAMP_DQSDLLCTRL_RD",
            "CSR_READ",
            "rAMP_RDDQDESKEW_CTRL",
            "offset_convert",
            "INT_TO_OFFSET",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "channel",
            "map_byte_to_dq",
            "CSR_READ",
            "rAMP_DQSDLLCTRL_WR",
            "CSR_READ",
            "rAMP_WRDMDESKEW_CTRL",
            "offset_convert",
            "CSR_READ",
            "rAMP_WRDQDESKEW_CTRL",
            "offset_convert",
            "INT_TO_OFFSET",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "shim_store_memory_calibration",
            "shim_load_memory_calibration",
            "calibration_init_cfg_params",
            "amp_save_masterdll_values",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "amp_push_casdll_out",
            "amp_push_ctl_out",
            "offset_convert",
            "offset_convert",
            "CSR_WRITE",
            "rAMP_CADESKEW_CTRL",
            "amp_set_cawrlvl_sdll",
            "amp_set_dqwrlvl_sdll",
            "map_byte_to_dq",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "amp_set_rddq_sdll",
            "INT_TO_OFFSET",
            "offset_convert",
            "CSR_WRITE",
            "rAMP_RDDQDESKEW_CTRL",
            "map_byte_to_dq",
            "OFFSET_TO_INT",
            "OFFSET_TO_INT",
            "amp_set_wrdq_sdll",
            "CSR_WRITE",
            "rAMP_WRDMDESKEW_CTRL",
            "offset_convert",
            "registers",
            "offset_convert",
            "offset_convert",
            "offset_convert",
            "CSR_WRITE",
            "rAMP_WRDQDESKEW_CTRL",
            "CSR_WRITE",
            "rAMP_WRDQSDESKEW_CTRL"
        ],
        "calibration_dump_results": [
            "calibration_dump_results",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "OFFSET_TO_INT",
            "CSR_READ",
            "rAMP_CASDLLCTRL",
            "shim_printf",
            "shim_printf",
            "CSR_READ",
            "rAMP_CADESKEW_CTRL",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "CSR_READ",
            "rAMP_CKDESKEW_CTRL",
            "shim_printf",
            "shim_printf",
            "CSR_READ",
            "rAMP_CAWRLVLSDLLCODE",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "map_byte_to_dq",
            "shim_printf",
            "CSR_READ",
            "rAMP_DQWRLVLSDLLCODE",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "map_byte_to_dq",
            "shim_printf",
            "OFFSET_TO_INT",
            "CSR_READ",
            "rAMP_DQSDLLCTRL_RD",
            "shim_printf",
            "shim_printf",
            "CSR_READ",
            "rAMP_RDDQDESKEW_CTRL",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "map_byte_to_dq",
            "shim_printf",
            "OFFSET_TO_INT",
            "CSR_READ",
            "rAMP_DQSDLLCTRL_WR",
            "shim_printf",
            "shim_printf",
            "CSR_READ",
            "rAMP_WRDQDESKEW_CTRL",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf",
            "shim_printf"
        ],
        "calibration_init_cfg_params": [
            "calibration_init_cfg_params",
            "shim_init_calibration_params"
        ],
        "calibrate_ca": [
            "calibrate_ca",
            "cacal_generate_patterns_mask",
            "amp_save_masterdll_values",
            "amp_program_ca_patterns",
            "amp_init_ca_offset_and_deskew",
            "cmd",
            "amp_mask_ca_bits",
            "shim_mrcmd_to_ch_rnk",
            "amp_enable_cacal_mode",
            "cacal_run_sequence",
            "amp_enable_cacal_mode",
            "amp_init_ca_offset_and_deskew",
            "cmd",
            "amp_mask_ca_bits",
            "shim_mrcmd_to_ch_rnk",
            "amp_enable_cacal_mode",
            "cacal_run_sequence",
            "amp_enable_cacal_mode",
            "amp_init_ca_offset_and_deskew",
            "shim_mrcmd_to_ch_rnk",
            "cacal_program_final_values"
        ],
        "calibrate_rddq": [
            "calibrate_rddq",
            "amp_setup_rddq_cal",
            "shim_mrcmd_to_ch_rnk",
            "shim_enable_rddqcal",
            "rddqcal_find_right_failing_point",
            "rddqcal_find_left_failing_point",
            "shim_enable_rddqcal",
            "rddqcal_find_right_failing_point",
            "rddqcal_find_left_failing_point",
            "rddqcal_program_final_values"
        ],
        "calibrate_wrlvl": [
            "calibrate_wrlvl",
            "amp_wrlvl_init",
            "CSR_READ",
            "rAMP_CAWRLVLSDLLCODE",
            "bit",
            "shim_mrcmd_to_ch_rnk",
            "wrlvlcal_push_to_0s_region",
            "wrlvlcal_find_0to1_transition",
            "wrlvlcal_find_1to0_transition",
            "value",
            "mode",
            "amp_set_cawrlvl_sdll",
            "shim_mrcmd_to_ch_rnk",
            "wrlvlcal_program_final_values"
        ],
        "calibrate_wrdq": [
            "calibrate_wrdq",
            "wrdqcal_find_right_failing_point",
            "wrdqcal_find_left_failing_point",
            "wrdqcal_program_final_values"
        ],
        "amp_save_masterdll_values": [
            "amp_save_masterdll_values",
            "CSR_READ",
            "rAMP_MDLLCODE",
            "CSR_READ",
            "rAMP_MDLLCODE",
            "CSR_READ",
            "rAMP_MDLLCODE"
        ],
        "amc_phy_preinit": [
            "amc_phy_preinit",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL"
        ],
        "amc_phy_init": [
            "amc_phy_init",
            "CSR_WRITE",
            "rAMP_AMPEN",
            "CSR_WRITE",
            "rAMP_AMPEN",
            "CSR_WRITE",
            "rAMP_AMPEN",
            "CSR_WRITE",
            "rAMP_DQDQSDS",
            "CSR_WRITE",
            "rAMP_DQDQSDS",
            "CSR_WRITE",
            "rAMP_NONDQDS",
            "CSR_WRITE",
            "rAMP_DIFFMODE_FREQ",
            "CSR_WRITE",
            "rAMP_DIFFMODE_FREQ",
            "CSR_WRITE",
            "rAMP_RDDQDESKEW_CTRL",
            "CSR_WRITE",
            "rAMP_RDDQDESKEW_CTRL",
            "CSR_WRITE",
            "rAMP_DLLLOCKTIM",
            "CSR_WRITE",
            "rAMP_DLLLOCKTIM",
            "CSR_WRITE",
            "rAMP_DLLLOCKTIM",
            "CSR_WRITE",
            "rAMP_CAOUTDLLSCL_FREQ",
            "CSR_WRITE",
            "rAMP_DQSINDLLSCL_FREQ",
            "CSR_WRITE",
            "rAMP_DQSINDLLSCL_FREQ",
            "CSR_WRITE",
            "rAMP_RDCAPCFG_FREQ",
            "CSR_WRITE",
            "rAMP_RDCAPCFG_FREQ",
            "CSR_WRITE",
            "rAMP_DQODTVREF_F",
            "CSR_WRITE",
            "rAMP_DQODTVREF_F",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL",
            "CSR_WRITE",
            "rAMP_DLLUPDTCTRL",
            "CSR_WRITE",
            "rAMP_IMPAUTOCAL",
            "CSR_WRITE",
            "rAMP_IMPAUTOCAL",
            "CSR_WRITE",
            "rAMP_IMPAUTOCAL",
            "CSR_WRITE",
            "rAMP_DLLUPDTINTVL",
            "CSR_WRITE",
            "rAMP_DLLUPDTINTVL",
            "CSR_WRITE",
            "rAMP_DLLUPDTINTVL",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "CSR_WRITE",
            "rAMP_DLLEN",
            "amc_phy_run_dll_update",
            "CSR_WRITE",
            "rAMP_IMPCALCMD",
            "CSR_WRITE",
            "rAMP_IMPCALCMD",
            "CSR_WRITE",
            "rAMP_IMPCALCMD",
            "CSR_READ",
            "rAMP_IMPCALCMD",
            "CSR_READ",
            "rAMP_IMPCALCMD",
            "CSR_READ",
            "rAMP_IMPCALCMD",
            "CSR_WRITE",
            "rAMP_AMPINIT",
            "CSR_WRITE",
            "rAMP_AMPINIT",
            "CSR_WRITE",
            "rAMP_AMPINIT"
        ],
        "amc_phy_run_dll_update": [
            "amc_phy_run_dll_update",
            "CSR_WRITE",
            "rAMP_DLLUPDTCMD",
            "CSR_WRITE",
            "rAMP_DLLUPDTCMD",
            "CSR_WRITE",
            "rAMP_DLLUPDTCMD",
            "CSR_READ",
            "rAMP_DLLUPDTCMD",
            "CSR_READ",
            "rAMP_DLLUPDTCMD",
            "CSR_READ",
            "rAMP_DLLUPDTCMD"
        ],
        "amc_phy_pre_normal_speed_enable": [
            "amc_phy_pre_normal_speed_enable",
            "CSR_WRITE",
            "rAMP_CAOUTDLLSCL_FREQ",
            "CSR_WRITE",
            "rAMP_DQSINDLLSCL_FREQ",
            "CSR_WRITE",
            "rAMP_DQSINDLLSCL_FREQ",
            "amc_phy_run_dll_update"
        ],
        "amc_phy_finalize": [
            "amc_phy_finalize",
            "CSR_WRITE",
            "rAMP_AMPCLK",
            "CSR_WRITE",
            "rAMP_AMPCLK",
            "CSR_WRITE",
            "rAMP_AMPCLK"
        ],
        "amc_phy_bypass_prep": [
            "amc_phy_bypass_prep"
        ],
        "amc_phy_restore_calibration_values": [
            "amc_phy_restore_calibration_values",
            "calibration_save_restore_regs"
        ],
        "amc_phy_calibration_ca_rddq_cal": [
            "amc_phy_calibration_ca_rddq_cal",
            "calibration_ca_rddq_wrlvl"
        ],
        "amc_phy_calibration_wrdq_cal": [
            "amc_phy_calibration_wrdq_cal",
            "calibration_wrdq_rddq"
        ]
    },
    "drivers/apple/amp_v3/iboot": {
        "shim_init_calibration_params": [
            "shim_init_calibration_params",
            "platform_get_chip_id",
            "platform_get_chip_revision"
        ],
        "shim_configure_pre_ca": [
            "shim_configure_pre_ca",
            "amc_calibration_start"
        ],
        "shim_enable_rddqcal": [
            "shim_enable_rddqcal",
            "amc_enable_rddqcal"
        ],
        "shim_configure_post_wrlvl": [
            "shim_configure_post_wrlvl",
            "amc_calibration_start"
        ],
        "shim_configure_pre_wrdq": [
            "shim_configure_pre_wrdq",
            "amc_calibration_start",
            "amc_wrdqcal_start"
        ],
        "shim_configure_post_prbs_rddq": [
            "shim_configure_post_prbs_rddq",
            "amc_wrdqcal_start",
            "amc_calibration_start",
            "calibration_save_restore_regs"
        ],
        "shim_mrcmd_to_ch_rnk": [
            "shim_mrcmd_to_ch_rnk",
            "amc_mrcmd_to_ch_rnk"
        ],
        "shim_compute_dram_addr": [
            "shim_compute_dram_addr",
            "amc_get_uncached_dram_virt_addr"
        ],
        "shim_get_consecutive_bytes_perchnrnk": [
            "shim_get_consecutive_bytes_perchnrnk",
            "amc_get_consecutive_bytes_perchnrnk"
        ],
        "shim_store_memory_calibration": [
            "shim_store_memory_calibration",
            "power_store_memory_calibration",
            "panic"
        ],
        "shim_load_memory_calibration": [
            "shim_load_memory_calibration",
            "power_load_memory_calibration",
            "panic"
        ]
    },
    "drivers/apple/amp_v3/include": {},
    "drivers/apple/adfe_v2": {
        "adfe_init": [
            "adfe_init",
            "env_get",
            "strcmp",
            "panic",
            "adfe_init",
            "adfe_enable_error_handler",
            "level"
        ],
        "adfe_set_axis_flip": [
            "adfe_set_axis_flip",
            "rADPGPSRCFMT"
        ],
        "adfe_set_ui_layer": [
            "adfe_set_ui_layer",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "defined",
            "rADPGPSRCFMT",
            "rADPGPSRCFMT",
            "adfe_set_pixel_pipe_plane",
            "adfe_set_pixel_pipe_plane",
            "rADPGPSRCCFG",
            "rADPGPDSTXY",
            "rADPGPDSTWH",
            "rADPGPCFG",
            "rADPGPNOISECFG",
            "rADPGPCSCCFG",
            "rADPGPCMCFG",
            "adfe_gp_gamut_adjustment",
            "rADPGPREQAGGR",
            "rADPGPREQAGGR",
            "rADPBLAYCFG",
            "rADPBLAYCFG",
            "adfe_blend_gamut_adjustment"
        ],
        "adfe_enable_error_handler": [
            "adfe_enable_error_handler",
            "install_int_handler",
            "unmask_int"
        ],
        "adfe_disable_error_handler": [
            "adfe_disable_error_handler",
            "mask_int"
        ],
        "adfe_set_background_color": [
            "adfe_set_background_color"
        ],
        "adfe_activate_window": [
            "adfe_activate_window"
        ],
        "adfe_get_enable": [
            "adfe_get_enable"
        ]
    },
    "drivers/apple/adfe_v2/include/drivers/adfe_v2": {},
    "drivers/apple/wpc": {
        "wpc_init": [
            "wpc_init",
            "wpc_write_reg",
            "WPC_CONFIG_ACTIVE_REGION_START_START_X_INSRT",
            "WPC_CONFIG_ACTIVE_REGION_START_START_Y_INSRT",
            "wpc_write_reg",
            "WPC_CONFIG_ACTIVE_REGION_SIZE_WIDTH_INSRT",
            "WPC_CONFIG_ACTIVE_REGION_SIZE_HEIGHT_INSRT",
            "wpc_write_reg",
            "WPC_CONFIG_PIXEL_GAIN_OFFSET",
            "GainStep",
            "wpc_write_reg",
            "wpc_write_reg",
            "wpc_write_reg"
        ],
        "wpc_install_gamma_table": [
            "wpc_install_gamma_table",
            "wpc_write_reg",
            "WPC_CONFIG_DE_GAMMA_OFFSET",
            "wpc_write_reg",
            "wpc_write_reg",
            "WPC_CONFIG_EN_GAMMA_OFFSET",
            "wpc_write_reg"
        ],
        "wpc_write_reg": [
            "wpc_write_reg"
        ],
        "wpc_read_reg": [
            "wpc_read_reg"
        ]
    },
    "drivers/apple/dpb": {
        "dpb_init": [
            "dpb_init"
        ],
        "dpb_get_enable": [
            "dpb_get_enable"
        ],
        "dpb_set_enable": [
            "dpb_set_enable"
        ],
        "dpb_install_gamma_table": [
            "dpb_install_gamma_table",
            "dpb_convert_gamma_tables",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "them",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table",
            "dpb_load_gamma_table"
        ]
    },
    "drivers/apple/oscar": {},
    "drivers/apple/oscar/include/drivers/oscar": {},
    "drivers/apple/a5iop": {
        "a5iop_cache_operation": [
            "a5iop_cache_operation",
            "unlikely",
            "enter_critical_section",
            "arm_clean_dcache",
            "arm_invalidate_dcache",
            "exit_critical_section",
            "arm_clean_invalidate_dcache_line",
            "arm_clean_invalidate_dcache_line_2",
            "arm_clean_invalidate_dcache_line_3",
            "arm_clean_invalidate_dcache_line_4",
            "arm_clean_invalidate_dcache_line_5",
            "arm_clean_invalidate_dcache_line_6",
            "arm_clean_invalidate_dcache_line_7",
            "arm_clean_invalidate_dcache_line_8",
            "arm_clean_dcache_line",
            "arm_clean_dcache_line_2",
            "arm_clean_dcache_line_3",
            "arm_clean_dcache_line_4",
            "arm_clean_dcache_line_5",
            "arm_clean_dcache_line_6",
            "arm_clean_dcache_line_7",
            "arm_clean_dcache_line_8",
            "arm_invalidate_dcache_line",
            "arm_invalidate_dcache_line_2",
            "arm_invalidate_dcache_line_3",
            "arm_invalidate_dcache_line_4",
            "arm_invalidate_dcache_line_5",
            "arm_invalidate_dcache_line_6",
            "arm_invalidate_dcache_line_7",
            "arm_invalidate_dcache_line_8"
        ],
        "a5iop_sleep": [
            "a5iop_sleep",
            "enter_critical_section",
            "task_get_current_task",
            "timer_get_ticks",
            "arch_task_context_switch",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "arm_clean_dcache",
            "arch_halt",
            "exit_critical_section",
            "arch_halt"
        ],
        "platform_wakeup": [
            "platform_wakeup",
            "arch_cpu_init",
            "timer_get_ticks",
            "exit_critical_section",
            "platform_early_init",
            "arm_enable_fiqs",
            "callout_reset_deadline",
            "arch_task_context_restore",
            "panic"
        ]
    },
    "drivers/apple/a5iop/include/drivers/a5iop": {},
    "drivers/apple/amg": {
        "amc_phy_init": [
            "amc_phy_init",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_CORE_CONFIG",
            "rAMG_ZQ_CONF",
            "rAMG_ZQ_CONTROL",
            "rAMG_ZQ_CONTROL",
            "rAMG_ZQ_STATUS",
            "rAMG_DLL_CONTROL",
            "rAMG_DLL_CONTROL",
            "rAMG_DLL_STATUS",
            "rAMG_DLL_STATUS",
            "rAMG_DLL_STATUS",
            "chipid_get_memory_manufacturer",
            "rAMG_ADDR_OFFSET",
            "amc_phy_calibration_restore_ca_offset",
            "rAMG_DLL_TIMER",
            "likely",
            "rAMG_FREQ_SCALE",
            "rAMG_FREQ_SCALE",
            "rAMG_READ_LATENCY",
            "rAMG_GATE_OFFSET",
            "rAMG_INIT_CONTROL"
        ],
        "amc_phy_scale_dll": [
            "amc_phy_scale_dll",
            "rAMG_INIT_CONTROL",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_STATUS",
            "panic",
            "rAMG_DLL_OVERRIDE",
            "rAMG_DLL_CONTROL",
            "rAMG_DLL_STATUS"
        ],
        "amc_phy_rddq_cal": [
            "amc_phy_rddq_cal",
            "malloc",
            "sizeof",
            "chipid_get_memory_dqcal",
            "amc_get_memory_device_info",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_STATUS",
            "rAMG_RD_OFFSET",
            "rAMG_WR_OFFSET",
            "free"
        ],
        "amc_phy_bypass_prep": [
            "amc_phy_bypass_prep",
            "rAMG_INIT_CONTROL",
            "amc_phy_scale_dll"
        ],
        "amc_phy_finalize": [
            "amc_phy_finalize",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_FILTER",
            "rAMG_DLL_CONTROL"
        ],
        "amc_phy_enable_dqs_pulldown": [
            "amc_phy_enable_dqs_pulldown"
        ],
        "amc_phy_reset_fifos": [
            "amc_phy_reset_fifos"
        ],
        "amc_phy_calibration_init": [
            "amc_phy_calibration_init",
            "amc_get_memory_device_info",
            "rAMG_DLL_FILTER",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_STATUS",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_OVERRIDE",
            "AMG_INDEX_FOR_CHANNEL",
            "amc_phy_run_dll_update",
            "rAMG_DQCAL_CONTROL",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DQCAL_CONTROL",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_run_dll_update": [
            "amc_phy_run_dll_update",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_CONTROL",
            "rAMG_DLL_STATUS"
        ],
        "amc_phy_set_addr_offset": [
            "amc_phy_set_addr_offset",
            "rAMG_ADDR_OFFSET",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_set_rd_offset": [
            "amc_phy_set_rd_offset",
            "rAMG_RD_OFFSET",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_set_wr_offset": [
            "amc_phy_set_wr_offset",
            "rAMG_WR_OFFSET",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_configure_dll_pulse_mode": [
            "amc_phy_configure_dll_pulse_mode",
            "rAMG_DLL_FILTER",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_FILTER",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DLL_CONTROL",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_run_dq_training": [
            "amc_phy_run_dq_training",
            "AMG_INDEX_FOR_CHANNEL",
            "rAMG_DQCAL_CONTROL",
            "rAMG_DQCAL_STATUS"
        ],
        "amc_phy_get_dq_training_status": [
            "amc_phy_get_dq_training_status",
            "rAMG_DQCAL_STATUS",
            "AMG_INDEX_FOR_CHANNEL"
        ],
        "amc_phy_shift_dq_offset": [
            "amc_phy_shift_dq_offset",
            "amc_dram_shift_dq_offset"
        ]
    },
    "drivers/apple/adbe": {
        "adbe_enable_clocks": [
            "adbe_enable_clocks",
            "clock_gate",
            "clock_gate"
        ],
        "adbe_install_gamma_table": [
            "adbe_install_gamma_table",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "dpb_install_gamma_table",
            "wpc_install_gamma_table",
            "prc_install_gamma_table"
        ],
        "adbe_init": [
            "adbe_init",
            "env_get",
            "strcmp",
            "dprintf",
            "adbe_init",
            "dpb_init",
            "dither_init",
            "adbe_program_color_manager"
        ],
        "adbe_enable_timing_generator": [
            "adbe_enable_timing_generator"
        ],
        "adbe_get_enable_timing_generator": [
            "adbe_get_enable_timing_generator"
        ]
    },
    "drivers/apple/adbe/include/drivers/adbe": {},
    "drivers/apple/displaypipe": {
        "display_init": [
            "display_init",
            "dprintf",
            "display_init",
            "bzero",
            "display_set_timing_info",
            "dprintf",
            "display_init",
            "clocks",
            "display_backend_enable_clocks",
            "display_set_timings",
            "adfe_init",
            "end",
            "display_backend_init",
            "interval",
            "env_get",
            "strcmp",
            "strcmp",
            "strcmp",
            "display_create_window",
            "env_set_uint",
            "clock_set_frequency",
            "pinot_init",
            "pinot_init",
            "summit_init",
            "summit_init",
            "edp_init",
            "edp_init",
            "displayport_init_with_timing_info",
            "hdmi_init_with_timing_info",
            "display_get_enable",
            "display_set_enable",
            "malloc",
            "sizeof",
            "malloc",
            "sizeof",
            "malloc",
            "sizeof",
            "paint_install_gamma_table",
            "paint_get_syscfg_wpcl",
            "dprintf",
            "display_backend_install_gamma_table",
            "display_set_enable"
        ],
        "display_clear": [
            "display_clear",
            "fill_rect"
        ],
        "display_quiesce": [
            "display_quiesce",
            "display_backend_enable_clocks",
            "display_get_enable",
            "display_backend_enable_clocks",
            "display_set_timing_info",
            "display_clear",
            "display_delay_frames",
            "adfe_disable_error_handler",
            "free",
            "free",
            "free",
            "pinot_quiesce",
            "pinot_quiesce",
            "summit_quiesce",
            "summit_quiesce",
            "edp_quiesce",
            "edp_quiesce",
            "displayport_quiesce",
            "hdmi_quiesce",
            "display_set_enable",
            "free"
        ],
        "display_get_enable": [
            "display_get_enable",
            "clcd_get_enable_timing_generator",
            "rgbout_get_enable_timing_generator",
            "adbe_get_enable_timing_generator"
        ],
        "display_set_enable": [
            "display_set_enable",
            "display_get_enable",
            "fill_rect",
            "display_backend_enable_timing_generator",
            "display_backend_enable_timing_generator"
        ],
        "display_set_rotation": [
            "display_set_rotation",
            "adfe_set_axis_flip"
        ],
        "display_delay_frames": [
            "display_delay_frames",
            "task_sleep"
        ],
        "display_set_background_color": [
            "display_set_background_color",
            "adfe_set_background_color"
        ],
        "display_activate_window": [
            "display_activate_window",
            "adfe_activate_window"
        ]
    },
    "drivers/apple/aes": {
        "aes_ap_disable_keys": [
            "aes_ap_disable_keys",
            "dprintf",
            "clock_gate",
            "clock_gate"
        ],
        "aes_ap_keys_disabled": [
            "aes_ap_keys_disabled",
            "dprintf",
            "clock_gate",
            "clock_gate"
        ],
        "aes_hw_crypto_cmd": [
            "aes_hw_crypto_cmd",
            "dprintf",
            "clock_gate",
            "dprintf",
            "dprintf",
            "_load_input_block",
            "_load_input_block",
            "_store_output_block",
            "_store_output_block",
            "clock_gate",
            "panic"
        ],
        "_load_input_block": [
            "_load_input_block",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "_store_output_block": [
            "_store_output_block",
            "dprintf",
            "dprintf",
            "dprintf"
        ]
    },
    "drivers/apple/shmcon": {
        "shmcon_getc": [
            "shmcon_getc",
            "cache_line_invalidate",
            "sizeof",
            "task_yield",
            "cache_line_invalidate",
            "sizeof",
            "cache_line_invalidate",
            "shmcon_barrier",
            "WRAP_INCR",
            "platform_cache_operation",
            "ROUNDUP",
            "sizeof"
        ],
        "shmcon_putc": [
            "shmcon_putc",
            "shmcon_barrier",
            "platform_cache_operation",
            "WRAP_INCR",
            "platform_cache_operation",
            "ROUNDUP",
            "sizeof"
        ],
        "shmcon_puts": [
            "shmcon_puts",
            "shmcon_putc"
        ],
        "shmcon_init": [
            "shmcon_init",
            "sizeof",
            "sizeof",
            "ROUNDUP",
            "sizeof",
            "shmcon_barrier",
            "platform_cache_operation",
            "ROUNDUP",
            "sizeof",
            "ROUNDUP",
            "sizeof",
            "memset",
            "sizeof",
            "memcpy",
            "MIN",
            "sizeof",
            "strlen",
            "cache_line_invalidate",
            "shmcon_barrier",
            "platform_cache_operation",
            "ROUNDUP",
            "shmcon_barrier",
            "platform_cache_operation",
            "ROUNDUP",
            "sizeof",
            "task_start",
            "task_create",
            "consistent_debug_register_header",
            "dprintf"
        ],
        "shmcon_set_child": [
            "shmcon_set_child"
        ]
    },
    "drivers/apple/amc": {
        "amc_mrcmd": [
            "amc_mrcmd",
            "amc_mrcmd_to_ch_rnk"
        ],
        "amc_mrcmd_to_ch_rnk": [
            "amc_mrcmd_to_ch_rnk",
            "platform_memory_barrier"
        ],
        "amc_enable_autorefresh": [
            "amc_enable_autorefresh",
            "rAMC_AREFEN_FREQ",
            "rAMC_AREFEN_FREQ",
            "rAMC_AREFEN_FREQ",
            "rAMC_AREFEN_FREQ"
        ],
        "amc_configure_default_address_decoding_and_mapping": [
            "amc_configure_default_address_decoding_and_mapping"
        ],
        "amc_init": [
            "amc_init",
            "target_config_dev",
            "memcpy",
            "sizeof",
            "memcpy",
            "sizeof",
            "clocks_set_performance",
            "clocks_set_performance",
            "clock_reset_device",
            "clock_reset_device",
            "timer_get_ticks",
            "timer_usecs_to_ticks",
            "amc_phy_enable_dqs_pulldown",
            "rAMC_CAS_FREQ",
            "rAMC_PCH_FREQ",
            "rAMC_ACT_FREQ",
            "rAMC_AUTO_FREQ",
            "rAMC_SELF_FREQ",
            "rAMC_MODE_FREQ",
            "rAMC_MIFCASSCH_FREQ",
            "rAMC_TREFBWBASECYC_FREQ",
            "rAMC_TREFBWBASECYC_FREQ",
            "rAMC_TREFBWBASECYC_FREQ",
            "AMC_RNKCFG_OFFSET",
            "amc_configure_address_decoding_and_mapping",
            "platform_memory_barrier",
            "amc_phy_init",
            "rAMC_AREFPARAM_FREQ",
            "amc_enable_slow_boot",
            "amc_enable_autorefresh",
            "timer_get_ticks",
            "platform_memory_barrier",
            "Configuration",
            "spin",
            "MR63",
            "amc_mrcmd",
            "spin",
            "MR10",
            "amc_mrcmd",
            "spin",
            "register",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "panic",
            "dprintf",
            "dprintf",
            "panic",
            "MR1",
            "amc_mrcmd",
            "register",
            "amc_mrcmd",
            "amc_dram_workarounds",
            "rAMC_AUTO_FREQ",
            "dprintf",
            "amc_mrcmd",
            "spin",
            "amc_mrcmd",
            "spin",
            "amc_enable_slow_boot",
            "amc_phy_enable_dqs_pulldown",
            "amc_phy_calibration_ca_rddq_cal",
            "amc_finalize",
            "amc_phy_finalize",
            "sizeof",
            "sizeof",
            "amc_phy_calibration_wrdq_cal",
            "amc_mrcmd",
            "sizeof",
            "sizeof",
            "platform_set_memory_info",
            "amc_get_memory_size"
        ],
        "mcu_late_init": [
            "mcu_late_init"
        ],
        "amc_get_memory_size": [
            "amc_get_memory_size",
            "density"
        ],
        "amc_scheduler_en_workaround": [
            "amc_scheduler_en_workaround",
            "amc_mrcmd"
        ],
        "amc_get_uncached_dram_virt_addr": [
            "amc_get_uncached_dram_virt_addr",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH",
            "Mode",
            "low",
            "low",
            "low",
            "RIBI2",
            "amc_odd_parity",
            "amc_odd_parity",
            "amc_odd_parity",
            "case",
            "case",
            "case",
            "case",
            "panic",
            "width",
            "case",
            "case",
            "case",
            "case",
            "amc_odd_parity",
            "amc_odd_parity",
            "amc_odd_parity"
        ],
        "amc_calibration_start": [
            "amc_calibration_start",
            "platform_memory_barrier"
        ],
        "amc_enable_rddqcal": [
            "amc_enable_rddqcal",
            "platform_memory_barrier"
        ],
        "amc_wrdqcal_start": [
            "amc_wrdqcal_start",
            "platform_memory_barrier"
        ],
        "amc_get_consecutive_bytes_perchnrnk": [
            "amc_get_consecutive_bytes_perchnrnk",
            "now"
        ],
        "amc_phy_calibration_restore_ca_offset": [
            "amc_phy_calibration_restore_ca_offset",
            "power_get_nvram",
            "amc_phy_set_addr_offset",
            "RD_WR_ADDR_OFFSET"
        ],
        "amc_phy_calibration_ca_rddq_cal": [
            "amc_phy_calibration_ca_rddq_cal",
            "amc_phy_rddq_cal",
            "amc_phy_get_calibration_data",
            "data",
            "calibration_ca_rddq_cal_init",
            "calibration_ca_rddq_cal",
            "power_set_nvram",
            "calibration_rddq_cal",
            "amc_phy_shift_dq_offset",
            "amc_phy_set_rd_offset",
            "RD_WR_ADDR_OFFSET",
            "amc_phy_run_dll_update",
            "calibration_ca_rddq_cal_finalize"
        ],
        "amc_phy_calibration_wrdq_cal": [
            "amc_phy_calibration_wrdq_cal",
            "amc_phy_configure_dll_pulse_mode",
            "amc_get_memory_device_info",
            "memset",
            "sizeof",
            "calibration_get_save_restore_region",
            "memset",
            "sizeof",
            "memset",
            "sizeof",
            "calibration_wrdq_cal",
            "amc_phy_shift_dq_offset",
            "amc_phy_set_wr_offset",
            "RD_WR_ADDR_OFFSET",
            "amc_phy_run_dll_update",
            "calibration_get_save_restore_region",
            "amc_phy_configure_dll_pulse_mode"
        ]
    },
    "drivers/apple/amc/include/drivers/amc": {},
    "drivers/apple/dockchannel": {
        "dockchannel_uart_init": [
            "dockchannel_uart_init",
            "clock_gate",
            "rDOCKCHANNELS_DEV_FIFO_CTRL",
            "rDOCKCHANNELS_DOCK_FIFO_CTRL",
            "rDOCKCHANNELS_DOCK_RDATA3",
            "rDOCKCHANNELS_DEV_WSTAT",
            "clock_get_frequency",
            "dprintf",
            "rDOCKCHANNELS_DOCK_DRAIN_CFG",
            "dprintf",
            "cb_create",
            "event_init",
            "rDOCKCHANNELS_DEV_CONFIG_RD_WATERMARK",
            "interrupts",
            "install_int_handler",
            "unmask_int",
            "task_start",
            "task_create",
            "dprintf"
        ],
        "dockchannel_uart_putc": [
            "dockchannel_uart_putc",
            "dockchannel_uart_write"
        ],
        "dockchannel_enable_clock_gating": [
            "dockchannel_enable_clock_gating",
            "rDOCKCHANNELS_GLOBAL"
        ],
        "dockchannel_enable_top_clock_gating": [
            "dockchannel_enable_top_clock_gating",
            "rDOCKCHANNELS_GLOBAL"
        ],
        "dockchannel_access_enable": [
            "dockchannel_access_enable",
            "rDOCKCHANNELS_GLOBAL",
            "dprintf",
            "bug",
            "panic",
            "nonzero",
            "rDOCKCHANNELS_GLOBAL",
            "dprintf",
            "rDOCKCHANNELS_GLOBAL"
        ]
    },
    "drivers/apple/dockchannel/include/drivers/dockchannel": {},
    "drivers/apple/prc": {
        "prc_init": [
            "prc_init",
            "prc_write_reg",
            "PRC_CONFIG_ACTIVE_REGION_START_START_X_INSRT",
            "PRC_CONFIG_ACTIVE_REGION_START_START_Y_INSRT",
            "prc_write_reg",
            "PRC_CONFIG_ACTIVE_REGION_SIZE_WIDTH_INSRT",
            "PRC_CONFIG_ACTIVE_REGION_SIZE_HEIGHT_INSRT",
            "prc_write_reg"
        ],
        "prc_install_gamma_table": [
            "prc_install_gamma_table",
            "prc_write_reg",
            "PRC_LUT_REG_OFFSET",
            "prc_write_reg",
            "PRC_LUT_LAST_OFFSET_V1"
        ],
        "prc_write_reg": [
            "prc_write_reg"
        ],
        "prc_read_reg": [
            "prc_read_reg"
        ]
    },
    "drivers/ti/sn2400": {
        "charger_early_init": [
            "charger_early_init",
            "charger_read_events",
            "charger_read",
            "dprintf",
            "charger_reset_battery_protection"
        ],
        "charger_clear_alternate_usb_current_limit": [
            "charger_clear_alternate_usb_current_limit",
            "charger_read",
            "charger_write"
        ],
        "charger_has_usb": [
            "charger_has_usb",
            "charger_read"
        ],
        "charger_has_firewire": [
            "charger_has_firewire"
        ],
        "charger_has_external": [
            "charger_has_external"
        ],
        "charger_check_usb_change": [
            "charger_check_usb_change",
            "charger_read_events"
        ],
        "charger_set_charging": [
            "charger_set_charging",
            "charger_write",
            "charger_write",
            "charger_read",
            "charger_write",
            "charger_read",
            "charger_write",
            "task_sleep",
            "charger_read",
            "charger_write",
            "sn2400_adjust_iset",
            "task_sleep"
        ],
        "charger_clear_usb_state": [
            "charger_clear_usb_state"
        ],
        "charger_charge_done": [
            "charger_charge_done",
            "charger_read"
        ],
        "charger_has_batterypack": [
            "charger_has_batterypack"
        ],
        "charger_get_max_charge_current": [
            "charger_get_max_charge_current"
        ],
        "charger_read_battery_level": [
            "charger_read_battery_level",
            "charger_read_adc"
        ],
        "charger_set_gasgauge_interface": [
            "charger_set_gasgauge_interface",
            "charger_write",
            "system_time",
            "charger_read",
            "charger_write",
            "system_time",
            "printf",
            "task_sleep",
            "charger_write"
        ],
        "charger_reset_battery_protection": [
            "charger_reset_battery_protection",
            "dprintf",
            "pmu_read_system_temperature",
            "dprintf",
            "dprintf",
            "charger_write",
            "charger_write",
            "charger_write",
            "charger_write",
            "charger_write",
            "charger_write",
            "task_sleep",
            "charger_write",
            "charger_write",
            "charger_write",
            "charger_write",
            "charger_write",
            "dprintf"
        ],
        "charger_print_status": [
            "charger_print_status",
            "charger_readn",
            "dprintf",
            "x",
            "charger_readn",
            "dprintf",
            "x",
            "dprintf"
        ]
    },
    "drivers/ti/ths7383": {
        "ths7383_set_usb_brick_detect": [
            "ths7383_set_usb_brick_detect",
            "tristar_read",
            "tristar_read",
            "tristar_write",
            "tristar_write"
        ],
        "ths7383_read_id": [
            "ths7383_read_id",
            "tristar_read",
            "tristar_read",
            "tristar_write",
            "task_sleep",
            "tristar_read",
            "tristar_read"
        ],
        "ths7383_enable_acc_pwr": [
            "ths7383_enable_acc_pwr",
            "tristar_write",
            "power_enable_ldo",
            "tristar_write"
        ],
        "tristar_set_usb_brick_detect": [
            "tristar_set_usb_brick_detect",
            "ths7383_set_usb_brick_detect"
        ],
        "tristar_read_id": [
            "tristar_read_id",
            "ths7383_read_id"
        ],
        "tristar_enable_acc_pwr": [
            "tristar_enable_acc_pwr",
            "ths7383_enable_acc_pwr"
        ]
    },
    "drivers/pci": {
        "pci_init": [
            "pci_init",
            "platform_register_pci_busses"
        ],
        "pci_create_host_bridge": [
            "pci_create_host_bridge",
            "calloc",
            "sizeof",
            "strlcpy",
            "sizeof",
            "pci_register_bridge"
        ],
        "pci_bridge_probe": [
            "pci_bridge_probe",
            "dprintf",
            "pci",
            "system_time",
            "pci_bridge_config_read32",
            "time_has_elapsed",
            "dprintf",
            "pci",
            "calloc",
            "sizeof",
            "snprintf",
            "sizeof",
            "pci_config_read32",
            "pci_config_read8",
            "dprintf",
            "dprintf",
            "pci",
            "dprintf",
            "pci",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_read32",
            "pci_config_write32",
            "dprintf",
            "dprintf",
            "dprintf",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_read32",
            "pci_config_write32",
            "dprintf",
            "pci_find_capability",
            "pci_config_read16",
            "free"
        ],
        "pci_bridge_assign_secondary_bus": [
            "pci_bridge_assign_secondary_bus",
            "pci_is_bridge",
            "dprintf",
            "pci",
            "pci_config_write8",
            "pci_config_write8",
            "dprintf",
            "pci",
            "pci_config_write8",
            "pci_register_bridge"
        ],
        "pci_bridge_serr_enable": [
            "pci_bridge_serr_enable",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_free": [
            "pci_free",
            "sizeof",
            "sizeof",
            "panic",
            "pci_reinitialize_host_bridge",
            "pci_is_bridge",
            "pci_unregister_bridge",
            "free"
        ],
        "pci_config_read8": [
            "pci_config_read8",
            "pci_bridge_config_read8"
        ],
        "pci_config_read16": [
            "pci_config_read16",
            "pci_bridge_config_read16"
        ],
        "pci_config_read32": [
            "pci_config_read32",
            "pci_bridge_config_read32"
        ],
        "pci_config_write8": [
            "pci_config_write8",
            "pci_bridge_config_write8"
        ],
        "pci_config_write16": [
            "pci_config_write16",
            "pci_bridge_config_write16"
        ],
        "pci_config_write32": [
            "pci_config_write32",
            "pci_bridge_config_write32"
        ],
        "pci_is_bridge": [
            "pci_is_bridge"
        ],
        "pci_set_name": [
            "pci_set_name",
            "strlen",
            "sizeof",
            "strlcpy",
            "sizeof"
        ],
        "pci_get_bridge": [
            "pci_get_bridge"
        ],
        "pci_get_vendor_id": [
            "pci_get_vendor_id"
        ],
        "pci_get_device_id": [
            "pci_get_device_id"
        ],
        "pci_get_class_code": [
            "pci_get_class_code"
        ],
        "pci_get_revision_id": [
            "pci_get_revision_id"
        ],
        "pci_get_header_type": [
            "pci_get_header_type"
        ],
        "pci_memory_space_enable": [
            "pci_memory_space_enable",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_bus_master_enable": [
            "pci_bus_master_enable",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_get_bar_size": [
            "pci_get_bar_size"
        ],
        "pci_map_bar": [
            "pci_map_bar",
            "dprintf",
            "pci",
            "dprintf",
            "pci",
            "dprintf",
            "pci",
            "dprintf",
            "pci",
            "used",
            "pci_bridge_expand_memory_space",
            "dprintf",
            "pci",
            "platform_map_pci_to_host_addr",
            "dprintf",
            "pci",
            "llx",
            "pci_config_write32",
            "pci_config_write32"
        ],
        "pci_find_capability": [
            "pci_find_capability",
            "pci_config_read16",
            "dprintf",
            "pci",
            "pci_config_read8",
            "pci_config_read16",
            "dprintf",
            "pci"
        ],
        "pci_find_extended_capability": [
            "pci_find_extended_capability",
            "pci_config_read32",
            "dprintf"
        ],
        "pci_set_powerstate": [
            "pci_set_powerstate",
            "pci_find_capability",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_enable_pcie_ltr": [
            "pci_enable_pcie_ltr",
            "pci_find_capability",
            "dprintf",
            "pci_config_read32",
            "dprintf",
            "pci_find_extended_capability",
            "dprintf",
            "pci_enable_pcie_ltr",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_write16",
            "pci_config_write16"
        ],
        "pci_enable_pcie_aspm": [
            "pci_enable_pcie_aspm",
            "pci_find_capability",
            "pci_find_capability",
            "dprintf",
            "pci_config_read32",
            "pci_config_read32",
            "dprintf",
            "ASPM",
            "pci_config_read16",
            "pci_config_write16",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_set_pcie_common_clock": [
            "pci_set_pcie_common_clock",
            "dprintf",
            "pci_find_capability",
            "dprintf",
            "pci_find_capability",
            "dprintf",
            "pci_config_read16",
            "pci_config_write16",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_enable_pcie_cpm": [
            "pci_enable_pcie_cpm",
            "dprintf",
            "pci_find_capability",
            "dprintf",
            "pci_config_read16",
            "pci_config_write16"
        ],
        "pci_enable_pcie_l1ss": [
            "pci_enable_pcie_l1ss",
            "dprintf",
            "dprintf",
            "pci_find_extended_capability",
            "dprintf",
            "pci_find_extended_capability",
            "dprintf",
            "pci_config_read32",
            "pci_config_read32",
            "dprintf",
            "support",
            "dprintf",
            "t_power_on",
            "platform_get_pcie_l1ss_t_common_mode",
            "__max",
            "platform_get_pcie_l1ss_ltr_threshold",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_read32",
            "pci_config_write32",
            "pci_config_read32",
            "pci_config_write32",
            "first",
            "pci_config_write32",
            "pci_config_write32"
        ]
    },
    "drivers/display_pmu/beryllium": {
        "display_pmu_init": [
            "display_pmu_init",
            "ipod6_is_beryllium_supported",
            "ipod6_is_beryllium_supported",
            "summit_get_raw_panel_id",
            "summit_get_raw_panel_id",
            "sizeof",
            "RELEASE_ASSERT",
            "iic_read",
            "RELEASE_ASSERT",
            "iic_write",
            "RELEASE_ASSERT",
            "iic_write",
            "task_sleep",
            "RELEASE_ASSERT",
            "iic_write",
            "RELEASE_ASSERT",
            "iic_write"
        ],
        "display_pmu_quiesce": [
            "display_pmu_quiesce",
            "RELEASE_ASSERT",
            "iic_write"
        ],
        "display_pmu_update_device_tree": [
            "display_pmu_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof"
        ]
    },
    "drivers/display_pmu/chestnut": {
        "display_pmu_init": [
            "display_pmu_init",
            "chestnut_probe",
            "defined",
            "RELEASE_ASSERT",
            "iic_write",
            "Boost",
            "target_get_lcm_ldos",
            "RELEASE_ASSERT",
            "iic_write"
        ],
        "display_pmu_quiesce": [
            "display_pmu_quiesce",
            "RELEASE_ASSERT",
            "iic_write"
        ],
        "display_pmu_update_device_tree": [
            "display_pmu_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "bzero",
            "strlcpy",
            "chestnut_device_string"
        ]
    },
    "drivers/spi": {
        "spi_init": [
            "spi_init",
            "spi_sample_start",
            "spi_end"
        ],
        "spi_start": [
            "spi_start",
            "gpio_write"
        ],
        "spi_end": [
            "spi_end",
            "gpio_write"
        ],
        "spi_read": [
            "spi_read",
            "spi_sample_start",
            "spi_out",
            "spi_in",
            "spi_sample_end"
        ],
        "spi_write": [
            "spi_write",
            "spi_sample_start",
            "spi_out",
            "spi_in",
            "spi_sample_end"
        ]
    },
    "drivers/idt/idtp9022": {
        "charger_has_external": [
            "charger_has_external",
            "idt_read"
        ],
        "charger_set_charging": [
            "charger_set_charging",
            "pmu_charger_set_charging"
        ],
        "charger_print_status": [
            "charger_print_status",
            "pmu_charger_print_status",
            "idt_read",
            "dprintf",
            "charger_read_vrect",
            "dprintf",
            "printf"
        ]
    },
    "drivers/thunderbolt": {
        "tbt_cp_dump_route_string": [
            "tbt_cp_dump_route_string",
            "printf",
            "printf",
            "printf"
        ],
        "tbt_cp_packet_get_route_string": [
            "tbt_cp_packet_get_route_string"
        ],
        "tbt_cp_packet_set_route_string": [
            "tbt_cp_packet_set_route_string"
        ],
        "tbt_cp_dump_xdomain_message": [
            "tbt_cp_dump_xdomain_message",
            "tbt_cp_packet_get_route_string",
            "memcpy",
            "sizeof",
            "htonl",
            "printf",
            "tbt_cp_dump_route_string",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "tbt_cp_dump_message": [
            "tbt_cp_dump_message",
            "tbt_cp_packet_get_route_string",
            "printf",
            "tbt_cp_dump_route_string",
            "printf",
            "memcpy",
            "printf",
            "printf",
            "printf",
            "memcpy",
            "printf"
        ],
        "tbt_cp_quiesce_and_free": [
            "tbt_cp_quiesce_and_free",
            "task_wait_on",
            "task_destroy",
            "nhi_disable_tx_ring",
            "nhi_disable_rx_ring",
            "free"
        ],
        "tbt_cp_unregister_xd_service": [
            "tbt_cp_unregister_xd_service",
            "list_in_list",
            "panic",
            "containerof",
            "list_delete",
            "free"
        ],
        "tbt_cp_packet_available": [
            "tbt_cp_packet_available",
            "nhi_rx_buffer_available"
        ],
        "tbt_cp_process_packet": [
            "tbt_cp_process_packet",
            "nhi_rx_buffer",
            "sizeof",
            "dprintf",
            "dprintf",
            "tbt_cp_crc",
            "memcpy",
            "ntohl",
            "dprintf",
            "tbt_cp_dump_message",
            "tbt_cp_process_read_response",
            "tbt_cp_dump_message",
            "tbt_cp_process_write_response",
            "tbt_cp_process_plug_event",
            "tbt_cp_dump_message",
            "tbt_cp_process_error",
            "tbt_cp_dump_xdomain_message",
            "tbt_cp_process_xd_request",
            "tbt_cp_dump_xdomain_message",
            "tbt_cp_process_xd_response",
            "dprintf",
            "tbt_cp_dump_message"
        ],
        "tbt_cp_next_pdf_seq": [
            "tbt_cp_next_pdf_seq"
        ],
        "tbt_cp_send": [
            "tbt_cp_send",
            "htonl",
            "tbt_cp_crc",
            "sizeof",
            "nhi_send_sgl"
        ],
        "tbt_cp_send_acknowledgement": [
            "tbt_cp_send_acknowledgement",
            "htonl",
            "tbt_cp_send",
            "sizeof"
        ],
        "tbt_cp_read": [
            "tbt_cp_read",
            "tbt_cp_next_pdf_seq",
            "dprintf",
            "htonl",
            "htonl",
            "htonl",
            "tbt_cp_send",
            "sizeof",
            "event_wait_timeout",
            "ntohl"
        ],
        "tbt_cp_write": [
            "tbt_cp_write",
            "tbt_cp_next_pdf_seq",
            "dprintf",
            "htonl",
            "htonl",
            "htonl",
            "memcpy",
            "memcpy",
            "memcpy",
            "htonl",
            "memcpy",
            "tbt_cp_send",
            "ntohl",
            "event_wait_timeout"
        ],
        "tbt_cp_crc": [
            "tbt_cp_crc"
        ],
        "uuid_host_to_network": [
            "uuid_host_to_network"
        ],
        "uuid_network_to_host": [
            "uuid_network_to_host"
        ],
        "uuid_host_to_tbt": [
            "uuid_host_to_tbt",
            "memcpy",
            "memcpy",
            "memcpy",
            "memcpy",
            "htonl",
            "memcpy",
            "memcpy",
            "htonl",
            "memcpy"
        ],
        "uuid_tbt_to_host": [
            "uuid_tbt_to_host",
            "memcpy",
            "memcpy",
            "memcpy",
            "memcpy",
            "htonl",
            "memcpy",
            "memcpy",
            "htonl",
            "memcpy"
        ],
        "uuid_generate_v5": [
            "uuid_generate_v5",
            "uuid_network_to_host"
        ],
        "uuid_print": [
            "uuid_print",
            "printf",
            "printf"
        ],
        "ipipe_quiesce_and_free": [
            "ipipe_quiesce_and_free",
            "event_signal",
            "task_wait_on",
            "task_destroy",
            "free",
            "free"
        ],
        "ipipe_handle_packet": [
            "ipipe_handle_packet",
            "dprintf",
            "dprintf",
            "ipipe_handle_console_packet",
            "ipipe_handle_file_rx_packet",
            "ipipe_handle_file_tx_packet"
        ],
        "ipipe_start_file_rx": [
            "ipipe_start_file_rx",
            "security_allow_memory",
            "event_signal"
        ],
        "thunderboot_get_dfu_image": [
            "thunderboot_get_dfu_image",
            "ipipe_start_file_rx",
            "event_wait"
        ],
        "thunderboot_putchar": [
            "thunderboot_putchar",
            "cbuf_write_char",
            "event_wait",
            "event_signal"
        ],
        "thunderboot_serial_send_cmd_string": [
            "thunderboot_serial_send_cmd_string",
            "thunderboot_putchar"
        ],
        "thunderboot_transfer_prepare": [
            "thunderboot_transfer_prepare",
            "ipipe_start_file_rx",
            "callout_enqueue"
        ],
        "thunderboot_transfer_wait": [
            "thunderboot_transfer_wait",
            "event_wait"
        ],
        "thunderboot_quiesce_and_free": [
            "thunderboot_quiesce_and_free",
            "dprintf",
            "tbt_xd_discovery_quiesce_and_free",
            "tbt_cp_unregister_xd_service",
            "ipipe_quiesce_and_free",
            "tbt_cp_quiesce_and_free",
            "nhi_quiesce_and_free",
            "free"
        ],
        "thunderboot_handle_xdomain_response": [
            "thunderboot_handle_xdomain_response"
        ],
        "thunderboot_ipipe_send": [
            "thunderboot_ipipe_send",
            "memset",
            "tbt_cp_packet_set_route_string",
            "tbt_xd_packet_set_protocol_uuid",
            "tbt_xd_packet_set_type",
            "thunderboot_packet_set_sender_uuid",
            "thunderboot_packet_set_payload",
            "tbt_cp_next_pdf_seq",
            "tbt_xd_packet_set_len",
            "tbt_xd_packet_set_seq",
            "tbt_cp_send"
        ],
        "tbt_xd_discovery_quiesce_and_free": [
            "tbt_xd_discovery_quiesce_and_free",
            "tbt_cp_unregister_xd_service",
            "free"
        ],
        "tbt_xd_discovery_send_rom_changed_request": [
            "tbt_xd_discovery_send_rom_changed_request",
            "memset",
            "tbt_cp_packet_set_route_string",
            "tbt_xd_packet_set_protocol_uuid",
            "tbt_xd_packet_set_type",
            "tbt_xd_packet_set_payload",
            "sizeof",
            "tbt_cp_next_pdf_seq",
            "tbt_xd_packet_set_len",
            "tbt_xd_packet_set_seq",
            "tbt_cp_send"
        ]
    },
    "drivers/aes": {
        "aes_crypto_cmd": [
            "aes_crypto_cmd",
            "libcorecrypto",
            "panic",
            "likely",
            "likely",
            "aes_get_ccaes_cbc_decrypt_mode",
            "aes_get_ccaes_cbc_encrypt_mode",
            "cccbc_one_shot",
            "likely",
            "aes_get_ccaes_ecb_decrypt_mode",
            "aes_get_ccaes_ecb_encrypt_mode",
            "ccecb_one_shot",
            "memcpy",
            "AES_CBC_EncryptInPlace",
            "AES_CBC_DecryptInPlace",
            "aes_hw_crypto_cmd",
            "dprintf",
            "panic"
        ],
        "do_aes_cmd": [
            "do_aes_cmd",
            "system_time",
            "memset",
            "sizeof",
            "memset",
            "sizeof",
            "strcmp",
            "printf",
            "aes_cbc_encrypt",
            "sizeof",
            "strcmp",
            "printf",
            "aes_cbc_encrypt",
            "sizeof",
            "strcmp",
            "printf",
            "aes_cbc_encrypt",
            "sizeof",
            "printf",
            "hexdump",
            "memset",
            "aes_crypto_cmd",
            "printf",
            "hexdump",
            "memset",
            "aes_crypto_cmd",
            "printf",
            "hexdump"
        ],
        "do_aes_golden_vec_cmd": [
            "do_aes_golden_vec_cmd",
            "printf",
            "memset",
            "sizeof",
            "memset",
            "sizeof",
            "printf",
            "sizeof",
            "printf",
            "printf",
            "aes_crypto_cmd",
            "sizeof",
            "printf",
            "printf",
            "sizeof",
            "printf",
            "printf",
            "printf",
            "memset",
            "sizeof",
            "memset",
            "sizeof",
            "printf",
            "sizeof",
            "printf",
            "printf",
            "aes_crypto_cmd",
            "sizeof",
            "printf",
            "printf",
            "sizeof",
            "printf",
            "printf"
        ]
    },
    "drivers/dialog/pmu": {
        "charger_has_usb": [
            "charger_has_usb"
        ],
        "charger_has_external": [
            "charger_has_external"
        ],
        "charger_has_firewire": [
            "charger_has_firewire"
        ],
        "charger_has_batterypack": [
            "charger_has_batterypack"
        ],
        "charger_charge_done": [
            "charger_charge_done"
        ],
        "charger_get_max_charge_current": [
            "charger_get_max_charge_current"
        ],
        "charger_read_battery_level": [
            "charger_read_battery_level"
        ],
        "charger_clear_usb_state": [
            "charger_clear_usb_state"
        ],
        "charger_clear_alternate_usb_current_limit": [
            "charger_clear_alternate_usb_current_limit"
        ],
        "charger_set_charging": [
            "charger_set_charging"
        ],
        "dialog_workaround_7886796": [
            "dialog_workaround_7886796",
            "VBUS_THR",
            "STATUS_FLAG_TEST",
            "EVENT_FLAG_TEST",
            "dialog_set_data",
            "dialog_set_data",
            "task_sleep"
        ],
        "charger_read_battery_temperature": [
            "charger_read_battery_temperature",
            "dialog_read_battery_temperature"
        ],
        "dialog_charger_check_usb_change": [
            "dialog_charger_check_usb_change",
            "EVENT_REGISTER_TEST_MASK",
            "EVENT_REGISTER_TEST_MASK",
            "STATUS_FLAG_TEST",
            "extraction",
            "dialog_get_data",
            "dialog_input_current_limit_step_down",
            "dialog_log_charger_limit",
            "power_enable_charging"
        ],
        "charger_set_data": [
            "charger_set_data",
            "dialog_set_data"
        ],
        "charger_get_data": [
            "charger_get_data",
            "dialog_get_data"
        ],
        "charger_check_usb_change": [
            "charger_check_usb_change",
            "dialog_read_events",
            "dialog_read_status",
            "dialog_charger_check_usb_change"
        ],
        "charger_early_init": [
            "charger_early_init",
            "power_is_suspended",
            "dialog_get_data",
            "charger_get_data",
            "dprintf",
            "charger_set_data",
            "charger_set_data",
            "task_sleep",
            "charger_set_data",
            "dprintf",
            "charger_set_data",
            "panic",
            "dprintf"
        ],
        "charger_print_status": [
            "charger_print_status"
        ],
        "pmu_set_data": [
            "pmu_set_data",
            "iic_write",
            "sizeof",
            "dprintf",
            "failed",
            "iic_read",
            "sizeof",
            "dprintf",
            "dprintf"
        ],
        "pmu_get_data": [
            "pmu_get_data",
            "iic_read",
            "sizeof",
            "dprintf"
        ],
        "pmu_read_events": [
            "pmu_read_events",
            "bzero",
            "sizeof",
            "iic_read",
            "sizeof",
            "sizeof"
        ],
        "power_load_memory_calibration": [
            "power_load_memory_calibration",
            "bzero",
            "pmu_read_nvram",
            "power_read_memory_calibration_data",
            "power_read_memory_calibration_data",
            "dprintf"
        ],
        "power_store_memory_calibration": [
            "power_store_memory_calibration",
            "power_write_memory_calibration_data",
            "power_write_memory_calibration_data",
            "power_write_memory_calibration_data",
            "dprintf"
        ],
        "power_load_voltage_knobs": [
            "power_load_voltage_knobs",
            "bzero",
            "pmu_read_nvram"
        ],
        "power_store_voltage_knobs": [
            "power_store_voltage_knobs",
            "pmu_write_nvram"
        ],
        "pmu_uvwarn_config": [
            "pmu_uvwarn_config",
            "pmu_set_data",
            "pmu_get_data",
            "dprintf",
            "UV_CONF",
            "power_get_rail_value",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "panic"
        ],
        "pmu_read_brick_id_level": [
            "pmu_read_brick_id_level",
            "dialog_read_adc"
        ],
        "pmu_read_system_temperature": [
            "pmu_read_system_temperature",
            "dialog_read_adc",
            "dprintf",
            "lut_interpolate"
        ],
        "pmu_early_init": [
            "pmu_early_init",
            "pmu_get_data",
            "EVENT_FLAG_GET_BYTE",
            "dprintf",
            "HIB_MASK",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "power_is_suspended",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "target_config_dev",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_get_data",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_get_data",
            "pmu_get_data",
            "pmu_get_data",
            "pmu_set_data",
            "dprintf",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf",
            "silicon",
            "dprintf",
            "pmu_set_data",
            "panic"
        ],
        "pmu_setup": [
            "pmu_setup",
            "power_set_soc_voltage",
            "platform_get_base_soc_voltage",
            "power_set_cpu_voltage",
            "platform_get_base_cpu_voltage",
            "power_set_ram_voltage",
            "platform_get_base_ram_voltage",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "power_is_suspended",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "target_config_dev",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "dialog_use_setup",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dialog_lock_buck_vsel"
        ],
        "pmu_late_init": [
            "pmu_late_init",
            "pmu_get_data",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data"
        ],
        "pmu_check_events": [
            "pmu_check_events",
            "pmu_read_events",
            "pmu_read_status",
            "dialog_charger_check_usb_change",
            "EVENT_FLAG_TEST",
            "STATUS_FLAG_TEST",
            "EVENT_REGISTERS_GET_BYTE",
            "EVENT_FLAG_GET_BIT",
            "EVENT_FLAG_TEST",
            "EVENT_FLAG_TEST",
            "EVENT_FLAG_TEST"
        ],
        "power_get_nvram": [
            "power_get_nvram",
            "dialog_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram",
            "dialog_set_nvram"
        ],
        "power_clr_events": [
            "power_clr_events",
            "pmu_read_events",
            "pmu_write_mask"
        ],
        "pmu_shutdown": [
            "pmu_shutdown",
            "dialog_shutdown"
        ],
        "pmu_suspend": [
            "pmu_suspend",
            "dialog_shutdown"
        ],
        "pmu_set_backlight_enable": [
            "pmu_set_backlight_enable",
            "swi_backlight_enable",
            "swi_backlight_enable",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "dialog_use_setup"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_cpu_voltage": [
            "power_set_cpu_voltage",
            "sizeof",
            "sizeof",
            "pmu_set_data",
            "DIALOG_CPU_BUCKOUT"
        ],
        "power_set_ram_voltage": [
            "power_set_ram_voltage",
            "sizeof",
            "sizeof",
            "pmu_set_data",
            "DIALOG_RAM_BUCKOUT"
        ],
        "power_get_buck_value": [
            "power_get_buck_value",
            "DIALOG_CPU_BUCKOUT",
            "DIALOG_CORE_BUCKOUT",
            "DIALOG_RAM_BUCKOUT"
        ],
        "power_get_rail_value": [
            "power_get_rail_value",
            "power_get_buck_value"
        ],
        "power_convert_dwi_to_mv": [
            "power_convert_dwi_to_mv",
            "DIALOG_CPU_BUCKMV",
            "DIALOG_CORE_BUCKMV"
        ],
        "power_set_display_voltage_offset": [
            "power_set_display_voltage_offset",
            "defined",
            "defined",
            "defined",
            "defined",
            "pmu_set_data",
            "task_sleep",
            "pmu_set_data"
        ],
        "power_get_boot_flag": [
            "power_get_boot_flag",
            "EVENT_FLAG_GET_BIT",
            "pmu_read_events",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "EVENT_FLAG_TEST",
            "EVENT_FLAG_GET_BYTE",
            "EVENT_FLAG_GET_BIT",
            "attached",
            "they",
            "EVENT_REGISTER_TEST_MASK",
            "power_has_usb"
        ],
        "pmu_will_resume": [
            "pmu_will_resume",
            "use",
            "power_set_nvram"
        ],
        "power_read_dock_id": [
            "power_read_dock_id",
            "dialog_read_adc"
        ],
        "power_set_gpio": [
            "power_set_gpio",
            "pmu_get_data",
            "pmu_index2gpio_addr",
            "dprintf",
            "read",
            "pmu_set_data",
            "pmu_index2gpio_addr",
            "dprintf",
            "set"
        ],
        "power_get_gpio": [
            "power_get_gpio",
            "EVENT_FLAG_GET_BYTE",
            "kDIALOG_STATUS_GPIO_MASK",
            "EVENT_FLAG_GET_BIT",
            "kDIALOG_STATUS_GPIO_MASK",
            "pmu_get_data",
            "dprintf",
            "read"
        ],
        "power_gpio_configure": [
            "power_gpio_configure",
            "pmu_set_data",
            "pmu_index2gpio_addr",
            "dprintf",
            "configure"
        ],
        "power_set_ldo": [
            "power_set_ldo",
            "pmu_set_data"
        ],
        "power_enable_ldo": [
            "power_enable_ldo",
            "pmu_get_data",
            "pmu_set_data"
        ],
        "power_get_calendar_time": [
            "power_get_calendar_time",
            "pmu_read_nvram",
            "sizeof",
            "pmu_read_nvram",
            "sizeof",
            "pmu_read_nvram",
            "sizeof",
            "pmu_read_nvram",
            "sizeof",
            "pmu_read_nvram",
            "sizeof"
        ]
    },
    "drivers/usb": {
        "usb_core_init": [
            "usb_core_init",
            "usb_alloc_string_descriptor",
            "platform_get_usb_more_other_string",
            "platform_get_usb_vendor_id",
            "platform_get_usb_product_id",
            "platform_get_usb_device_version",
            "usb_create_string_descriptor",
            "platform_get_usb_manufacturer_string",
            "usb_create_string_descriptor",
            "platform_get_usb_product_string",
            "usb_create_string_descriptor",
            "platform_get_usb_serial_number_string",
            "usb_create_string_descriptor",
            "bzero",
            "event_init",
            "defined",
            "task_create",
            "task_start",
            "task_create",
            "task_start",
            "event_init",
            "task_create",
            "task_start",
            "event_init",
            "task_create",
            "task_start",
            "usb_controller_init"
        ],
        "usb_core_start": [
            "usb_core_start",
            "TARGET_USB_DEVICE_SELF_POWERED",
            "dprintf",
            "power_set_usb_enabled",
            "driver",
            "assume",
            "descriptors",
            "settings",
            "sizeof",
            "sizeof",
            "sizeof",
            "malloc",
            "malloc",
            "memcpy",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "usb_create_string_descriptor",
            "usb_create_string_descriptor",
            "sizeof",
            "sizeof",
            "memcpy",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "usb_controller_start"
        ],
        "usb_core_register_interface": [
            "usb_core_register_interface",
            "dprintf"
        ],
        "usb_core_handle_usb_control_receive": [
            "usb_core_handle_usb_control_receive",
            "handle_ep0_data_phase",
            "print",
            "memcpy",
            "sizeof",
            "handle_standard_device_request",
            "handle_vendor_device_request",
            "handle_vendor_request",
            "usb_core_send_zlp",
            "handle_request",
            "usb_core_send_zlp",
            "usb_controller_stall_endpoint",
            "usb_controller_stall_endpoint",
            "dprintf"
        ],
        "usb_core_event_handler": [
            "usb_core_event_handler",
            "deactivate_interface",
            "event_signal",
            "print",
            "usb_controller_abort_endpoint",
            "usb_controller_set_address",
            "handle_bus_reset",
            "deactivate_interface",
            "print",
            "usb_controller_get_connection_speed"
        ],
        "usb_core_get_connection_speed": [
            "usb_core_get_connection_speed",
            "usb_controller_get_connection_speed"
        ],
        "usb_core_get_cable_state": [
            "usb_core_get_cable_state"
        ],
        "usb_core_complete_endpoint_io": [
            "usb_core_complete_endpoint_io",
            "callback",
            "free"
        ],
        "usb_core_send_zlp": [
            "usb_core_send_zlp",
            "alloc_ep0_device_io_request",
            "usb_controller_stall_endpoint",
            "dprintf",
            "usb_controller_do_endpoint_io"
        ],
        "usb_core_activate_endpoint": [
            "usb_core_activate_endpoint",
            "usb_controller_activate_endpoint"
        ],
        "usb_core_abort_endpoint": [
            "usb_core_abort_endpoint",
            "usb_controller_abort_endpoint"
        ],
        "usb_core_deactivate_endpoint": [
            "usb_core_deactivate_endpoint",
            "usb_controller_abort_endpoint",
            "usb_controller_deactivate_endpoint"
        ],
        "usb_core_stop": [
            "usb_core_stop",
            "usb_controller_stop",
            "usb_core_free",
            "power_set_usb_enabled"
        ],
        "usb_core_free": [
            "usb_core_free",
            "usb_controller_free",
            "free",
            "free",
            "free",
            "free",
            "usb_free_string_descriptors"
        ],
        "usb_serial_early_init": [
            "usb_serial_early_init",
            "memalign",
            "sizeof",
            "bzero",
            "sizeof",
            "cbuf_create",
            "dprintf",
            "event_init"
        ],
        "usb_serial_init": [
            "usb_serial_init",
            "dprintf",
            "memalign",
            "sizeof",
            "dprintf",
            "bzero",
            "sizeof",
            "usb_core_register_interface"
        ],
        "usb_serial_putchar": [
            "usb_serial_putchar",
            "cbuf_write_char",
            "usb_serial_get_max_packet_size",
            "usb_serial_flush_write_cbuf",
            "cbuf_write_char"
        ],
        "usb_serial_exit": [
            "usb_serial_exit",
            "cbuf_destroy",
            "free",
            "free"
        ],
        "usb_serial_send_cmd_string": [
            "usb_serial_send_cmd_string",
            "usb_core_do_transfer"
        ],
        "usb_serial_is_active": [
            "usb_serial_is_active"
        ],
        "usb_controller_register": [
            "usb_controller_register",
            "dprintf",
            "bcopy",
            "sizeof",
            "bzero",
            "sizeof"
        ],
        "usb_controller_init": [
            "usb_controller_init",
            "RELEASE_ASSERT",
            "init"
        ],
        "usb_controller_free": [
            "usb_controller_free",
            "RELEASE_ASSERT",
            "free_func"
        ],
        "usb_controller_start": [
            "usb_controller_start",
            "RELEASE_ASSERT",
            "start"
        ],
        "usb_controller_stop": [
            "usb_controller_stop",
            "RELEASE_ASSERT",
            "stop"
        ],
        "usb_controller_set_address": [
            "usb_controller_set_address",
            "RELEASE_ASSERT",
            "set_address"
        ],
        "usb_controller_get_connection_speed": [
            "usb_controller_get_connection_speed",
            "RELEASE_ASSERT",
            "get_connection_speed"
        ],
        "usb_controller_activate_endpoint": [
            "usb_controller_activate_endpoint",
            "RELEASE_ASSERT",
            "activate_endpoint"
        ],
        "usb_controller_do_endpoint_io": [
            "usb_controller_do_endpoint_io",
            "RELEASE_ASSERT",
            "do_endpoint_io"
        ],
        "usb_controller_stall_endpoint": [
            "usb_controller_stall_endpoint",
            "RELEASE_ASSERT",
            "stall_endpoint"
        ],
        "usb_controller_reset_endpoint_data_toggle": [
            "usb_controller_reset_endpoint_data_toggle",
            "RELEASE_ASSERT",
            "reset_endpoint_data_toggle"
        ],
        "usb_controller_is_endpoint_stalled": [
            "usb_controller_is_endpoint_stalled",
            "RELEASE_ASSERT",
            "is_endpoint_stalled"
        ],
        "usb_controller_do_test_mode": [
            "usb_controller_do_test_mode",
            "RELEASE_ASSERT",
            "do_test_mode"
        ],
        "usb_controller_abort_endpoint": [
            "usb_controller_abort_endpoint",
            "RELEASE_ASSERT",
            "abort_endpoint"
        ],
        "usb_controller_deactivate_endpoint": [
            "usb_controller_deactivate_endpoint",
            "RELEASE_ASSERT",
            "deactivate_endpoint"
        ],
        "usb_send_data_to_file": [
            "usb_send_data_to_file",
            "usb_cmd_put"
        ],
        "getDFUImage": [
            "getDFUImage",
            "dprintf",
            "print",
            "platform_init_usb",
            "usb_init",
            "event_wait",
            "dprintf",
            "print",
            "usb_quiesce"
        ],
        "usb_dfu_init": [
            "usb_dfu_init",
            "memalign",
            "sizeof",
            "bzero",
            "sizeof",
            "set_status",
            "event_init",
            "usb_core_register_interface"
        ],
        "usb_dfu_exit": [
            "usb_dfu_exit",
            "bzero",
            "sizeof",
            "free"
        ],
        "usb_transfer_init": [
            "usb_transfer_init",
            "event_init",
            "usb_core_register_interface"
        ],
        "usb_transfer_exit": [
            "usb_transfer_exit"
        ],
        "usb_transfer_prepare": [
            "usb_transfer_prepare",
            "print",
            "env_set_uint",
            "security_allow_memory",
            "dprintf",
            "usb_core_get_connection_speed",
            "usb_core_abort_endpoint",
            "usb_core_do_transfer",
            "security_allow_memory",
            "dprintf",
            "usb_core_get_connection_speed",
            "usb_core_abort_endpoint",
            "usb_core_abort_endpoint",
            "usb_core_do_transfer",
            "usb_core_do_transfer",
            "callout_enqueue"
        ],
        "usb_transfer_start": [
            "usb_transfer_start",
            "print",
            "event_wait",
            "dprintf",
            "dprintf"
        ],
        "usb_early_init": [
            "usb_early_init",
            "usb_serial_early_init",
            "usb_free"
        ],
        "usb_init_with_controller": [
            "usb_init_with_controller",
            "usb_controller_register",
            "require",
            "usb_core_init",
            "require",
            "usb_dfu_init",
            "require",
            "usb_core_init",
            "require",
            "usb_transfer_init",
            "require",
            "usb_serial_init",
            "require",
            "usb_core_start",
            "dprintf",
            "dprintf",
            "usb_free"
        ],
        "usb_init": [
            "usb_init",
            "synopsys_otg_controller_init",
            "usb_init_with_controller",
            "synopsys_otg_controller_init"
        ],
        "usb_quiesce": [
            "usb_quiesce",
            "usb_core_stop",
            "usb_free",
            "usb_controller_register"
        ]
    },
    "sys": {
        "system_time": [
            "system_time",
            "timer_ticks_to_usecs",
            "timer_get_ticks"
        ],
        "time_has_elapsed": [
            "time_has_elapsed",
            "system_time"
        ],
        "spin": [
            "spin",
            "system_time",
            "system_time"
        ],
        "calendar_time": [
            "calendar_time",
            "power_get_calendar_time"
        ],
        "test_list_is_empty": [
            "test_list_is_empty",
            "LIST_INITIAL_VALUE",
            "TEST_ASSERT",
            "list_is_empty",
            "list_add_head",
            "TEST_ASSERT",
            "list_is_empty",
            "list_initialize",
            "TEST_ASSERT",
            "list_is_empty",
            "list_add_head",
            "TEST_ASSERT",
            "list_is_empty"
        ],
        "test_list_add_head": [
            "test_list_add_head",
            "LIST_INITIAL_VALUE",
            "list_add_head",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_add_head",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_add_head",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ"
        ],
        "test_list_add_tail": [
            "test_list_add_tail",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_add_tail",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_add_tail",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ"
        ],
        "test_list_remove_head": [
            "test_list_remove_head",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_add_tail",
            "list_add_tail",
            "list_remove_head",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_remove_head",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_remove_head",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "TEST_ASSERT",
            "list_is_empty",
            "list_remove_head",
            "TEST_ASSERT_NULL",
            "TEST_ASSERT",
            "list_is_empty"
        ],
        "test_list_remove_tail": [
            "test_list_remove_tail",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_add_tail",
            "list_add_tail",
            "list_remove_tail",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_remove_tail",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "list_for_every",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_PTR_EQ",
            "list_remove_tail",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT",
            "list_in_list",
            "TEST_ASSERT",
            "list_is_empty",
            "list_remove_head",
            "TEST_ASSERT_NULL",
            "TEST_ASSERT",
            "list_is_empty"
        ],
        "test_safe_unlink_double_free": [
            "test_safe_unlink_double_free",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_add_tail",
            "list_delete",
            "TEST_EXPECT_PANIC",
            "list_delete",
            "TEST_EXPECT_PANICKED"
        ],
        "test_safe_unlink_next_corrupt": [
            "test_safe_unlink_next_corrupt",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_add_tail",
            "TEST_EXPECT_PANIC",
            "list_delete",
            "TEST_EXPECT_PANICKED"
        ],
        "test_safe_unlink_prev_corrupt": [
            "test_safe_unlink_prev_corrupt",
            "LIST_INITIAL_VALUE",
            "list_add_tail",
            "list_add_tail",
            "TEST_EXPECT_PANIC",
            "list_delete",
            "TEST_EXPECT_PANICKED"
        ],
        "mem_static_map_physical": [
            "mem_static_map_physical",
            "mem_static_find_virtual"
        ],
        "process_command_line": [
            "process_command_line",
            "get_line",
            "system_time",
            "tokenize",
            "LINKER_SET_FOREACH",
            "strcmp",
            "strtol",
            "strtoul",
            "strtol",
            "strcmp",
            "strcmp",
            "func",
            "env_set_uint"
        ],
        "menu_task": [
            "menu_task",
            "malloc",
            "event_signal",
            "getchar",
            "system_time"
        ],
        "callout_enqueue": [
            "callout_enqueue",
            "unlikely",
            "callout_init",
            "enter_critical_section",
            "_callout_dequeue",
            "timer_get_ticks",
            "timer_usecs_to_ticks",
            "printf",
            "ticks",
            "list_for_every_entry",
            "list_add_before",
            "list_add_tail",
            "_callout_reset_deadline",
            "exit_critical_section"
        ],
        "callout_dequeue": [
            "callout_dequeue",
            "enter_critical_section",
            "_callout_dequeue",
            "exit_critical_section"
        ],
        "callout_reset": [
            "callout_reset",
            "enter_critical_section",
            "_callout_dequeue",
            "callout_enqueue",
            "exit_critical_section"
        ],
        "callout_reset_deadline": [
            "callout_reset_deadline",
            "enter_critical_section",
            "_callout_reset_deadline",
            "exit_critical_section"
        ],
        "sha384_calculate": [
            "sha384_calculate",
            "RELEASE_ASSERT",
            "ccdigest",
            "ccsha384_di"
        ],
        "hash_calculate": [
            "hash_calculate",
            "RELEASE_ASSERT",
            "sha384_calculate",
            "sha1_calculate"
        ],
        "do_sha384": [
            "do_sha384",
            "printf",
            "printf",
            "security_allow_memory",
            "printf",
            "sha384_calculate",
            "sizeof",
            "printf",
            "printf"
        ],
        "debug_getchar": [
            "debug_getchar",
            "event_wait",
            "cbuf_read_char"
        ],
        "debug_getchar_nowait": [
            "debug_getchar_nowait",
            "cbuf_read_char"
        ],
        "debug_pushchar": [
            "debug_pushchar",
            "cbuf_write_char"
        ],
        "debug_init": [
            "debug_init",
            "cbuf_create"
        ],
        "debug_enable_uarts": [
            "debug_enable_uarts"
        ],
        "debug_putchar": [
            "debug_putchar",
            "usb_serial_putchar",
            "thunderboot_putchar",
            "defined",
            "uart_putc",
            "uart_putc",
            "defined",
            "uart_putc",
            "uart_putc",
            "arm_write_dcc_char",
            "shmcon_putc",
            "shmcon_putc",
            "dockfifo_uart_putc",
            "dockfifo_uart_putc",
            "dockchannel_uart_putc",
            "dockchannel_uart_putc",
            "application_putchar"
        ],
        "debug_run_script": [
            "debug_run_script",
            "printf",
            "debug_pushchar",
            "debug_pushchar",
            "printf",
            "script"
        ],
        "_panic": [
            "_panic",
            "arch_spin",
            "enter_critical_section",
            "memcpy",
            "sizeof",
            "strlcat",
            "sizeof",
            "platform_cache_operation",
            "puts",
            "puts",
            "puts",
            "arch_spin",
            "timer_get_ticks",
            "va_start",
            "vsnprintf",
            "sizeof",
            "va_end",
            "platform_cache_operation",
            "puts",
            "puts",
            "puts",
            "puts",
            "puts",
            "consistent_debug_update_ap_cpr",
            "mem_static_map_physical",
            "sizeof",
            "consistent_debug_register_header",
            "LINKER_SET_FOREACH",
            "func",
            "platform_cache_operation",
            "platform_reset",
            "halt"
        ],
        "abort": [
            "abort",
            "panic"
        ],
        "halt": [
            "halt",
            "printf",
            "prepare_and_jump",
            "arch_spin"
        ],
        "sys_init_stack_cookie": [
            "sys_init_stack_cookie",
            "random_get_bytes",
            "sizeof",
            "random_get_bytes",
            "sizeof",
            "sizeof"
        ],
        "task_init": [
            "task_init",
            "dprintf",
            "timer_get_ticks",
            "task_init_stack_magic_cookie",
            "wait_queue_init",
            "task_create_etc",
            "sizeof",
            "defined",
            "defined"
        ],
        "task_destroy": [
            "task_destroy",
            "list_delete",
            "free",
            "free"
        ],
        "task_yield": [
            "task_yield",
            "timer_get_ticks",
            "likely",
            "likely",
            "likely",
            "defined",
            "defined",
            "task_init",
            "unlikely",
            "panic",
            "unlikely",
            "panic",
            "enter_critical_section",
            "callout_dequeue",
            "insert_run_q_tail",
            "pop_run_q_head",
            "dprintf",
            "p",
            "p",
            "arch_task_context_switch",
            "timer_get_ticks",
            "exit_critical_section"
        ],
        "task_start": [
            "task_start",
            "enter_critical_section",
            "insert_run_q_tail",
            "exit_critical_section"
        ],
        "task_exit": [
            "task_exit",
            "wait_queue_wake_all",
            "task_yield",
            "panic"
        ],
        "task_wait_on": [
            "task_wait_on",
            "task_block"
        ],
        "task_block": [
            "task_block",
            "enter_critical_section",
            "list_add_tail",
            "task_yield",
            "exit_critical_section"
        ],
        "task_sleep": [
            "task_sleep",
            "enter_critical_section",
            "callout_enqueue",
            "task_yield",
            "exit_critical_section"
        ],
        "wait_queue_init": [
            "wait_queue_init",
            "list_initialize"
        ],
        "wait_queue_destroy": [
            "wait_queue_destroy",
            "wait_queue_wake_all"
        ],
        "wait_queue_wake_all": [
            "wait_queue_wake_all",
            "enter_critical_section",
            "list_for_every_entry_safe",
            "list_delete",
            "insert_run_q_tail",
            "exit_critical_section"
        ],
        "wait_queue_wake_one": [
            "wait_queue_wake_one",
            "enter_critical_section",
            "list_remove_head_type",
            "insert_run_q_tail",
            "exit_critical_section"
        ],
        "task_get_statistics": [
            "task_get_statistics",
            "enter_critical_section",
            "timer_get_ticks",
            "timer_get_tick_rate",
            "exit_critical_section"
        ],
        "task_set_idle_threshold": [
            "task_set_idle_threshold"
        ],
        "event_init": [
            "event_init",
            "wait_queue_init"
        ],
        "event_signal": [
            "event_signal",
            "enter_critical_section",
            "wait_queue_wake_one",
            "wait_queue_wake_all",
            "exit_critical_section"
        ],
        "event_unsignal": [
            "event_unsignal"
        ],
        "event_wait": [
            "event_wait",
            "enter_critical_section",
            "task_block",
            "exit_critical_section"
        ],
        "event_wait_timeout": [
            "event_wait_timeout",
            "enter_critical_section",
            "callout_enqueue",
            "task_block",
            "callout_dequeue",
            "exit_critical_section"
        ],
        "prepare_and_jump": [
            "prepare_and_jump",
            "platform_get_boot_trampoline",
            "platform_watchdog_tickle",
            "platform_bootprep",
            "platform_quiesce_hardware",
            "heap_verify",
            "enter_critical_section",
            "PROFILE_HANDOFF",
            "arch_cpu_quiesce",
            "trampoline",
            "entry"
        ],
        "_enter_critical_section": [],
        "enter_critical_section": [
            "enter_critical_section",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "arch_disable_ints"
        ],
        "_exit_critical_section": [],
        "exit_critical_section": [
            "exit_critical_section",
            "RELEASE_ASSERT",
            "arch_enable_ints"
        ],
        "_irq_enter_critical_section": [
            "_irq_enter_critical_section",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT"
        ],
        "_irq_exit_critical_section": [
            "_irq_exit_critical_section",
            "RELEASE_ASSERT"
        ],
        "sys_init": [
            "sys_init",
            "__segment_end",
            "computed",
            "mib_get_bool",
            "random_get_bytes_noheap",
            "sizeof",
            "heap_set_cookie",
            "heap_add_chunk",
            "security_init",
            "sys_setup_default_environment",
            "task_init",
            "init",
            "arch_cpu_init_posttasks",
            "debug_init"
        ],
        "test_sha384": [
            "test_sha384",
            "sizeof",
            "sha384_calculate",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "sizeof"
        ],
        "security_init": [
            "security_init",
            "platform_get_secure_mode",
            "platform_get_current_production_mode",
            "platform_get_lock_fuses_required",
            "security_clear_mem_in_chunks",
            "security_clear_mem_in_chunks",
            "security_protect_memory",
            "ramdisk_init",
            "dt_init"
        ],
        "security_allow_modes": [
            "security_allow_modes",
            "security_set_untrusted"
        ],
        "security_validate_image": [
            "security_validate_image",
            "security_allow_modes"
        ],
        "security_allow_memory": [
            "security_allow_memory",
            "security_allow_modes"
        ],
        "security_protect_memory": [
            "security_protect_memory",
            "security_allow_modes"
        ],
        "security_enable_kdp": [
            "security_enable_kdp",
            "security_allow_modes"
        ],
        "security_set_untrusted": [
            "security_set_untrusted"
        ],
        "security_set_production_override": [
            "security_set_production_override"
        ],
        "security_get_production_override": [
            "security_get_production_override"
        ],
        "security_get_effective_production_status": [
            "security_get_effective_production_status",
            "platform_get_current_production_mode"
        ],
        "security_set_boot_manifest_hash": [
            "security_set_boot_manifest_hash",
            "memcpy",
            "sizeof"
        ],
        "security_get_boot_manifest_hash": [
            "security_get_boot_manifest_hash",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "sizeof",
            "memcpy"
        ],
        "security_set_mix_n_match_prevention_status": [
            "security_set_mix_n_match_prevention_status"
        ],
        "security_get_mix_n_match_prevention_status": [
            "security_get_mix_n_match_prevention_status"
        ],
        "security_set_lock_fuses": [
            "security_set_lock_fuses"
        ],
        "security_get_lock_fuses": [
            "security_get_lock_fuses"
        ],
        "security_restore_environment": [
            "security_restore_environment",
            "security_set_mix_n_match_prevention_status",
            "platform_get_mix_n_match_prevention_status",
            "platform_get_boot_manifest_hash",
            "security_set_boot_manifest_hash",
            "security_set_boot_manifest_hash",
            "security_get_production_override",
            "security_set_production_override"
        ],
        "security_consolidate_environment": [
            "security_consolidate_environment",
            "security_get_production_override",
            "platform_demote_production",
            "security_allow_modes",
            "platform_disable_keys",
            "security_allow_modes",
            "platform_disable_keys",
            "platform_set_boot_manifest_hash",
            "platform_set_boot_manifest_hash",
            "platform_set_mix_n_match_prevention_status"
        ],
        "security_create_sleep_token": [
            "security_create_sleep_token",
            "memcpy",
            "sizeof",
            "security_allow_modes",
            "memcpy",
            "sizeof",
            "aes_cbc_encrypt",
            "sizeof",
            "aes_cbc_encrypt",
            "sizeof",
            "memset",
            "sizeof"
        ],
        "security_validate_sleep_token": [
            "security_validate_sleep_token",
            "security_allow_modes",
            "memcpy",
            "sizeof",
            "memcpy",
            "sizeof",
            "aes_cbc_encrypt",
            "sizeof",
            "aes_cbc_encrypt",
            "sizeof",
            "memcmp_secure",
            "sizeof",
            "memcmp_secure",
            "sizeof",
            "security_allow_modes",
            "memset",
            "sizeof",
            "memset",
            "sizeof"
        ],
        "security_sidp_seal_rom_manifest": [
            "security_sidp_seal_rom_manifest",
            "sizeof",
            "memcpy",
            "platform_sidp_set_rom_manifest",
            "platform_sidp_set_rom_manifest",
            "platform_sidp_lock_rom_manifest"
        ],
        "security_sidp_seal_boot_manifest": [
            "security_sidp_seal_boot_manifest",
            "RELEASE_ASSERT",
            "platform_sidp_boot_manifest_locked",
            "panic",
            "dprintf",
            "sizeof",
            "memcpy",
            "platform_sidp_set_boot_manifest",
            "platform_sidp_set_boot_manifest",
            "security_get_mix_n_match_prevention_status",
            "platform_sidp_set_mix_n_match",
            "platform_sidp_lock_boot_manifest"
        ]
    },
    "target/ipad5": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init",
            "pmgr_update_dvfm",
            "platform_get_board_id",
            "ipad5_get_board_rev",
            "pmgr_update_gfx_states",
            "platform_get_board_id",
            "ipad5_get_board_rev",
            "check_board_supported"
        ],
        "target_late_init": [
            "target_late_init",
            "board_type_preproto",
            "board_type_proto",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "board_type_proto1",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/ipad5/include/target": {},
    "target/iphone5b": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "iphone5b_get_board_rev",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "iphone5b_get_board_rev",
            "iic_write"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_has_tristar2": [
            "target_has_tristar2",
            "iphone5b_get_board_rev"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "topology",
            "topology",
            "iphone5b_with_chestnut_split_rail",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindProperty",
            "iphone5b_with_chestnut_split_rail",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "iphone5b_get_board_rev",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "iphone5b_with_chestnut_split_rail",
            "memset",
            "strlcpy",
            "FindProperty",
            "iphone5b_with_chestnut_split_rail",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "display_pmu_update_device_tree"
        ]
    },
    "target/iphone5b/include/target": {},
    "target/iphone6": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "is_mesa_supported",
            "gpio_configure",
            "gpio_configure_pupdn",
            "iphone6_get_board_rev",
            "iic_write",
            "iphone6_get_board_rev",
            "iphone6_get_board_rev",
            "LDO9",
            "iic_write",
            "iphone6_get_board_rev",
            "gpio_configure_pupdn",
            "iic_write",
            "iic_read",
            "sizeof",
            "sizeof",
            "iic_write",
            "iic_write",
            "iic_write"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_has_tristar2": [
            "target_has_tristar2",
            "iphone6_get_board_rev"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "is_n51_proto2_board",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "is_dev1_board",
            "is_n51_proto2_board",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "is_dev1_board",
            "is_n51_proto2_board",
            "memset",
            "strlcpy",
            "is_n51_proto2_board",
            "FindProperty",
            "is_dev1_board",
            "FindNode",
            "FindProperty",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "target_config_ap",
            "iphone6_get_board_rev",
            "target_config_ap",
            "iphone6_get_board_rev",
            "FindNode",
            "FindProperty",
            "display_pmu_update_device_tree"
        ]
    },
    "target/iphone6/include/target": {},
    "target/ipad3b": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_ap",
            "ipad3b_get_board_rev",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "ipad3b_get_board_rev",
            "sizeof",
            "iic_write",
            "sizeof",
            "iic_read",
            "iic_write",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "target_config_dev",
            "ipad3b_get_board_rev",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "strlcpy"
        ]
    },
    "target/ipad3b/include/target": {},
    "target/n94": {
        "target_early_init": [
            "target_early_init",
            "n94_get_board_rev",
            "sizeof",
            "sizeof",
            "iic_write"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_dev",
            "n94_get_board_rev",
            "platform_not_supported",
            "n94_get_board_rev",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_lookup_backlight_cal": [
            "target_lookup_backlight_cal"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "n94_get_board_rev",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "power_gpio_configure",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/n94/include/target": {},
    "target/n69": {
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity",
            "gasgauge_read_temperature",
            "power_get_available_charge_current"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_ap",
            "n69_get_board_rev",
            "dprintf",
            "platform_not_supported",
            "power_set_gpio"
        ],
        "target_init": [
            "target_init",
            "n69_get_board_rev",
            "flash_nor_init",
            "dprintf",
            "x"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "display_pmu_update_device_tree"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/n69/include/target": {},
    "target/j33i": {
        "target_early_init": [
            "target_early_init",
            "interval",
            "iic_set_filter",
            "iic_set_frequency"
        ],
        "target_late_init": [
            "target_late_init",
            "mcu_init",
            "hdmi_device_wait_started",
            "hdmi_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "mcu_quiesce_uart"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init",
            "mcu_start_recover"
        ],
        "target_bootprep": [
            "target_bootprep",
            "hdmi_device_wait_started",
            "mcu_start_boot"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "reboot"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "FindNode",
            "FindProperty",
            "j33i_get_board_rev"
        ]
    },
    "target/j33i/include/target": {},
    "target/b184": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set"
        ],
        "target_has_tristar2": [
            "target_has_tristar2"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/b184/include/target": {},
    "target/t8010fpga": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "sizeof",
            "sizeof",
            "FindNode",
            "FindProperty",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/t8010fpga/include/target": {
        "dcs_init_config_fixup_params": [
            "dcs_init_config_fixup_params"
        ]
    },
    "target/iaccy1": {
        "target_init": [
            "target_init",
            "flash_nor_init",
            "gpio_configure"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "syscfgCopyDataForTag": [
            "syscfgCopyDataForTag",
            "unused"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ],
        "display_get_info": [
            "display_get_info"
        ]
    },
    "target/iaccy1/include/target": {},
    "target/iphone8": {
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity",
            "gasgauge_read_temperature",
            "power_get_available_charge_current"
        ],
        "target_precharge_gg_flag_mask": [
            "target_precharge_gg_flag_mask",
            "LLB",
            "env_get",
            "strstr",
            "strtoul"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "iphone8_get_board_rev",
            "target_config_ap",
            "iphone8_get_board_rev",
            "dprintf",
            "platform_not_supported",
            "target_config_dev",
            "iphone8_get_board_rev",
            "dprintf",
            "platform_not_supported",
            "power_set_gpio"
        ],
        "iphone8_use_stockholm_gpio": [
            "iphone8_use_stockholm_gpio",
            "target_config_ap",
            "iphone8_get_board_rev"
        ],
        "target_init": [
            "target_init",
            "iphone8_get_board_rev",
            "flash_nor_init",
            "dprintf",
            "x",
            "iphone8_get_display_type",
            "iphone8_use_stockholm_gpio",
            "GPIO_ID",
            "dprintf",
            "gpio_fixup_pinconfig",
            "target_config_dev",
            "iphone8_get_board_rev",
            "GPIO_ID",
            "dprintf",
            "gpio_fixup_pinconfig",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf",
            "kD2255_PWRONOFF_LDO8_EN",
            "target_config_ap",
            "iphone8_get_board_rev",
            "v27a",
            "GPIO_ID",
            "GPIO_ID",
            "dprintf",
            "gpio_fixup_pinconfig"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "iphone8_use_stockholm_gpio",
            "DOE",
            "boot",
            "target_init",
            "target_config_dev",
            "iphone8_get_board_rev",
            "FindNode",
            "FindProperty",
            "target_config_ap",
            "iphone8_get_board_rev",
            "iphone8_get_board_rev",
            "FindNode",
            "FindProperty",
            "setting",
            "FindNode",
            "iphone8_get_display_type",
            "FindProperty",
            "strlcpy",
            "strlcpy",
            "strlcpy",
            "strlcpy",
            "panic",
            "FindNode",
            "iphone8_get_display_type",
            "FindProperty",
            "strlcpy",
            "strlcpy",
            "strlcpy",
            "panic",
            "iphone8_use_lm3534",
            "dt_find_node",
            "dt_has_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_rename_prop",
            "dt_set_prop_str",
            "dt_find_node",
            "dt_has_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_rename_prop",
            "dt_set_prop_str",
            "dt_find_node",
            "dt_has_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_rename_prop",
            "dt_set_prop_str",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "VPBR",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "VPBR",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "target_config_dev",
            "iphone8_get_board_rev",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "dt_remove_prop",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "display_pmu_update_device_tree"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/iphone8/include/target": {},
    "target/mauiref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "power_set_gpio"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "display_pmu_update_device_tree"
        ],
        "charger_set_usb_brick_detect": [
            "charger_set_usb_brick_detect",
            "platform_set_usb_brick_detect"
        ]
    },
    "target/mauiref/include/target": {},
    "target/m7ref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree"
        ],
        "power_load_memory_calibration": [
            "power_load_memory_calibration"
        ],
        "power_store_memory_calibration": [
            "power_store_memory_calibration"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "charger_has_external": [
            "charger_has_external"
        ],
        "charger_set_charging": [
            "charger_set_charging"
        ]
    },
    "target/m7ref/include/target": {},
    "target/j105": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_early_init": [
            "target_early_init",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "target_fixup_pmu"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_dev",
            "j105_get_board_rev",
            "platform_not_supported",
            "target_config_ap",
            "j105_get_board_rev",
            "platform_not_supported",
            "dp_device_wait_started",
            "displayport_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dp_device_wait_started"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "reboot",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "RBDA",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property"
        ]
    },
    "target/j105/include/target": {},
    "target/iphone7": {
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity",
            "iphone7_get_board_rev",
            "gasgauge_read_temperature",
            "power_get_available_charge_current"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "iphone7_get_display_info"
        ],
        "target_early_init": [
            "target_early_init",
            "iphone7_get_display_info",
            "target_get_display_panel_type",
            "clock_set_frequency",
            "clock_set_frequency",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "printf",
            "power_set_ldo",
            "printf",
            "target_fixup_power",
            "builds",
            "iphone7_get_board_type",
            "power_enable_ldo"
        ],
        "target_late_init": [
            "target_late_init",
            "clock_gate"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "iphone7_get_board_type",
            "GPIO_ID",
            "GPIO_ID",
            "dprintf",
            "gpio_fixup_pinconfig"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "target_get_display_panel_type",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr",
            "target_get_display_panel_type"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "iphone7_get_board_type",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "target_config_dev",
            "read",
            "FindProperty",
            "panic",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "FindNode",
            "FindProperty",
            "target_config_ap",
            "panic",
            "target_get_display_panel_type",
            "memset",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "dprintf",
            "panic",
            "panic",
            "FindNode",
            "FindProperty",
            "dprintf",
            "panic",
            "panic",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "target_get_display_panel_type",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "GPIO14",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindNode",
            "chipid_get_chip_revision",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "display_pmu_update_device_tree"
        ]
    },
    "target/iphone7/include/target": {},
    "target/n102": {
        "target_early_init": [
            "target_early_init",
            "D403",
            "clock_set_frequency",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "pmu_get_data",
            "pmu_get_data",
            "dprintf",
            "Version",
            "dprintf"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "dprintf",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "dprintf"
        ],
        "target_poweroff": [
            "target_poweroff",
            "dprintf"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dprintf"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write",
            "dprintf"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "dprintf",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "n102_get_board_type",
            "dprintf",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "panic",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "display_pmu_update_device_tree"
        ]
    },
    "target/n102/include/target": {},
    "target/ipad4": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init",
            "ipad4_get_board_rev",
            "sizeof",
            "iic_write"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_has_tristar2": [
            "target_has_tristar2",
            "ipad4_get_board_rev",
            "ipad4_get_board_rev"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "ipad4_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "syscfgCopyDataForTag",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/ipad4/include/target": {},
    "target/typhonic": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/typhonic/include/target": {},
    "target/k93a": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty"
        ]
    },
    "target/k93a/include/target": {},
    "target/j33": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "mcu_init",
            "dp_device_wait_started",
            "displayport_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "mcu_quiesce_uart"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init",
            "mcu_start_recover"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dp_device_wait_started",
            "mcu_start_boot"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "reboot"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "FindNode",
            "FindProperty",
            "j33_get_board_rev"
        ]
    },
    "target/j33/include/target": {},
    "target/ipad2": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "k93_get_board_rev",
            "FindNode",
            "FindProperty"
        ]
    },
    "target/ipad2/include/target": {},
    "target/ipad4b": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "iic_read",
            "iic_write",
            "iic_write",
            "iic_write"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "beacon_supported": [
            "beacon_supported",
            "ipad4b_get_board_rev"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "beacon_supported",
            "panic",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/ipad4b/include/target": {},
    "target/fijiref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "clock_gate"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree"
        ]
    },
    "target/fijiref/include/target": {},
    "target/ipad5b": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "ipad5b_detect_display": [
            "ipad5b_detect_display",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "spin",
            "gpio_read",
            "gpio_read",
            "dprintf",
            "gpio_configure",
            "gpio_configure"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "ipad5b_detect_display"
        ],
        "target_early_init": [
            "target_early_init",
            "target_config_dev",
            "target_get_display_panel_type",
            "ipad5b_get_board_rev",
            "platform_not_supported",
            "pmgr_update_dvfm",
            "platform_get_board_id",
            "ipad5b_get_board_rev",
            "pmgr_update_gfx_states",
            "platform_get_board_id",
            "ipad5b_get_board_rev",
            "target_fixup_pmu"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree",
            "target_config_dev",
            "FindNode",
            "FindProperty",
            "memset",
            "target_get_display_panel_type",
            "strlcpy",
            "strlcpy",
            "ipad5b_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "ipad5b_get_board_rev",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "chipid_get_chip_revision",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty"
        ]
    },
    "target/ipad5b/include/target": {},
    "target/s8000fpga": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "sizeof",
            "sizeof",
            "FindNode",
            "FindProperty",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/s8000fpga/include/target": {
        "dcs_init_config_fixup_params": [
            "dcs_init_config_fixup_params"
        ]
    },
    "target/ipad5c": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "ipad5c_get_board_rev": [
            "ipad5c_get_board_rev",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "spin",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "ipad5c_get_display_info"
        ],
        "target_get_display_switch_type": [
            "target_get_display_switch_type",
            "ipad5c_get_display_info"
        ],
        "is_board_deprecated": [
            "is_board_deprecated",
            "platform_get_board_id",
            "ipad5c_get_board_rev"
        ],
        "target_early_init": [
            "target_early_init",
            "ipad5c_get_display_info",
            "platform_get_board_id",
            "pmu_set_data",
            "dprintf",
            "failed",
            "target_config_ap",
            "ipad5c_get_board_rev",
            "pmu_set_data",
            "dprintf",
            "failed",
            "pmu_set_data",
            "dprintf",
            "failed",
            "charger_set_data",
            "charger_set_data",
            "pmgr_update_dvfm",
            "platform_get_board_id",
            "ipad5c_get_board_rev",
            "pmgr_update_gfx_states",
            "platform_get_board_id",
            "ipad5c_get_board_rev",
            "pmgr_check_gpu_use650MHz_binned",
            "platform_get_board_id",
            "ipad5c_get_board_rev",
            "pmgr_check_gpu_use650MHz_unbinned",
            "platform_get_board_id",
            "ipad5c_get_board_rev",
            "gpu_uvd_dpot_init"
        ],
        "target_late_init": [
            "target_late_init",
            "is_board_deprecated",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "target_get_display_panel_type",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_ipad5c_use_pmu_gpios_wlan_bt": [
            "target_ipad5c_use_pmu_gpios_wlan_bt",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "FindProperty",
            "FindNode",
            "FindProperty"
        ],
        "hid_update_device_tree": [
            "hid_update_device_tree",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "strlen",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "strlen",
            "FindProperty",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "ipad5c_get_board_rev",
            "ipad5c_set_old_backlight_values",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "chipid_get_chip_revision",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "platform_get_board_id",
            "ipad5c_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "ipad5c_get_board_rev",
            "ipad5c_get_board_rev",
            "target_ipad5c_use_pmu_gpios_wlan_bt",
            "EVT2",
            "ipad5c_get_board_rev",
            "dt_find_node",
            "dt_get_prop",
            "dt_remove_prop",
            "dt_find_node",
            "dt_get_prop",
            "dt_remove_prop",
            "dt_find_node",
            "dt_get_prop",
            "dt_remove_prop",
            "hid_update_device_tree"
        ]
    },
    "target/ipad5c/include/target": {},
    "target/n78": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "larger",
            "n78_get_board_rev",
            "sizeof",
            "iic_write"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "n78_get_e75": [
            "n78_get_e75",
            "env_get_uint",
            "n78_get_board_rev"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "memset",
            "FindProperty",
            "memset",
            "n78_get_e75",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "n78_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "clock",
            "power_gpio_configure",
            "gpio_configure",
            "GPIO",
            "n78_get_board_rev",
            "FindNode",
            "FindProperty"
        ]
    },
    "target/n78/include/target": {},
    "target/capriref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree"
        ]
    },
    "target/capriref/include/target": {},
    "target/elbaref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "power_set_gpio"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/elbaref/include/target": {
        "dcs_init_config_fixup_params": [
            "dcs_init_config_fixup_params"
        ]
    },
    "target/j34m": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_dev",
            "j34m_get_board_rev",
            "platform_not_supported",
            "target_config_ap",
            "j34m_get_board_rev",
            "platform_not_supported",
            "mcu_init",
            "dp_device_wait_started",
            "displayport_init",
            "j34m_reset_hoover"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "mcu_quiesce_uart"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init",
            "mcu_start_recover"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dp_device_wait_started",
            "mcu_start_boot"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "reboot"
        ],
        "target_has_tristar2": [
            "target_has_tristar2"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "j34m_get_board_rev",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "RBDA",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property"
        ]
    },
    "target/j34m/include/target": {},
    "target/iphone5": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "iphone5_get_board_rev",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "iphone5_get_grape_id",
            "memset",
            "strlcpy",
            "iphone5_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "clock",
            "disabled",
            "power_gpio_configure",
            "gpio_configure",
            "GPIO",
            "iphone5_get_board_rev",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "iphone5_get_board_rev",
            "FindNode",
            "FindProperty",
            "TMR32_PWM1",
            "gpio_configure_pupdn",
            "GPIO",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "FindNode",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "calibration",
            "iphone5_get_board_rev",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "iphone5_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ],
        "target_dclr_from_clrc": [
            "target_dclr_from_clrc",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "dprintf",
            "ARRAY_SIZE",
            "dprintf",
            "ClrC",
            "memcpy",
            "dprintf",
            "value"
        ]
    },
    "target/iphone5/include/target": {},
    "target/t7000fpga": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "sizeof",
            "sizeof",
            "FindNode",
            "FindProperty",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/t7000fpga/include/target": {},
    "target/n59": {
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity"
        ],
        "target_early_init": [
            "target_early_init",
            "D410",
            "clock_set_frequency",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "pmu_get_data",
            "pmu_get_data",
            "dprintf",
            "Version",
            "dprintf"
        ],
        "target_late_init": [
            "target_late_init",
            "clock_gate"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_get_lcm_ldos": [
            "target_get_lcm_ldos",
            "DISPLAY_PMU_LDO",
            "DISPLAY_PMU_LDO"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "DISP0",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "mipi_update_device_tree",
            "mipi_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "memcpy",
            "sizeof",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "display_pmu_update_device_tree"
        ]
    },
    "target/n59/include/target": {},
    "target/e86": {
        "target_early_init": [
            "target_early_init",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "target_fixup_pmu"
        ],
        "target_late_init": [
            "target_late_init",
            "clock_gate",
            "displayport_init",
            "e86_reset_hoover"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "dprintf"
        ],
        "target_poweroff": [
            "target_poweroff",
            "dprintf"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dprintf"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write",
            "dprintf"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "dprintf",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "dprintf"
        ]
    },
    "target/e86/include/target": {},
    "target/ipod6": {
        "target_init_fast_dali": [
            "target_init_fast_dali",
            "bzero",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "save_dmin_to_nvram"
        ],
        "target_prepare_dali": [
            "target_prepare_dali",
            "defined",
            "power_enable_ldo",
            "gpio_configure",
            "bzero",
            "sizeof",
            "sizeof",
            "env_get_uint",
            "env_get_uint",
            "env_get_uint",
            "is_dark_wake",
            "power_has_usb",
            "power_needs_precharge",
            "dprintf",
            "get_dmin_from_nvram",
            "dprintf",
            "env_get",
            "atoi"
        ],
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "sim_target_should_recover": [
            "sim_target_should_recover"
        ],
        "sim_target_should_poweron": [
            "sim_target_should_poweron"
        ],
        "sim_target_should_poweroff": [
            "sim_target_should_poweroff"
        ],
        "sim_target_setup_default_environment": [
            "sim_target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "product_target_is_display_in_video_mode": [
            "product_target_is_display_in_video_mode"
        ],
        "sim_target_update_device_tree": [
            "sim_target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty"
        ],
        "target_do_chargetrap": [
            "target_do_chargetrap"
        ],
        "target_needs_chargetrap": [
            "target_needs_chargetrap"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_needs_thermal_trap": [
            "power_needs_thermal_trap"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ],
        "ipod6_get_board_rev": [
            "ipod6_get_board_rev",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "spin",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure"
        ],
        "ipod6_is_beryllium_supported": [
            "ipod6_is_beryllium_supported",
            "gpio_read"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "ipod6_get_display_info"
        ],
        "target_get_display_touch_type": [
            "target_get_display_touch_type",
            "ipod6_get_display_info"
        ],
        "product_target_early_init": [
            "product_target_early_init",
            "ipod6_power_display",
            "ipod6_get_display_info",
            "chipid_get_fuse_revision",
            "chipid_get_chip_revision",
            "fuse",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf"
        ],
        "product_target_late_init": [
            "product_target_late_init",
            "ipod6_get_board_rev",
            "env_get",
            "strstr",
            "strlen",
            "variable",
            "env_get_bool",
            "dprintf",
            "product_pmu_gpiocfg",
            "dprintf",
            "failed",
            "key",
            "syscfgCopyDataForTag",
            "sizeof",
            "pmu_get_data",
            "pmu_set_data",
            "dprintf",
            "chg_ctrl_e",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf",
            "buck0_vsel",
            "pmu_get_data",
            "pmu_set_data",
            "dprintf",
            "buck1_vsel",
            "target_config_ap",
            "pmu_set_data",
            "dprintf",
            "VDD_MAIN_SW4",
            "task_sleep",
            "pmu_set_data",
            "dprintf",
            "VDD_MAIN_SW4",
            "gpio_configure_pupdn",
            "dockfifo_enable_clock_gating",
            "target_init_boot_manifest",
            "platform_late_init",
            "target_init_fast_dali",
            "target_init_fast_dali"
        ],
        "product_target_should_recover": [
            "product_target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "product_target_should_poweron": [
            "product_target_should_poweron",
            "power_get_nvram",
            "boot_clear_error_count",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "product_target_should_poweroff": [
            "product_target_should_poweroff",
            "power_get_nvram",
            "boot_clear_error_count",
            "power_set_nvram",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "product_target_setup_default_environment": [
            "product_target_setup_default_environment",
            "env_set",
            "env_set",
            "target_get_display_panel_type",
            "env_set",
            "env_set",
            "env_set"
        ],
        "product_target_no_burst_mode": [
            "product_target_no_burst_mode",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_in_delay": [
            "product_target_get_ulps_in_delay",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_end_delay": [
            "product_target_get_ulps_end_delay",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_out_delay": [
            "product_target_get_ulps_out_delay",
            "target_get_display_panel_type"
        ],
        "display_update_device_tree": [
            "display_update_device_tree",
            "display_pmu_update_device_tree",
            "product_target_is_display_in_video_mode",
            "DISP0",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "target_config_ap",
            "ipod6_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindNode",
            "summit_update_device_tree",
            "FindNode",
            "summit_update_device_tree"
        ],
        "hid_update_device_tree": [
            "hid_update_device_tree",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag"
        ],
        "product_target_update_device_tree": [
            "product_target_update_device_tree",
            "display_update_device_tree",
            "hid_update_device_tree",
            "opal_update_device_tree",
            "spu_update_device_tree",
            "charger_update_device_tree",
            "audio_update_device_tree",
            "device_material_update_device_tree",
            "aggd_update_device_tree",
            "stockholm_update_device_tree",
            "asp_update_device_tree",
            "target_pass_boot_manifest"
        ],
        "fpga_target_should_recover": [
            "fpga_target_should_recover"
        ],
        "fpga_target_should_poweron": [
            "fpga_target_should_poweron"
        ],
        "fpga_target_should_poweroff": [
            "fpga_target_should_poweroff"
        ],
        "fpga_target_setup_default_environment": [
            "fpga_target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "fpga_target_update_device_tree": [
            "fpga_target_update_device_tree"
        ],
        "target_early_init": [
            "target_early_init",
            "product_target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "product_target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "sim_target_should_recover",
            "fpga_target_should_recover",
            "product_target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "sim_target_should_poweron",
            "fpga_target_should_poweron",
            "product_target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "sim_target_should_poweroff",
            "fpga_target_should_poweroff",
            "product_target_should_poweroff"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "sim_target_setup_default_environment",
            "fpga_target_setup_default_environment",
            "product_target_setup_default_environment"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "sim_target_update_device_tree",
            "fpga_target_update_device_tree",
            "product_target_update_device_tree"
        ]
    },
    "target/ipod6/include/target": {},
    "target/t8010sim": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/t8010sim/include/target": {},
    "target/cyclonic": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/cyclonic/include/target": {},
    "target/ipad6d": {
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity",
            "gasgauge_read_temperature"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "ipad6d_get_display_type"
        ],
        "target_get_board_rev": [
            "target_get_board_rev",
            "ipad6d_get_board_rev"
        ],
        "target_early_init": [
            "target_early_init",
            "target_get_board_rev",
            "platform_get_board_id",
            "dprintf"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_ap",
            "target_get_board_rev",
            "dprintf",
            "platform_not_supported",
            "target_config_dev",
            "target_get_board_rev",
            "dprintf",
            "platform_not_supported",
            "power_set_gpio"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "gpio_fixup_pinconfig"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "ipad6d_get_display_type",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_lm3534_gpr": [
            "target_lm3534_gpr"
        ],
        "hid_update_device_tree": [
            "hid_update_device_tree",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree",
            "dt_find_node",
            "dt_set_prop",
            "sizeof",
            "dt_set_prop",
            "sizeof",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "hid_update_device_tree"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/ipad6d/include/target": {},
    "target/ipad2b": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init",
            "ipad2b_get_board_rev",
            "sizeof",
            "iic_write"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "ipad2b_get_board_rev",
            "sizeof",
            "iic_write"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "ipad2b_get_board_rev",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "pinot_update_device_tree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "ipad2b_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "clock",
            "disabled",
            "power_gpio_configure",
            "gpio_configure",
            "GPIO",
            "ipad2b_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "ipad2b_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty"
        ]
    },
    "target/ipad2b/include/target": {},
    "target/watch2": {
        "target_prepare_dali": [
            "target_prepare_dali",
            "defined",
            "power_enable_ldo",
            "gpio_configure",
            "bzero",
            "sizeof",
            "sizeof",
            "env_get_uint",
            "env_get_uint",
            "env_get_uint",
            "syscfgCopyDataForTag",
            "sizeof",
            "env_get",
            "atoi"
        ],
        "sim_target_should_recover": [
            "sim_target_should_recover"
        ],
        "sim_target_should_poweron": [
            "sim_target_should_poweron"
        ],
        "sim_target_should_poweroff": [
            "sim_target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "sim_target_setup_default_environment": [
            "sim_target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "sim_target_update_device_tree": [
            "sim_target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x"
        ],
        "target_needs_chargetrap": [
            "target_needs_chargetrap"
        ],
        "target_do_chargetrap": [
            "target_do_chargetrap"
        ],
        "power_needs_thermal_trap": [
            "power_needs_thermal_trap"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ],
        "ipod6_get_board_rev": [
            "ipod6_get_board_rev",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "spin",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure"
        ],
        "ipod6_is_beryllium_supported": [
            "ipod6_is_beryllium_supported",
            "gpio_read"
        ],
        "target_get_display_panel_type": [
            "target_get_display_panel_type",
            "ipod6_get_display_info"
        ],
        "target_get_display_touch_type": [
            "target_get_display_touch_type",
            "ipod6_get_display_info"
        ],
        "product_target_early_init": [
            "product_target_early_init",
            "ipod6_power_display",
            "ipod6_get_display_info",
            "chipid_get_fuse_revision",
            "chipid_get_chip_revision",
            "fuse",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf",
            "ipod6_get_board_rev",
            "ipod6_get_board_rev",
            "platform_get_board_id",
            "pmu_set_data",
            "sizeof",
            "sizeof",
            "pmu_get_data",
            "pmu_set_data",
            "pmu_set_data",
            "GPIOC",
            "gpio_configure",
            "spin",
            "gpio_write"
        ],
        "product_target_late_init": [
            "product_target_late_init",
            "ipod6_get_board_rev",
            "pmu_set_data",
            "dprintf",
            "mode",
            "pmu_set_data",
            "dprintf",
            "VDD_OK_CONF",
            "pmu_set_data",
            "panic",
            "mode",
            "product_board_typeid",
            "env_get",
            "strstr",
            "strlen",
            "dprintf",
            "env_get_bool",
            "dprintf",
            "product_pmu_gpiocfg",
            "dprintf",
            "failed",
            "target_init_boot_manifest"
        ],
        "product_target_should_recover": [
            "product_target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "product_target_should_poweron": [
            "product_target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "product_target_should_poweroff": [
            "product_target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "product_target_setup_default_environment": [
            "product_target_setup_default_environment",
            "env_set",
            "env_set",
            "target_get_display_panel_type",
            "env_set",
            "env_set",
            "env_set"
        ],
        "product_target_is_display_in_video_mode": [
            "product_target_is_display_in_video_mode",
            "target_get_display_panel_type"
        ],
        "product_target_no_burst_mode": [
            "product_target_no_burst_mode",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_in_delay": [
            "product_target_get_ulps_in_delay",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_end_delay": [
            "product_target_get_ulps_end_delay",
            "target_get_display_panel_type"
        ],
        "product_target_get_ulps_out_delay": [
            "product_target_get_ulps_out_delay",
            "target_get_display_panel_type"
        ],
        "display_update_device_tree": [
            "display_update_device_tree",
            "display_pmu_update_device_tree",
            "product_target_is_display_in_video_mode",
            "DISP0",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "FindNode",
            "summit_update_device_tree",
            "FindNode",
            "summit_update_device_tree"
        ],
        "hid_update_device_tree": [
            "hid_update_device_tree",
            "FindNode",
            "FindProperty",
            "memset",
            "strlcpy",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag",
            "FindProperty",
            "memset",
            "syscfgCopyDataForTag"
        ],
        "product_target_update_device_tree": [
            "product_target_update_device_tree",
            "display_update_device_tree",
            "hid_update_device_tree",
            "opal_update_device_tree",
            "spu_update_device_tree",
            "charger_update_device_tree",
            "audio_update_device_tree",
            "device_material_update_device_tree",
            "target_pass_boot_manifest"
        ],
        "fpga_target_should_recover": [
            "fpga_target_should_recover"
        ],
        "fpga_target_should_poweron": [
            "fpga_target_should_poweron"
        ],
        "fpga_target_should_poweroff": [
            "fpga_target_should_poweroff"
        ],
        "fpga_target_setup_default_environment": [
            "fpga_target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "fpga_target_update_device_tree": [
            "fpga_target_update_device_tree"
        ],
        "target_early_init": [
            "target_early_init",
            "product_target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "product_target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "sim_target_should_recover",
            "fpga_target_should_recover",
            "product_target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "sim_target_should_poweron",
            "fpga_target_should_poweron",
            "product_target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "sim_target_should_poweroff",
            "fpga_target_should_poweroff",
            "product_target_should_poweroff"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "sim_target_setup_default_environment",
            "fpga_target_setup_default_environment",
            "product_target_setup_default_environment"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "sim_target_update_device_tree",
            "fpga_target_update_device_tree",
            "product_target_update_device_tree"
        ]
    },
    "target/watch2/include/target": {
        "dcs_init_config_fixup_params": [
            "dcs_init_config_fixup_params"
        ]
    },
    "target/s8000sim": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_get_property": [
            "target_get_property"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x",
            "FindNode",
            "FindProperty",
            "dprintf",
            "x"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/s8000sim/include/target": {},
    "target/j34": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_dev",
            "j34_get_board_rev",
            "platform_not_supported",
            "mcu_init",
            "dp_device_wait_started",
            "displayport_init",
            "j34_reset_hoover"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "mcu_quiesce_uart"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init",
            "mcu_start_recover"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dp_device_wait_started",
            "mcu_start_boot"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "reboot"
        ],
        "target_has_tristar2": [
            "target_has_tristar2"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "target_has_tristar2",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "j34_get_board_rev",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "RBDA",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property"
        ]
    },
    "target/j34/include/target": {},
    "target/ipad3": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base",
            "sizeof",
            "sizeof"
        ],
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_ap",
            "ipad3_get_board_rev",
            "platform_not_supported"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "amelia_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "target_config_dev",
            "ipad3_get_board_rev",
            "FindNode",
            "FindProperty",
            "ipad3_get_board_rev",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ]
    },
    "target/ipad3/include/target": {},
    "target/ipad6b": {
        "ipad6b_get_board_rev": [
            "ipad6b_get_board_rev",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "gpio_configure_pupdn",
            "spin",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_read",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure",
            "gpio_configure"
        ],
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity",
            "gasgauge_read_temperature"
        ],
        "target_get_board_rev": [
            "target_get_board_rev",
            "ipad6b_get_board_rev"
        ],
        "target_fixup_power": [
            "target_fixup_power",
            "charger_set_data",
            "kD2257_IPK_UV_BUCK1_UV_DIG_CONF_1",
            "pmu_uvwarn_config",
            "pmu_get_data",
            "pmu_set_data",
            "dprintf",
            "mode",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "pmu_set_data",
            "dprintf",
            "reconfig",
            "pmu_set_data",
            "panic",
            "charger_set_data",
            "dprintf",
            "table"
        ],
        "target_early_init": [
            "target_early_init",
            "target_get_board_rev",
            "platform_get_board_id",
            "dprintf",
            "target_fixup_power",
            "pmgr_platform_config_uvwarn"
        ],
        "target_late_init": [
            "target_late_init",
            "power_set_gpio"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init",
            "target_config_dev",
            "gpio_fixup_pinconfig",
            "gpio_fixup_pinconfig"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "edp_update_device_tree",
            "FindNode",
            "FindNode",
            "FindNode",
            "edp_update_device_tree",
            "lpdp_phy_update_device_tree",
            "FindNode",
            "lpdp_phy_update_device_tree",
            "dt_find_node",
            "dt_set_prop",
            "sizeof",
            "dt_set_prop",
            "sizeof",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "dt_find_node",
            "dt_get_prop",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag"
        ],
        "power_needs_precharge": [
            "power_needs_precharge"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap"
        ],
        "power_is_suspended": [
            "power_is_suspended"
        ],
        "power_will_resume": [
            "power_will_resume"
        ],
        "power_has_usb": [
            "power_has_usb"
        ],
        "power_read_dock_id": [
            "power_read_dock_id"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_nvram": [
            "power_get_nvram"
        ],
        "power_set_nvram": [
            "power_set_nvram"
        ],
        "power_set_soc_voltage": [
            "power_set_soc_voltage"
        ],
        "power_set_usb_state": [
            "power_set_usb_state"
        ],
        "power_backlight_enable": [
            "power_backlight_enable"
        ]
    },
    "target/ipad6b/include/target": {
        "dcs_init_config_fixup_params": [
            "dcs_init_config_fixup_params"
        ]
    },
    "target/j42": {
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_early_init": [
            "target_early_init",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "target_fixup_pmu"
        ],
        "target_late_init": [
            "target_late_init",
            "target_config_dev",
            "j42_get_board_rev",
            "platform_not_supported",
            "target_config_ap",
            "j42_get_board_rev",
            "platform_not_supported",
            "mcu_init",
            "dp_device_wait_started",
            "displayport_init",
            "j42_reset_hoover"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware",
            "mcu_quiesce_uart"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init",
            "mcu_start_recover"
        ],
        "target_bootprep": [
            "target_bootprep",
            "dp_device_wait_started",
            "mcu_start_boot"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_get_gpio",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "reboot",
            "env_set",
            "env_set"
        ],
        "target_has_tristar2": [
            "target_has_tristar2"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof",
            "FindNode",
            "FindProperty",
            "j42_get_board_rev",
            "RBDA",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property"
        ]
    },
    "target/j42/include/target": {},
    "target/e88": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "FindProperty",
            "sizeof",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "syscfgCopyDataForTag",
            "sizeof"
        ]
    },
    "target/e88/include/target": {},
    "target/alcatrazref": {
        "target_early_init": [
            "target_early_init"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "platform_get_request_dfu2",
            "power_has_usb"
        ],
        "target_should_poweron": [
            "target_should_poweron",
            "power_get_boot_flag",
            "platform_get_request_dfu1"
        ],
        "target_should_poweroff": [
            "target_should_poweroff",
            "platform_get_request_dfu1",
            "power_has_usb"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "env_set"
        ],
        "target_update_device_tree": [
            "target_update_device_tree"
        ]
    },
    "target/alcatrazref/include/target": {},
    "target/b238": {
        "target_early_init": [
            "target_early_init",
            "dprintf",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision"
        ],
        "target_late_init": [
            "target_late_init"
        ],
        "target_init": [
            "target_init",
            "dprintf",
            "flash_nor_init"
        ],
        "target_quiesce_hardware": [
            "target_quiesce_hardware"
        ],
        "target_poweroff": [
            "target_poweroff"
        ],
        "target_debug_init": [
            "target_debug_init"
        ],
        "target_bootprep": [
            "target_bootprep"
        ],
        "target_should_recover": [
            "target_should_recover",
            "power_has_usb",
            "env_get_bool"
        ],
        "target_should_poweron": [
            "target_should_poweron"
        ],
        "target_should_poweroff": [
            "target_should_poweroff"
        ],
        "target_watchdog_tickle": [
            "target_watchdog_tickle",
            "gpio_read",
            "gpio_write"
        ],
        "target_setup_default_environment": [
            "target_setup_default_environment",
            "env_set",
            "env_set",
            "reboot"
        ],
        "target_update_device_tree": [
            "target_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_soc_voltages",
            "sizeof"
        ]
    },
    "target/b238/include/target": {},
    "lib/net": {
        "xp_packet_input": [
            "xp_packet_input",
            "printf",
            "mbuf_getlength",
            "ethernet_input"
        ],
        "xp_transmit_packet": [
            "xp_transmit_packet",
            "mbuf_getlinear",
            "printf",
            "eth_output_packet",
            "mbuf_getlength"
        ],
        "xp_getmac": [
            "xp_getmac",
            "eth_getmacaddr"
        ],
        "xp_initialize": [
            "xp_initialize",
            "eth_get_handle"
        ],
        "arp_hash": [
            "arp_hash"
        ],
        "arp_cache_add": [
            "arp_cache_add",
            "arp_hash",
            "malloc",
            "sizeof",
            "memcpy",
            "printf"
        ],
        "arp_cache_get": [
            "arp_cache_get",
            "arp_hash",
            "printf",
            "memcpy"
        ],
        "arp_cache_delete": [
            "arp_cache_delete",
            "free"
        ],
        "arp_dump_table": [
            "arp_dump_table",
            "printf"
        ],
        "arp_get_macaddr": [
            "arp_get_macaddr",
            "arp_cache_get",
            "printf",
            "arp_transmit"
        ],
        "arp_fill": [
            "arp_fill",
            "system_time",
            "arp_cache_get",
            "arp_transmit",
            "task_sleep",
            "system_time"
        ],
        "arp_layer": [
            "arp_layer",
            "memset",
            "sizeof",
            "registerEtherTypeHandler",
            "unregisterEtherTypeHandler",
            "arp_cache_delete"
        ],
        "registerEtherTypeHandler": [
            "registerEtherTypeHandler",
            "registerCallback"
        ],
        "unregisterEtherTypeHandler": [
            "unregisterEtherTypeHandler",
            "unregisterCallback"
        ],
        "ethernet_init": [
            "ethernet_init"
        ],
        "ethernet_uninit": [
            "ethernet_uninit"
        ],
        "ethernet_input": [
            "ethernet_input",
            "mbuf_getlength",
            "mbuf_getlinear",
            "us",
            "parseEtherHeader",
            "find_callback",
            "cb",
            "printf"
        ],
        "ethernet_workloop": [
            "ethernet_workloop",
            "callout_reset",
            "system_time",
            "mbuf_setlength",
            "mbuf_setoffset",
            "xp_get_packet",
            "mbuf_getlength",
            "mbuf_getlinear",
            "us",
            "parseEtherHeader",
            "find_callback",
            "cb",
            "printf",
            "system_time",
            "printf"
        ],
        "add_eth_and_transmit": [
            "add_eth_and_transmit",
            "system_time",
            "mbuf_head",
            "dprintf",
            "memcpy",
            "xp_getmac",
            "htons",
            "mbuf_tail",
            "printf",
            "xp_transmit_packet",
            "printf",
            "system_time"
        ],
        "registerCallback": [
            "registerCallback",
            "malloc",
            "sizeof",
            "malloc",
            "sizeof"
        ],
        "unregisterCallback": [
            "unregisterCallback",
            "free"
        ],
        "find_callback": [
            "find_callback"
        ],
        "udp_layer": [
            "udp_layer",
            "registerIPV4Handler",
            "unregisterIPV4Handler"
        ],
        "transmit_udp": [
            "transmit_udp",
            "mbuf_head",
            "mbuf_getlength",
            "printf",
            "htons",
            "htons",
            "htons",
            "transmit_and_add_ipv4"
        ],
        "registerUDPHandler": [
            "registerUDPHandler",
            "registerCallback"
        ],
        "unregisterUDPHandler": [
            "unregisterUDPHandler",
            "unregisterCallback"
        ],
        "start_network_stack": [
            "start_network_stack",
            "dprintf",
            "env_get_ipaddr",
            "printf",
            "env_get_ethaddr",
            "printf",
            "ethernet_init",
            "xp_initialize",
            "ipv4_layer",
            "ipv4_set_ip",
            "htonl",
            "arp_layer",
            "icmp_layer",
            "udp_layer",
            "dprintf",
            "eth_get_handle",
            "eth_setmacaddr",
            "eth_start",
            "callout_enqueue",
            "arp_get_macaddr",
            "ipv4_get_ip"
        ],
        "stop_network_stack": [
            "stop_network_stack",
            "eth_get_handle",
            "eth_stop",
            "ipv4_layer",
            "arp_layer",
            "icmp_layer",
            "udp_layer",
            "ethernet_uninit"
        ],
        "mac2str": [
            "mac2str",
            "snprintf"
        ],
        "ip2str": [
            "ip2str",
            "snprintf"
        ],
        "icmp_layer": [
            "icmp_layer",
            "registerIPV4Handler",
            "unregisterIPV4Handler"
        ],
        "registerICMPHandler": [
            "registerICMPHandler",
            "registerCallback"
        ],
        "unregisterICMPHandler": [
            "unregisterICMPHandler",
            "unregisterCallback"
        ],
        "transmit_and_add_ipv4": [
            "transmit_and_add_ipv4",
            "mbuf_getlength",
            "dprintf",
            "mbuf_head",
            "dprintf",
            "htons",
            "htons",
            "htons",
            "htons",
            "ipv4_get_ip",
            "calculate_ipv4_checksum",
            "arp_get_macaddr",
            "dprintf",
            "add_eth_and_transmit"
        ],
        "ipv4_set_ip": [
            "ipv4_set_ip",
            "ip2str",
            "dprintf"
        ],
        "ipv4_get_ip": [
            "ipv4_get_ip"
        ],
        "ipv4_layer": [
            "ipv4_layer",
            "registerEtherTypeHandler",
            "unregisterEtherTypeHandler"
        ],
        "registerIPV4Handler": [
            "registerIPV4Handler",
            "registerCallback"
        ],
        "unregisterIPV4Handler": [
            "unregisterIPV4Handler",
            "unregisterCallback"
        ],
        "mbuf_copy": [
            "mbuf_copy",
            "memcpy"
        ],
        "mbuf_getlength": [
            "mbuf_getlength"
        ],
        "mbuf_getallocatedlength": [
            "mbuf_getallocatedlength"
        ],
        "mbuf_setlength": [
            "mbuf_setlength"
        ],
        "mbuf_setoffset": [
            "mbuf_setoffset"
        ],
        "mbuf_destroy": [
            "mbuf_destroy",
            "printf",
            "free",
            "free"
        ],
        "do_net": [
            "do_net",
            "puts",
            "printf",
            "printf",
            "strcmp",
            "start_network_stack",
            "strcmp",
            "arp_dump_table",
            "puts"
        ]
    },
    "lib/profile": {
        "profile_init": [
            "profile_init",
            "sizeof",
            "PROFILE_1"
        ],
        "profile": [
            "profile",
            "timer_get_ticks"
        ],
        "profile_handoff": [
            "profile_handoff",
            "PROFILE_ENTER",
            "timer_get_tick_rate",
            "bcopy",
            "PROFILE_EXIT"
        ]
    },
    "lib/pki": {
        "do_pki": [
            "do_pki",
            "security_allow_modes",
            "printf",
            "printf",
            "printf",
            "printf",
            "strcmp",
            "printf",
            "strcmp",
            "printf",
            "strcmp",
            "printf",
            "image",
            "sha1_calculate",
            "sha1_calculate",
            "sizeof",
            "verify_signature_with_chain",
            "printf"
        ],
        "verify_signature_with_chain": [
            "verify_signature_with_chain",
            "require_noerr",
            "crack_chain",
            "require_noerr",
            "parse_chain",
            "dprintf",
            "require_noerr",
            "dercmp",
            "require_noerr",
            "dercmp",
            "require_noerr",
            "verify_chain_signatures",
            "require_noerr",
            "parse_common_name",
            "character",
            "character",
            "Length",
            "dprintf",
            "require",
            "DEROidCompare",
            "dprintf",
            "require_noerr",
            "verify_signature_with_hash",
            "dprintf",
            "extension",
            "dprintf",
            "extension",
            "require_noerr",
            "parse_common_name",
            "require",
            "platform_provide_spec_blob"
        ]
    },
    "lib/pki/libDER": {
        "DERLengthOfLength": [
            "DERLengthOfLength"
        ],
        "DERLengthOfItem": [
            "DERLengthOfItem",
            "DERLengthOfTag",
            "DERLengthOfLength"
        ],
        "DERContentLengthOfEncodedSequence": [
            "DERContentLengthOfEncodedSequence",
            "tag",
            "DERLengthOfTag",
            "DERLengthOfLength"
        ],
        "DERLengthOfEncodedSequence": [
            "DERLengthOfEncodedSequence",
            "DERContentLengthOfEncodedSequence",
            "DERLengthOfTag",
            "DERLengthOfLength"
        ],
        "DEROidCompare": [
            "DEROidCompare",
            "DERMemcmp"
        ],
        "DERDecodeItemPartialBuffer": [
            "DERDecodeItemPartialBuffer",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof"
        ],
        "DERParseBoolean": [
            "DERParseBoolean"
        ],
        "DERParseBooleanWithDefault": [
            "DERParseBooleanWithDefault",
            "DERParseBoolean"
        ],
        "DERParseInteger": [
            "DERParseInteger",
            "DERParseInteger64"
        ],
        "DERParseInteger64": [
            "DERParseInteger64",
            "sizeof",
            "sizeof"
        ]
    },
    "lib/pki/libGiantsUtils": {},
    "lib/pki/libgRSA": {
        "rsaCheckNoPaddingForSigVfy": [
            "rsaCheckNoPaddingForSigVfy",
            "rsaDebug",
            "bytesLeftInGiant",
            "GIASSERT",
            "getGiantByte",
            "decrGiantPtrs",
            "rsaDebug",
            "rsaDebug",
            "getGiantByte",
            "decrGiantPtrs",
            "rsaDebug"
        ],
        "rsaAddPkcs1Padding": [
            "rsaAddPkcs1Padding"
        ],
        "rsaCheckPkcs1PaddingForSigVfy": [
            "rsaCheckPkcs1PaddingForSigVfy",
            "GI_CHECK_SP",
            "marker",
            "giantDigit",
            "sizeof",
            "sizeof",
            "getGiantByte",
            "decrGiantPtrs",
            "sizeof",
            "rsaDebug",
            "rsaDebug",
            "decrGiantPtrs",
            "bytesLeftInGiant",
            "rsaDebug",
            "getGiantByte",
            "decrGiantPtrs",
            "rsaDebug",
            "rsaDebug",
            "padding",
            "rsaDebug",
            "getGiantByte",
            "decrGiantPtrs",
            "rsaDebug"
        ],
        "giantStatusToRSA": [
            "giantStatusToRSA"
        ],
        "derStatusToRSA": [
            "derStatusToRSA"
        ],
        "rsaInitPubGKey": [
            "rsaInitPubGKey",
            "rsaSetGiant",
            "rsaSetGiant",
            "localGiantAlloc",
            "deserializeGiant"
        ],
        "rsaInitPrivGKey": [
            "rsaInitPrivGKey",
            "rsaSetSGiant",
            "rsaSetSGiant",
            "rsaSetSGiant",
            "rsaSetSGiant",
            "rsaSetSGiant",
            "localSmallGiantAlloc",
            "localSmallGiantAlloc"
        ],
        "localSmallGiantAlloc": [
            "localSmallGiantAlloc",
            "initGiant"
        ],
        "rsaClearPubGKey": [
            "rsaClearPubGKey",
            "Bzero",
            "sizeof"
        ],
        "rsaClearPrivGKey": [
            "rsaClearPrivGKey",
            "Bzero",
            "sizeof"
        ],
        "rsaClearFullGiantKey": [
            "rsaClearFullGiantKey",
            "Bzero",
            "sizeof"
        ]
    },
    "lib/pki/libGiants": {
        "giantAddDouble": [
            "giantAddDouble",
            "GI_CHECK_SP",
            "GIASSERT"
        ],
        "VectorMultiply": [
            "VectorMultiply",
            "giantMulDigits",
            "giantAddDouble",
            "giantAddDouble"
        ],
        "Bzero": [
            "Bzero"
        ],
        "modg_via_recip": [
            "modg_via_recip",
            "bitlen",
            "dispGiant",
            "dispGiant",
            "dispGiant",
            "GI_CHECK_SP",
            "modg_via_recip",
            "GIASSERT",
            "isZero",
            "int_to_giant",
            "gcompg",
            "localBigGiantAlloc",
            "localTriGiantAlloc",
            "gtog",
            "gshiftright",
            "mulg_common",
            "gshiftright",
            "mulg_common",
            "normal_subg",
            "gcompg",
            "normal_subg"
        ],
        "divmodg_via_recip": [
            "divmodg_via_recip",
            "bitlen",
            "GI_CHECK_SP",
            "divmodg_via_recip",
            "GIASSERT",
            "isZero",
            "int_to_giant",
            "gtog",
            "int_to_giant",
            "gcompg",
            "localTriGiantAlloc",
            "localTriGiantAlloc",
            "GI_CHECK_SP",
            "divmodg_via_recip",
            "gtog",
            "gshiftright",
            "mulg_common",
            "gshiftright",
            "mulg_common",
            "normal_subg",
            "addg",
            "gcompg",
            "normal_subg",
            "iaddg"
        ],
        "rsquare": [
            "rsquare",
            "GI_CHECK_SP",
            "rsquare",
            "localBigGiantAlloc",
            "GI_CHECK_SP",
            "rsquare",
            "grammarSquare_common",
            "modg_via_recip",
            "gtog"
        ],
        "rmulg": [
            "rmulg",
            "GI_CHECK_SP",
            "localBigGiantAlloc",
            "mulg_common",
            "modg_via_recip",
            "gtog"
        ],
        "powermodg": [
            "powermodg",
            "GI_CHECK_SP",
            "GI_LOG_SP",
            "isZero",
            "int_to_giant",
            "localGiantAlloc",
            "gtog",
            "gcompg",
            "modg_via_recip",
            "gtog",
            "bitlen",
            "rsquare",
            "bitval",
            "rmulg"
        ],
        "initGiant": [
            "initGiant",
            "GI_CHECK_SP"
        ],
        "localGiantAlloc": [
            "localGiantAlloc",
            "initGiant"
        ],
        "localTriGiantAlloc": [
            "localTriGiantAlloc",
            "initGiant"
        ],
        "bitlen": [
            "bitlen",
            "GI_CHECK_SP",
            "isZero",
            "GIASSERT"
        ],
        "bitval": [
            "bitval",
            "GI_CHECK_SP"
        ],
        "giantNumBytes": [
            "giantNumBytes",
            "bitlen",
            "GI_CHECK_SP"
        ],
        "gtrimSign": [
            "gtrimSign",
            "GI_CHECK_SP"
        ],
        "isone": [
            "isone",
            "GI_CHECK_SP"
        ],
        "isZero": [
            "isZero",
            "GI_CHECK_SP",
            "GIASSERT"
        ],
        "numtrailzeros": [
            "numtrailzeros"
        ],
        "gtog": [
            "gtog",
            "GIASSERT",
            "GIASSERT",
            "GIASSERT",
            "GI_CHECK_SP",
            "Memcpy",
            "CHECK_GIANT_OFLOW"
        ],
        "int_to_giant": [
            "int_to_giant",
            "GI_CHECK_SP",
            "sizeof",
            "sizeof"
        ],
        "giant_to_int": [
            "giant_to_int",
            "GI_CHECK_SP",
            "sizeof"
        ],
        "iaddg": [
            "iaddg",
            "isZero",
            "int_to_giant",
            "CHECK_GIANT_OFLOW"
        ],
        "imulg": [
            "imulg",
            "GIASSERT",
            "GI_CHECK_SP",
            "CHECK_GIANT_OFLOW"
        ],
        "normal_addg": [
            "normal_addg",
            "GI_CHECK_SP",
            "CHECK_GIANT_OFLOW"
        ],
        "gshiftleft": [
            "gshiftleft",
            "gleadzeroes",
            "Memcpy",
            "Bzero",
            "CHECK_GIANT_OFLOW"
        ],
        "gshiftright": [
            "gshiftright",
            "GI_CHECK_SP",
            "CHECK_GIANT_OFLOW"
        ],
        "gshifltwordsright": [
            "gshifltwordsright",
            "GI_CHECK_SP",
            "isZero",
            "Memcpy"
        ],
        "gshiftwordsleft": [
            "gshiftwordsleft",
            "GI_CHECK_SP",
            "Bzero",
            "CHECK_GIANT_OFLOW"
        ],
        "mulg": [
            "mulg",
            "localBigGiantAlloc",
            "GI_CHECK_SP",
            "mulg_common",
            "gtog"
        ],
        "grammarSquare": [
            "grammarSquare",
            "localBigGiantAlloc",
            "GI_CHECK_SP",
            "grammarSquare_common",
            "gtog"
        ],
        "clearGiant": [
            "clearGiant",
            "GI_CHECK_SP",
            "Bzero"
        ],
        "GIRaise": [
            "GIRaise",
            "printf",
            "exit"
        ],
        "GI_SET_INIT_SP": [
            "GI_SET_INIT_SP",
            "GI_GET_SP"
        ],
        "serializeGiantBytes": [
            "serializeGiantBytes",
            "gtrimSign"
        ],
        "deserializeGiant": [
            "deserializeGiant",
            "GI_CHECK_SP",
            "BYTES_TO_GIANT_DIGITS",
            "gtrimSign"
        ]
    },
    "lib/pki/tests": {
        "main": [
            "main",
            "SHA1",
            "fgets",
            "sizeof",
            "strncmp",
            "sizeof",
            "sizeof",
            "strstr",
            "sizeof",
            "sizeof",
            "putc",
            "hex_to_bin",
            "hex_to_bin",
            "putc"
        ]
    },
    "lib/fs": {
        "fs_cat_file": [
            "fs_cat_file",
            "fs_open",
            "fs_stat",
            "sizeof",
            "fs_read",
            "printf",
            "printf",
            "fs_close"
        ],
        "fs_stat_dump": [
            "fs_stat_dump",
            "printf",
            "STAT",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "fs_statfs_dump": [
            "fs_statfs_dump",
            "printf",
            "STATFS",
            "printf",
            "printf",
            "printf"
        ],
        "fs_dump_dir": [
            "fs_dump_dir",
            "printf",
            "fs_opendir",
            "printf",
            "fs_readdir",
            "printf",
            "fs_closedir"
        ],
        "do_fs": [
            "do_fs",
            "security_allow_modes",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "strcmp",
            "fs_mount",
            "printf",
            "strcmp",
            "fs_unmount",
            "strcmp",
            "fs_dump_mounts",
            "strcmp",
            "fs_dump_dir",
            "strcmp",
            "security_allow_memory",
            "printf",
            "fs_load_file",
            "printf",
            "fs_load_file",
            "env_set_uint",
            "env_set_uint",
            "strcmp",
            "fs_cat_file",
            "printf"
        ],
        "fs_mount": [
            "fs_mount",
            "strcmp",
            "dprintf",
            "list_for_every_entry",
            "strcmp",
            "dprintf",
            "mount",
            "malloc",
            "sizeof",
            "malloc",
            "sizeof",
            "strlcpy",
            "sizeof",
            "strlen",
            "list_add_tail"
        ],
        "fs_unmount": [
            "fs_unmount",
            "path_to_mount",
            "unmount",
            "list_delete",
            "free",
            "free"
        ],
        "fs_fsstat": [
            "fs_fsstat",
            "fsstat"
        ],
        "fs_open": [
            "fs_open",
            "path_to_mount",
            "getfd",
            "open",
            "malloc",
            "sizeof",
            "list_add_head"
        ],
        "fs_read": [
            "fs_read",
            "fhtocp",
            "read"
        ],
        "fs_stat": [
            "fs_stat",
            "fhtocp",
            "fstat"
        ],
        "fs_seek": [
            "fs_seek",
            "fhtocp",
            "seek"
        ],
        "fs_close": [
            "fs_close",
            "fhtocp",
            "close",
            "list_delete",
            "free"
        ],
        "fs_opendir": [
            "fs_opendir",
            "path_to_mount",
            "getfd",
            "opendir",
            "malloc",
            "sizeof",
            "list_add_head"
        ],
        "fs_readdir": [
            "fs_readdir",
            "fhtocp",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "readdir"
        ],
        "fs_rewinddir": [
            "fs_rewinddir",
            "fhtocp",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "rewinddir"
        ],
        "fs_closedir": [
            "fs_closedir",
            "fhtocp",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "closedir",
            "list_delete",
            "free"
        ],
        "fs_load_file": [
            "fs_load_file",
            "RELEASE_ASSERT",
            "fs_open",
            "platform_record_breadcrumb",
            "fs_stat",
            "platform_record_breadcrumb",
            "security_allow_memory",
            "platform_record_breadcrumb",
            "printf",
            "fs_read",
            "fs_close",
            "platform_record_breadcrumb",
            "memset"
        ],
        "fs_dump_mounts": [
            "fs_dump_mounts",
            "printf",
            "list_for_every_entry",
            "printf"
        ]
    },
    "lib/fs/hfs": {
        "CacheInit": [
            "CacheInit",
            "free",
            "posix_memalign",
            "bzero",
            "sizeof"
        ],
        "CacheRead": [
            "CacheRead",
            "memcpy",
            "CacheRead",
            "HFSBlockRead",
            "memcpy"
        ],
        "walk": [
            "walk",
            "fs_opendir",
            "printf",
            "fs_readdir",
            "strlen",
            "strlen",
            "malloc",
            "snprintf",
            "printf",
            "fs_open",
            "fs_stat",
            "malloc",
            "fs_read",
            "printf",
            "free",
            "printf",
            "printf",
            "printf",
            "walk",
            "free",
            "fs_closedir"
        ],
        "fuzz_main": [
            "fuzz_main",
            "create_mock_blockdev",
            "register_blockdev",
            "fs_mount",
            "printf",
            "walk"
        ],
        "env_blacklist": [
            "env_blacklist"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram"
        ],
        "test_fs": [
            "test_fs",
            "getenv",
            "TEST_ASSERT_NOT_NULL",
            "create_mock_blockdev",
            "register_blockdev",
            "fs_mount",
            "TEST_ASSERT_EQ",
            "fs_dump_dir",
            "fs_dump_dir",
            "fs_opendir",
            "TEST_ASSERT_LT",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "TEST_ASSERT_GTE",
            "fs_opendir",
            "TEST_ASSERT_EQ",
            "fs_closedir",
            "malloc",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "strlen",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_MEM_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "fs_load_file",
            "TEST_ASSERT_EQ",
            "free"
        ],
        "HFSInitPartition": [
            "HFSInitPartition",
            "dprintf",
            "HFSBlockRead",
            "HFSdebug",
            "ValidateHFSPlusHeader",
            "HFSntohl",
            "HFSdebug",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "CacheInit",
            "memcpy",
            "HFSntohll",
            "HFSdebug",
            "HFSdebug",
            "ReadExtent",
            "HFSdebug",
            "sizeof",
            "HFSdebug",
            "HFSdebug",
            "height",
            "HFSntohs",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohs",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "unused",
            "HFSntohl",
            "HFSdebug",
            "HFSdebug",
            "HFSntohl",
            "SanityCheckBTreeHeader",
            "HFSntohll",
            "HFSdebug",
            "ReadExtent",
            "HFSdebug",
            "sizeof",
            "HFSdebug",
            "HFSdebug",
            "height",
            "HFSntohs",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "HFSntohs",
            "HFSdebug",
            "HFSntohl",
            "HFSdebug",
            "unused",
            "HFSntohl",
            "HFSdebug",
            "HFSdebug",
            "HFSntohl",
            "SanityCheckBTreeHeader",
            "HFSntohs",
            "CacheInit"
        ],
        "HFSDetect": [
            "HFSDetect",
            "dprintf",
            "dprintf",
            "HFSntohs",
            "HFSntohs",
            "dprintf",
            "HFSntohl",
            "HFSntohl",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "HFSntohl",
            "HFSntohl",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "dprintf",
            "HFSntohll",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "dprintf",
            "HFSntohll",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "dprintf",
            "HFSntohll",
            "HFSntohl",
            "HFSntohl",
            "dprintf",
            "dprintf",
            "HFSntohll",
            "HFSntohl",
            "HFSntohl"
        ],
        "HFSGetFileInfo": [
            "HFSGetFileInfo",
            "HFSdebug",
            "malloc",
            "ResolvePathToCatalogEntry",
            "free"
        ],
        "HFSReadFile": [
            "HFSReadFile",
            "malloc",
            "ResolvePathToCatalogEntry",
            "dprintf",
            "dprintf",
            "ReadFile",
            "HFSdebug",
            "free"
        ],
        "HFSGetDirEntry": [
            "HFSGetDirEntry",
            "malloc",
            "ResolvePathToCatalogEntry",
            "dprintf",
            "GetCatalogEntry",
            "free"
        ],
        "HFSBlockRead": [
            "HFSBlockRead",
            "HFSdebug",
            "blockdev_read"
        ]
    },
    "lib/partition": {
        "lwvm_scan": [
            "lwvm_scan",
            "memalign",
            "sizeof",
            "memset",
            "sizeof",
            "clz",
            "blockdev_read",
            "sizeof",
            "sizeof",
            "memcmp",
            "crc32",
            "sizeof",
            "memcmp",
            "lwvm_scan_partition",
            "free"
        ],
        "mbr_scan": [
            "mbr_scan",
            "dprintf",
            "dprintf"
        ],
        "partition_scan_and_publish_subdevices": [
            "partition_scan_and_publish_subdevices",
            "lookup_blockdev",
            "lwvm_scan",
            "partition_scan",
            "snprintf",
            "lookup_blockdev",
            "create_subdev_blockdev",
            "register_blockdev"
        ],
        "gpt_scan": [
            "gpt_scan",
            "mib_get_size",
            "memalign",
            "sizeof",
            "memalign",
            "sizeof",
            "sizeof",
            "blockdev_read",
            "sizeof",
            "memcmp",
            "sizeof",
            "sizeof",
            "blockdev_read",
            "sizeof",
            "dprintf",
            "memcmp",
            "free",
            "free",
            "dprintf"
        ]
    },
    "lib/tftp": {
        "do_tftp": [
            "do_tftp",
            "printf",
            "printf",
            "printf",
            "strcmp",
            "strcmp",
            "printf",
            "env_get_uint",
            "env_get_ipaddr",
            "printf",
            "tftp_transfer",
            "htonl",
            "printf",
            "env_set_uint",
            "strcmp",
            "debug_run_script",
            "printf"
        ],
        "tftp_transfer": [
            "tftp_transfer",
            "system_time",
            "printf",
            "TFTP",
            "security_allow_memory",
            "printf",
            "start_network_stack",
            "ip2str",
            "dprintf",
            "mbuf_initialize",
            "tftp_resetbuf",
            "memset",
            "sizeof",
            "rand",
            "strlen",
            "mbuf_tail",
            "mbuf_getlength",
            "ntohs",
            "strlcpy",
            "strlcpy",
            "arp_fill",
            "registerUDPHandler",
            "transmit_udp",
            "printf",
            "unregisterUDPHandler",
            "callout_enqueue",
            "task_yield",
            "system_time",
            "printf",
            "KiB",
            "unregisterUDPHandler",
            "callout_dequeue",
            "mbuf_destroy",
            "printf"
        ]
    },
    "lib/effaceable/common": {},
    "lib/effaceable/common/include": {},
    "lib/effaceable/ios": {
        "connectClient": [
            "connectClient",
            "IOMasterPort",
            "warnx",
            "IOServiceMatching",
            "warnx",
            "IOServiceGetMatchingService",
            "warnx",
            "IOServiceOpen",
            "mach_task_self",
            "warnx"
        ],
        "wipeStorage": [
            "wipeStorage",
            "IOConnectCallScalarMethod",
            "errx"
        ],
        "getCapacity": [
            "getCapacity",
            "IOConnectCallScalarMethod",
            "warnx",
            "warnx"
        ],
        "getBytes": [
            "getBytes",
            "IOConnectCallMethod",
            "warnx",
            "warnx"
        ],
        "setBytes": [
            "setBytes",
            "IOConnectCallMethod",
            "warnx"
        ],
        "isFormatted": [
            "isFormatted",
            "IOConnectCallScalarMethod",
            "warnx",
            "warnx"
        ],
        "formatStorage": [
            "IOConnectCallScalarMethod",
            "warnx"
        ],
        "main": [
            "main",
            "getuid",
            "errx",
            "root",
            "getuid",
            "connectClient",
            "errx",
            "printUsage",
            "strcmp",
            "printf",
            "printf",
            "strcmp",
            "wipeStorage",
            "strcmp",
            "quickTest",
            "strcmp",
            "lockerList",
            "strcmp",
            "generateNonce",
            "printUsage",
            "strcmp",
            "lockerEfface",
            "printUsage",
            "strcmp",
            "lockerSet",
            "strcmp",
            "lockerGet",
            "printUsage",
            "errx"
        ],
        "printUsage": [
            "printUsage",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "hexdump": [
            "hexdump",
            "printf",
            "printf",
            "printf"
        ],
        "quickTest": [
            "quickTest",
            "getCapacity",
            "errx",
            "printf",
            "malloc",
            "malloc",
            "errx",
            "getBytes",
            "errx",
            "printf",
            "hexdump",
            "srandom",
            "sizeof",
            "random",
            "setBytes",
            "errx",
            "printf",
            "hexdump",
            "getBytes",
            "errx",
            "printf",
            "hexdump",
            "bcmp",
            "errx",
            "printf",
            "free",
            "free"
        ],
        "lockerList": [
            "lockerList",
            "getCapacity",
            "errx",
            "warnx",
            "malloc",
            "getBytes",
            "errx",
            "warnx",
            "printf",
            "printf",
            "UNTAG",
            "sizeof",
            "warnx",
            "hexdump",
            "sizeof",
            "warnx"
        ],
        "lockerGet": [
            "lockerGet",
            "memset",
            "strncpy",
            "sizeof",
            "IOConnectCallMethod",
            "errx",
            "open",
            "err",
            "warnx",
            "write",
            "err",
            "s",
            "close",
            "exit"
        ],
        "lockerSet": [
            "lockerSet",
            "memset",
            "strncpy",
            "open",
            "err",
            "read",
            "sizeof",
            "err",
            "close",
            "IOConnectCallMethod",
            "errx",
            "exit"
        ],
        "lockerEfface": [
            "lockerEfface",
            "memset",
            "strncpy",
            "IOConnectCallMethod",
            "errx",
            "exit"
        ],
        "generateNonce": [
            "generateNonce",
            "sizeof",
            "memset",
            "IOConnectCallMethod",
            "errx",
            "printf",
            "printf",
            "exit"
        ]
    },
    "lib/effaceable/iokit": {},
    "lib/effaceable/iboot": {
        "trustEffaceableContext": [
            "trustEffaceableContext"
        ],
        "effaceable_get_locker": [
            "effaceable_get_locker",
            "trustEffaceableContext",
            "locateEffaceableStorage",
            "getLocker"
        ],
        "effaceable_set_locker": [
            "effaceable_set_locker",
            "trustEffaceableContext",
            "locateEffaceableStorage",
            "setLocker"
        ],
        "effaceable_space_for_locker": [
            "effaceable_space_for_locker",
            "locateEffaceableStorage",
            "spaceForLocker"
        ],
        "effaceable_efface_locker": [
            "effaceable_efface_locker",
            "trustEffaceableContext",
            "locateEffaceableStorage",
            "effaceLocker"
        ],
        "effaceable_consume_nonce": [
            "effaceable_consume_nonce",
            "locateEffaceableStorage",
            "consumeNonce"
        ],
        "effaceable_get_bytes": [
            "effaceable_get_bytes",
            "locateEffaceableStorage",
            "getBytes"
        ],
        "effaceable_get_capacity": [
            "effaceable_get_capacity",
            "locateEffaceableStorage",
            "getCapacity",
            "debug"
        ],
        "freeMemIboot": [
            "freeMemIboot",
            "free"
        ],
        "cmpMemIboot": [
            "cmpMemIboot",
            "memcmp"
        ],
        "readRandomIboot": [
            "readRandomIboot",
            "sizeof",
            "random_get_bytes",
            "sizeof",
            "srand",
            "rand",
            "rand"
        ],
        "calcSHA1Iboot": [
            "calcSHA1Iboot",
            "sha1_calculate"
        ],
        "crc32Iboot": [
            "crc32Iboot",
            "update_crc32",
            "update_crc32"
        ],
        "setPropertyIboot": [
            "setPropertyIboot",
            "debug"
        ],
        "panicIboot": [
            "panicIboot",
            "panic"
        ],
        "vlogfIboot": [
            "vlogfIboot",
            "vprintf"
        ]
    },
    "lib/effaceable/iboot/nand": {},
    "lib/effaceable/iboot/nand/include/lib": {},
    "lib/effaceable/iboot/include/lib": {},
    "lib/effaceable/iboot/nor": {
        "validate": [
            "validate",
            "require",
            "require",
            "require",
            "sizeof",
            "sizeof",
            "require",
            "panic",
            "panic",
            "panic",
            "panic"
        ],
        "getNorOffset": [
            "getNorOffset"
        ],
        "getRegionCountIboot": [
            "getRegionCountIboot",
            "validate",
            "sizeof",
            "sizeof"
        ],
        "getRegionSizeIboot": [
            "getRegionSizeIboot",
            "validate"
        ],
        "eraseRegionIboot": [
            "eraseRegionIboot",
            "validate",
            "blockdev_erase",
            "context",
            "getNorOffset",
            "debug"
        ],
        "writeRegionIboot": [
            "writeRegionIboot",
            "validate",
            "blockdev_write",
            "context",
            "getNorOffset",
            "debug"
        ],
        "readRegionIboot": [
            "readRegionIboot",
            "validate",
            "blockdev_read",
            "context",
            "getNorOffset",
            "doHexdump",
            "debug"
        ],
        "setupEffaceableNorContract": [
            "setupEffaceableNorContract",
            "lookup_blockdev",
            "debug",
            "debug"
        ]
    },
    "lib/effaceable/iboot/nor/include/lib": {},
    "lib/macho": {
        "load_kernelcache": [
            "load_kernelcache",
            "printf",
            "image_load_memory",
            "printf",
            "loaded_kernelcache"
        ],
        "load_kernelcache_file": [
            "load_kernelcache_file",
            "PROFILE_ENTER",
            "image_load_file",
            "printf",
            "PROFILE_EXIT",
            "loaded_kernelcache"
        ],
        "load_kernelcache_image": [
            "load_kernelcache_image",
            "image_load",
            "printf",
            "loaded_kernelcache"
        ],
        "contains_boot_arg": [
            "contains_boot_arg",
            "strlen",
            "strncmp",
            "strncmp"
        ],
        "update_display_info": [
            "update_display_info",
            "memset",
            "sizeof",
            "display_get_info"
        ],
        "load_monitor_image": [
            "load_monitor_image",
            "platform_get_memory_region_size",
            "printf",
            "loaded_monitor"
        ],
        "macho_valid": [
            "macho_valid"
        ],
        "macho_slideable": [
            "macho_slideable",
            "macho_valid"
        ],
        "macho_load": [
            "macho_load",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "defined",
            "defined",
            "dprintf",
            "macho_load_segment",
            "dprintf",
            "defined",
            "defined",
            "sizeof",
            "dprintf",
            "ProcessSymbols",
            "dprintf",
            "ProcessRelocations",
            "dprintf",
            "platform_cache_operation"
        ],
        "ProcessSymbols": [
            "ProcessSymbols",
            "defined",
            "dprintf",
            "dprintf",
            "dprintf",
            "defined",
            "dprintf"
        ],
        "ProcessRelocations": [
            "ProcessRelocations",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "sizeof",
            "dprintf",
            "length",
            "dprintf",
            "type",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "UpdateDeviceTree": [
            "UpdateDeviceTree",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "FindNode",
            "FindProperty",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "defined",
            "defined",
            "stram",
            "FindNode",
            "FindProperty",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "FindNode",
            "dt_set_prop_32",
            "platform_get_chip_revision",
            "dt_set_prop_32",
            "platform_get_fuse_revision",
            "FindNode",
            "FindProperty",
            "platform_get_product_id",
            "memcpy",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "sizeof",
            "swap32",
            "FindProperty",
            "paint_color_map_get_DClr",
            "FindProperty",
            "sizeof",
            "paint_get_color_policy",
            "env_get",
            "strcmp",
            "FindNode",
            "printf",
            "IONVRAMController",
            "nvram_update_devicetree",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "consistent_debug_get_registry",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "security_allow_modes",
            "status",
            "FindProperty",
            "platform_get_raw_production_mode",
            "mode",
            "FindProperty",
            "platform_get_secure_mode",
            "FindProperty",
            "platform_get_current_production_mode",
            "FindProperty",
            "platform_get_secure_mode",
            "FindProperty",
            "platform_get_nonce",
            "memcpy",
            "FindProperty",
            "platform_get_memory_manufacturer_string",
            "strlcpy",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "security_allow_modes",
            "FindProperty",
            "platform_get_board_id",
            "FindProperty",
            "platform_get_chip_id",
            "FindProperty",
            "platform_get_ecid_id",
            "FindProperty",
            "platform_get_die_id",
            "FindProperty",
            "random_get_bytes",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "sizeof",
            "ticket_get_hash",
            "sizeof",
            "memcpy",
            "sizeof",
            "FindProperty",
            "platform_get_boot_manifest_hash",
            "sizeof",
            "memcpy",
            "sizeof",
            "panic",
            "FindProperty",
            "platform_get_mix_n_match_prevention_status",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "env_get_ipaddr",
            "memcpy",
            "env_get",
            "env_get_ipaddr",
            "memcpy",
            "memcpy",
            "memcpy",
            "memcpy",
            "dt_set_prop_32",
            "platform_get_security_domain",
            "dt_set_prop_32",
            "platform_get_hardware_epoch",
            "contains_boot_arg",
            "FindProperty",
            "env_get_uint",
            "snprintf",
            "defined",
            "defined",
            "FindNode",
            "FindProperty",
            "platform_get_memory_region_base",
            "FindProperty",
            "platform_get_memory_region_size",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "memset",
            "sizeof",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "memcpy",
            "FindNode",
            "FindProperty",
            "memcpy",
            "FindProperty",
            "strlcpy",
            "printf",
            "FindNode",
            "FindProperty",
            "memcpy",
            "node",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "memcpy",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindProperty",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindProperty",
            "syscfgCopyDataForTag",
            "FindNode",
            "FindProperty",
            "env_get",
            "env_get_ethaddr",
            "target_get_property",
            "necessary",
            "FindNode",
            "FindProperty",
            "gasgauge_get_battery_id",
            "syscfgCopyDataForTag",
            "FindProperty",
            "target_get_property",
            "FindNode",
            "FindProperty",
            "memcpy",
            "gasgauge_get_battery_id",
            "syscfgCopyDataForTag",
            "FindProperty",
            "power_get_boot_battery_level",
            "FindProperty",
            "power_get_usb_brick_id",
            "sizeof",
            "FindNode",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "memcpy",
            "FindNode",
            "FindProperty",
            "syscfgCopyDataForTag",
            "syscfgCopyDataForTag",
            "sizeof",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindNode",
            "sizeof",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "platform_update_device_tree",
            "FindNode",
            "system_time",
            "FindProperty",
            "FindProperty",
            "FindProperty",
            "FindProperty"
        ]
    },
    "lib/mib": {
        "mib_exists": [
            "mib_exists",
            "mib_find_node",
            "panic"
        ],
        "_mib_find": [
            "_mib_find",
            "mib_find_node",
            "panic",
            "func",
            "panic",
            "panic"
        ],
        "_mib_get": [
            "_mib_get",
            "_mib_find",
            "panic"
        ],
        "print_mib_node": [
            "print_mib_node",
            "mib_find_oid_ident",
            "printf",
            "strlen",
            "strlen",
            "printf",
            "printf",
            "mib_get_u32",
            "mib_get_u32",
            "mib_get_u32",
            "printf",
            "mib_get_s32",
            "mib_get_s32",
            "mib_get_s32",
            "printf",
            "mib_get_u64",
            "mib_get_u64",
            "mib_get_u64",
            "printf",
            "mib_get_s64",
            "mib_get_s64",
            "mib_get_s64",
            "printf",
            "mib_get_bool",
            "mib_get_str",
            "printf",
            "printf",
            "printf",
            "hexdump",
            "mib_get_ptr",
            "printf",
            "printf"
        ],
        "do_mib": [
            "do_mib",
            "printf",
            "LINKER_SET_FOREACH",
            "print_mib_node"
        ]
    },
    "lib/paint": {
        "paint_init": [
            "paint_init",
            "dprintf"
        ],
        "paint_set_bgcolor": [
            "paint_set_bgcolor",
            "RGB10",
            "RGB"
        ],
        "paint_set_picture_for_tag": [
            "paint_set_picture_for_tag",
            "mib_get_u32",
            "image_find",
            "dprintf",
            "paint_set_picture"
        ],
        "paint_set_picture_for_tag_list": [
            "paint_set_picture_for_tag_list",
            "mib_get_u32",
            "image_find",
            "dprintf",
            "paint_set_picture_list"
        ],
        "paint_set_picture": [
            "paint_set_picture",
            "paint_set_picture_list"
        ],
        "paint_set_picture_list": [
            "paint_set_picture_list",
            "clear_flattened_images",
            "dprintf",
            "type",
            "image_load",
            "dprintf",
            "security_consolidate_environment",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "paint_draw_picture"
        ],
        "paint_set_picture_from_file": [
            "paint_set_picture_from_file",
            "image_load_file",
            "dprintf",
            "security_consolidate_environment",
            "paint_draw_picture"
        ],
        "paint_update_image": [
            "paint_update_image",
            "paint_update_image_wide_gammut",
            "paint_update_image_argb"
        ],
        "display_get_info": [
            "display_get_info",
            "mib_get_s32",
            "mib_get_u32",
            "active",
            "mib_get_addr"
        ],
        "paint_install_gamma_table": [
            "paint_install_gamma_table",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "dprintf",
            "dprintf",
            "mib_get_u32",
            "mib_get_ptr",
            "dprintf",
            "paint_install_gamma_table_channel",
            "paint_install_gamma_table_channel",
            "paint_install_gamma_table_channel",
            "printf"
        ],
        "paint_get_syscfg_wpcl": [
            "paint_get_syscfg_wpcl",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof"
        ],
        "paint_displaytest": [
            "paint_displaytest",
            "fill_rect",
            "update_framebuffer"
        ],
        "fill_rect": [
            "fill_rect",
            "hline",
            "hline"
        ],
        "plot": [
            "plot",
            "plot"
        ],
        "get_pixel": [
            "get_pixel",
            "get_pixel"
        ],
        "paint_color_map_get_DClr": [
            "paint_color_map_get_DClr",
            "sizeof",
            "dprintf",
            "dclrOverride",
            "sizeof",
            "dprintf",
            "syscfgCopyDataForTag",
            "sizeof",
            "target_dclr_from_clrc",
            "sizeof",
            "dprintf",
            "sizeof",
            "dprintf",
            "DCLR_VERSION",
            "DCLR_VERSION",
            "report_color",
            "report_color",
            "dprintf",
            "mib_get_bool",
            "panic"
        ],
        "color_map_init": [
            "color_map_init",
            "dprintf",
            "color_map_init",
            "dprintf",
            "target_color_map_init",
            "dprintf",
            "target_color_map_init",
            "paint_color_map_get_DClr",
            "sizeof",
            "sizeof",
            "DCLR_VERSION",
            "DCLR_VERSION",
            "ColorRGB888",
            "color_map_get_DClr",
            "dprintf",
            "d",
            "dprintf",
            "dprintf",
            "target_color_map_init",
            "panic"
        ],
        "paint_color_map_enable": [
            "paint_color_map_enable",
            "dprintf"
        ],
        "paint_color_map_is_desired": [
            "paint_color_map_is_desired"
        ],
        "paint_color_map_is_enabled": [
            "paint_color_map_is_enabled"
        ],
        "paint_color_map_is_invalid": [
            "paint_color_map_is_invalid"
        ],
        "display_init_alloc_mem": [
            "display_init_alloc_mem",
            "mib_get_size"
        ],
        "set_canvas": [
            "set_canvas",
            "bytes",
            "display_init_alloc_mem",
            "alloc_display_valid_region_memory",
            "alloc_display_valid_region_memory",
            "alloc_display_valid_region_memory",
            "alloc_display_valid_region_memory",
            "set_plane",
            "set_plane",
            "color_map_init"
        ],
        "dump_paint_plane": [
            "dump_paint_plane",
            "printf",
            "printf",
            "cs_to_string",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "dump_paint_canvas": [
            "dump_paint_canvas",
            "printf",
            "printf",
            "cs_to_string",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "dump_paint_plane"
        ],
        "dump_paint_information": [
            "dump_paint_information",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "dump_paint_canvas"
        ],
        "display_paint_plane": [
            "display_paint_plane",
            "dump_paint_plane"
        ],
        "display_paint_canvas": [
            "display_paint_canvas",
            "dump_paint_canvas"
        ],
        "display_paint_information": [
            "display_paint_information",
            "dump_paint_information"
        ],
        "test_suite_init_paint": [
            "test_suite_init_paint"
        ],
        "test_paint_init_with_data": [
            "test_paint_init_with_data",
            "TEST_ASSERT_NOT_NULL",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "bzero",
            "set_canvas",
            "malloc",
            "bzero",
            "TEST_ASSERT_EQ",
            "paint_init"
        ],
        "test_paint_cleanup_with_data": [
            "test_paint_cleanup_with_data",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_NOT_NULL",
            "free",
            "free"
        ],
        "test_paint_CS_RGB888_blue": [
            "test_paint_CS_RGB888_blue",
            "test_paint_init_with_data",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_LTE",
            "paint_set_bgcolor",
            "paint_update_image",
            "hexdump",
            "hexdump",
            "TEST_ASSERT_MEM_EQ",
            "test_paint_cleanup_with_data"
        ]
    },
    "lib/ticket": {
        "sprint_hex": [
            "sprint_hex"
        ],
        "ticket_validation_required": [
            "ticket_validation_required",
            "platform_get_chip_id",
            "platform_get_board_id"
        ],
        "ticket_copy_tag_data": [
            "ticket_copy_tag_data",
            "require_action",
            "TICKETLOG",
            "DERApTicketCopyTagData",
            "require"
        ],
        "ticket_validate_image3": [
            "ticket_validate_image3",
            "sizeof",
            "sizeof",
            "TICKETLOG",
            "TICKETLOG",
            "ticket_get_image3_tags",
            "TICKETLOG",
            "TICKETLOG",
            "ticket_copy_tag_data",
            "TICKETLOG",
            "tag",
            "sizeof",
            "TICKETLOG",
            "tag",
            "sprint_hex",
            "sizeof",
            "sizeof",
            "TICKETLOG",
            "sprint_hex",
            "sizeof",
            "TICKETLOG",
            "memcmp",
            "sizeof",
            "TICKETLOG",
            "tag",
            "ticket_copy_tag_data",
            "TICKETLOG",
            "tag",
            "sizeof",
            "TICKETLOG",
            "tag",
            "TICKETLOG"
        ],
        "ticket_set": [
            "ticket_set",
            "require",
            "require",
            "DERApTicketParseLengthFromBuffer",
            "require_action",
            "TICKETLOG",
            "require_action",
            "TICKETLOG",
            "malloc",
            "require_action",
            "TICKETLOG",
            "memcpy",
            "calloc",
            "sizeof",
            "require_action",
            "TICKETLOG",
            "DERApTicketDecode",
            "require_action",
            "TICKETLOG",
            "DERApTicketValidate",
            "require_action",
            "TICKETLOG",
            "free",
            "free",
            "sha1_calculate",
            "sprint_hex",
            "sizeof",
            "sizeof",
            "TICKETLOG",
            "ticket",
            "free",
            "free"
        ],
        "do_ticket": [
            "do_ticket",
            "env_get_uint",
            "require_action",
            "TICKETLOG",
            "require_action",
            "TICKETLOG",
            "check",
            "mib_get_size",
            "ticket_set",
            "mib_get_addr",
            "require",
            "require_action",
            "TICKETLOG"
        ],
        "do_ticket_dump": [
            "do_ticket_dump",
            "printf",
            "hexdump"
        ],
        "ticket_get_hash": [
            "ticket_get_hash",
            "sizeof",
            "memcpy",
            "sizeof"
        ],
        "ticket_load_file": [
            "ticket_load_file",
            "fs_load_file",
            "require_action",
            "TICKETLOG",
            "ticket_set",
            "require_action",
            "TICKETLOG",
            "require_action",
            "TICKETLOG",
            "TICKETLOG"
        ],
        "do_ticket_file": [
            "do_ticket_file",
            "require_action",
            "printf",
            "ticket_load_file",
            "mib_get_addr",
            "mib_get_size",
            "require"
        ],
        "ticket_load": [
            "ticket_load",
            "image_find",
            "require_action",
            "TICKETLOG",
            "require_action",
            "TICKETLOG",
            "malloc",
            "type",
            "image_load",
            "TICKETLOG",
            "ticket_set",
            "free",
            "TICKETLOG"
        ],
        "do_ticket_load": [
            "do_ticket_load",
            "ticket_load",
            "require"
        ],
        "fuzz_main": [
            "fuzz_main",
            "stat",
            "TEST_ASSERT_EQ",
            "fopen",
            "TEST_ASSERT_NOT_NULL",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "fread",
            "TEST_ASSERT_EQ",
            "create_mem_blockdev",
            "TEST_ASSERT_NOT_NULL",
            "image_search_bdev",
            "ticket_load",
            "free"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_chip_id": [
            "platform_get_chip_id"
        ],
        "platform_get_ecid_id": [
            "platform_get_ecid_id"
        ],
        "platform_get_nonce": [
            "platform_get_nonce"
        ],
        "platform_get_security_domain": [
            "platform_get_security_domain"
        ],
        "platform_get_raw_production_mode": [
            "platform_get_raw_production_mode"
        ],
        "platform_get_hardware_epoch": [
            "platform_get_hardware_epoch"
        ],
        "platform_get_security_epoch": [
            "platform_get_security_epoch"
        ],
        "fs_load_file": [
            "fs_load_file"
        ],
        "security_validate_image": [
            "security_validate_image"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "security_set_production_override": [
            "security_set_production_override"
        ],
        "env_blacklist": [
            "env_blacklist"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram"
        ],
        "DERApTicketCopyTagData": [
            "DERApTicketCopyTagData",
            "DERFindItemWithTag",
            "require",
            "require_action",
            "TICKETLOG",
            "length",
            "length",
            "memcpy"
        ],
        "DERApTicketDecode": [
            "DERApTicketDecode",
            "bzero",
            "sizeof",
            "DERDecodeItem",
            "require_action",
            "TICKETLOG",
            "DERParseSequenceContent",
            "require_action",
            "TICKETLOG",
            "DERParseSequenceContent",
            "sizeof",
            "require_action",
            "TICKETLOG",
            "DEROidCompare",
            "TICKETLOG",
            "sha1_calculate",
            "verify_signature_with_chain",
            "sizeof",
            "TICKETLOG",
            "TICKETLOG",
            "hexdump",
            "require_action",
            "TICKETLOG",
            "DERApTicketValidateCertExtension",
            "require_action",
            "TICKETLOG"
        ],
        "DERApTicketValidate": [
            "DERApTicketValidate",
            "mib_get_u32",
            "ecid",
            "DERFindItemWithTag",
            "require",
            "platform_get_ecid_id",
            "DERApTicketFindAndValidateTag",
            "sizeof",
            "require",
            "chipid",
            "platform_get_chip_id",
            "DERApTicketFindAndValidateTag",
            "sizeof",
            "require",
            "boardid",
            "platform_get_board_id",
            "DERApTicketFindAndValidateTag",
            "sizeof",
            "require",
            "mode",
            "DERApTicketValidateProductionMode",
            "require",
            "domain",
            "platform_get_security_domain",
            "DERApTicketFindAndValidateTag",
            "sizeof",
            "require",
            "_DERApTicketValidateBuildString",
            "require",
            "nonce",
            "DERFindItemWithTag",
            "sizeof",
            "TICKETLOG",
            "platform_get_nonce",
            "sha1_calculate",
            "sizeof",
            "memcmp",
            "sizeof",
            "sprint_hex",
            "sizeof",
            "sprint_hex",
            "sizeof",
            "sizeof",
            "TICKETLOG",
            "TICKETLOG"
        ],
        "DERApTicketParseLengthFromBuffer": [
            "DERApTicketParseLengthFromBuffer",
            "require",
            "require",
            "DERDecodeItem",
            "require_action",
            "TICKETLOG"
        ]
    },
    "lib/lzss": {
        "decompress_lzss": [
            "decompress_lzss",
            "defined",
            "decompress_lzss_vec",
            "arch_task_fp_enable",
            "decompress_lzss_vec",
            "arch_task_fp_enable",
            "malloc",
            "memset",
            "free"
        ],
        "test_lzss": [
            "test_lzss",
            "malloc",
            "sizeof",
            "memset",
            "memcpy",
            "sizeof",
            "memcpy",
            "sizeof",
            "decompress_lzss",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "free"
        ]
    },
    "lib/cksum": {
        "siphash": [
            "siphash",
            "U8TO64_LE",
            "U8TO64_LE",
            "sizeof",
            "U8TO64_LE",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "U64TO8_LE"
        ],
        "siphash_aligned": [
            "siphash_aligned",
            "sizeof",
            "sizeof",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf"
        ],
        "do_crc": [
            "do_crc",
            "printf",
            "printf",
            "security_allow_memory",
            "printf",
            "crc",
            "printf",
            "u"
        ],
        "update_crc32": [
            "update_crc32",
            "make_crc32_table"
        ],
        "crc32": [
            "crc32",
            "update_crc32"
        ],
        "test_crc32": [
            "test_crc32",
            "sizeof",
            "crc32",
            "TEST_ASSERT_EQ"
        ],
        "test_update_crc32": [
            "test_update_crc32",
            "sizeof",
            "update_crc32",
            "update_crc32",
            "update_crc32",
            "TEST_ASSERT_EQ",
            "update_crc32",
            "TEST_ASSERT_EQ"
        ],
        "test_crc": [
            "test_crc",
            "sizeof",
            "crc",
            "TEST_ASSERT_EQ"
        ],
        "test_crc_byte": [
            "test_crc_byte",
            "sizeof",
            "crc_byte",
            "crc_byte",
            "TEST_ASSERT_EQ"
        ],
        "test_adler32": [
            "test_adler32",
            "sizeof",
            "adler32",
            "TEST_ASSERT_EQ"
        ],
        "test_siphash": [
            "test_siphash",
            "sizeof",
            "siphash",
            "TEST_ASSERT_MEM_EQ",
            "sizeof"
        ],
        "test_siphash_aligned": [
            "test_siphash_aligned",
            "sizeof",
            "siphash_aligned",
            "TEST_ASSERT_MEM_EQ",
            "sizeof"
        ],
        "adler32": [
            "adler32",
            "defined",
            "adler32_vec",
            "arch_task_fp_enable",
            "adler32_vec",
            "arch_task_fp_enable",
            "DO16"
        ],
        "crc": [
            "crc",
            "COMPUTE",
            "COMPUTE"
        ],
        "crc_byte": [
            "crc_byte",
            "COMPUTE"
        ]
    },
    "lib/libbuiltin/arm": {
        "__udivdi3": [
            "__udivdi3",
            "panic"
        ],
        "__udivmoddi4": [
            "__udivmoddi4",
            "__udivdi3"
        ],
        "__umoddi3": [
            "__umoddi3",
            "__udivmoddi4"
        ],
        "__divdi3": [
            "__divdi3",
            "apply_signed"
        ],
        "__moddi3": [
            "__moddi3",
            "apply_signed"
        ],
        "__divmoddi4": [
            "__divmoddi4",
            "__moddi3",
            "__divdi3"
        ],
        "__udivsi3": [
            "__udivsi3",
            "__udivdi3"
        ],
        "__umodsi3": [
            "__umodsi3",
            "__umoddi3"
        ],
        "__udivmodsi4": [
            "__udivmodsi4",
            "__umodsi3",
            "__udivsi3"
        ],
        "__divsi3": [
            "__divsi3",
            "apply_signed"
        ],
        "__modsi3": [
            "__modsi3",
            "apply_signed"
        ],
        "__divmodsi4": [
            "__divmodsi4",
            "__modsi3",
            "__divsi3"
        ],
        "main": [
            "main",
            "sizeof",
            "sizeof",
            "do_test_variants",
            "printf",
            "__divdi3",
            "assert",
            "__divdi3",
            "assert",
            "__divdi3",
            "assert",
            "__modsi3",
            "assert",
            "printf"
        ]
    },
    "lib/image": {
        "image_search_bdev": [
            "image_search_bdev",
            "posix_memalign",
            "blockdev_read",
            "image4_process_superblock",
            "image3_process_superblock",
            "env_set_uint",
            "free"
        ],
        "image_free_bdev": [
            "image_free_bdev",
            "image4_free_bdev",
            "image3_free_bdev"
        ],
        "image_load": [
            "image_load",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "image4_load",
            "image3_load",
            "dprintf",
            "dprintf",
            "image4_load",
            "dprintf",
            "dprintf",
            "image3_load",
            "dprintf",
            "memcpy"
        ],
        "image_dump_list": [
            "image_dump_list",
            "image4_dump_list",
            "image3_dump_list"
        ],
        "image_load_file": [
            "image_load_file",
            "fs_load_file",
            "image_create_from_memory",
            "platform_record_breadcrumb_marker",
            "image_load",
            "image_free"
        ],
        "image_load_memory": [
            "image_load_memory",
            "PROFILE_ENTER",
            "image_create_from_memory",
            "image_load",
            "image_free",
            "PROFILE_EXIT"
        ],
        "image_load_type": [
            "image_load_type",
            "image_find",
            "image_load"
        ],
        "image_free": [
            "image_free",
            "free"
        ]
    },
    "lib/image/image4": {
        "image4_process_superblock": [
            "image4_process_superblock",
            "malloc",
            "dprintf",
            "dprintf",
            "dprintf",
            "memcpy",
            "blockdev_read",
            "dprintf",
            "image4_get_partial",
            "dprintf",
            "dprintf",
            "malloc",
            "sizeof",
            "list_add_tail",
            "free"
        ],
        "image4_free_bdev": [
            "image4_free_bdev",
            "list_for_every_entry_safe",
            "list_delete",
            "free"
        ],
        "image4_load": [
            "image4_load",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "bzero",
            "sizeof",
            "bzero",
            "sizeof",
            "platform_get_hardware_epoch",
            "platform_get_chip_id",
            "platform_get_board_id",
            "platform_get_ecid_id",
            "platform_get_security_domain",
            "platform_get_raw_production_mode",
            "platform_get_secure_mode",
            "platform_get_mix_n_match_prevention_status",
            "platform_get_boot_manifest_hash",
            "platform_get_nonce",
            "image4_hash_init",
            "supplied",
            "image4_load_copyobject",
            "image4_get_partial",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "bzero",
            "dprintf",
            "Img4DecodeInit",
            "dprintf",
            "platform_record_breadcrumb_int",
            "Img4DecodeGetPayloadType",
            "dprintf",
            "start_cb",
            "panic",
            "validity_cb",
            "dprintf",
            "dprintf",
            "platform_record_breadcrumb_int",
            "Img4DecodeManifestExists",
            "dprintf",
            "platform_record_breadcrumb_int",
            "Img4DecodePerformTrustEvaluatation",
            "dprintf",
            "platform_record_breadcrumb_int",
            "RELEASE_ASSERT",
            "Img4DecodeCopyManifestDigest",
            "memcmp",
            "dprintf",
            "platform_record_breadcrumb_int",
            "security_get_effective_production_status",
            "dprintf",
            "platform_record_breadcrumb_int",
            "platform_get_secure_mode",
            "dprintf",
            "platform_record_breadcrumb_int",
            "secure",
            "platform_get_secure_mode",
            "dprintf",
            "dprintf",
            "dprintf",
            "Img4DecodeGetPayload",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "disabled",
            "image4_load_decrypt_payload",
            "platform_record_breadcrumb_int",
            "dprintf",
            "memcpy",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "bzero",
            "security_set_untrusted",
            "security_set_production_override",
            "untrusted",
            "security_set_boot_manifest_hash",
            "security_set_boot_manifest_hash",
            "security_set_mix_n_match_prevention_status",
            "security_set_mix_n_match_prevention_status",
            "security_set_lock_fuses",
            "dprintf",
            "memset",
            "validity_cb",
            "validity_cb"
        ],
        "image4_dump_list": [
            "image4_dump_list",
            "list_for_every_entry",
            "printf",
            "UNTAG",
            "printf",
            "printf"
        ],
        "image4_register_property_capture_callbacks": [
            "image4_register_property_capture_callbacks",
            "panic",
            "validity_cb",
            "dprintf"
        ],
        "swap32": [
            "swap32"
        ],
        "image4_get_partial": [
            "image4_get_partial",
            "dprintf",
            "dprintf",
            "der_expect",
            "dprintf",
            "der_restrict",
            "dprintf",
            "der_expect_ia5string",
            "dprintf",
            "der_expect",
            "der_restrict",
            "dprintf",
            "der_expect_ia5string",
            "dprintf",
            "der_expect",
            "sizeof",
            "dprintf",
            "sizeof",
            "memcpy",
            "sizeof"
        ],
        "main": [],
        "_panic": [
            "_panic",
            "va_start",
            "printf",
            "vprintf",
            "printf",
            "va_end",
            "exit"
        ]
    },
    "lib/image/image3": {
        "image3_process_superblock": [
            "image3_process_superblock",
            "dprintf",
            "crc32",
            "offsetof",
            "dprintf",
            "RELEASE_ASSERT",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "blockdev_read",
            "sizeof",
            "sizeof",
            "dprintf",
            "sizeof",
            "sizeof",
            "malloc",
            "sizeof",
            "sizeof",
            "list_add_tail",
            "dprintf"
        ],
        "image3_free_bdev": [
            "image3_free_bdev",
            "list_for_every_entry_safe",
            "list_delete",
            "free"
        ],
        "image3_load": [
            "image3_load",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "supplied",
            "image3_load_copyobject",
            "dprintf",
            "image3InstantiateFromBuffer",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "platform_record_breadcrumb_int",
            "ticket_validation_required",
            "image3_load_validate_signature",
            "platform_record_breadcrumb_int",
            "image3_load_validate_constraints",
            "dprintf",
            "platform_record_breadcrumb_int",
            "dprintf",
            "image3GetTagStruct",
            "dprintf",
            "platform_record_breadcrumb_int",
            "image3_load_decrypt_payload",
            "platform_record_breadcrumb_int",
            "memmove",
            "security_set_production_override",
            "image3Discard",
            "dprintf",
            "memset"
        ],
        "image3_dump_list": [
            "image3_dump_list",
            "list_for_every_entry",
            "printf",
            "UNTAG",
            "printf",
            "printf"
        ],
        "image3AESDecryptUsingLocalKey": [
            "image3AESDecryptUsingLocalKey",
            "aes_cbc_encrypt",
            "aes_cbc_decrypt",
            "memset",
            "sizeof",
            "dprintf"
        ],
        "image3SHA1Generate": [
            "image3SHA1Generate",
            "sha1_calculate"
        ],
        "image3PKIVerifyHash": [
            "image3PKIVerifyHash",
            "verify_signature_with_chain",
            "dprintf"
        ],
        "image3TicketVerifyHash": [
            "image3TicketVerifyHash",
            "ticket_validate_image3"
        ],
        "image3Free": [
            "image3Free",
            "free"
        ],
        "image3InstantiateNew": [
            "image3InstantiateNew",
            "image3Malloc",
            "sizeof",
            "sizeof",
            "sizeof",
            "image3Malloc",
            "image3Free",
            "sizeof",
            "debug",
            "memset",
            "sizeof",
            "HTOLE",
            "HTOLE",
            "image3SetTagUnsignedNumber",
            "image3Free",
            "image3Free",
            "sizeof"
        ],
        "image3Finalize": [
            "image3Finalize",
            "debug",
            "sizeof",
            "offsetof",
            "image3AdvanceCursorWithZeroPad",
            "debug",
            "HTOLE",
            "debug",
            "LETOH",
            "sizeof",
            "offsetof",
            "LETOH",
            "HTOLE",
            "HTOLE",
            "LETOH",
            "sizeof",
            "image3SHA1Partial",
            "image3SHA1Generate",
            "image3PKISignHash",
            "debug",
            "debug",
            "image3SetTagStructure",
            "debug",
            "image3SetTagStructure",
            "debug",
            "HTOLE",
            "HTOLE",
            "sizeof",
            "LETOH"
        ],
        "image3SetTagSignedNumber": [
            "image3SetTagSignedNumber",
            "debug",
            "UNTAG",
            "sizeof",
            "HTOLE",
            "sizeof",
            "HTOLELL",
            "image3SetTagStructure",
            "sizeof"
        ],
        "image3SetTagUnsignedNumber": [
            "image3SetTagUnsignedNumber",
            "debug",
            "UNTAG",
            "sizeof",
            "HTOLE",
            "sizeof",
            "HTOLELL",
            "image3SetTagStructure"
        ],
        "image3SetTagString": [
            "image3SetTagString",
            "debug",
            "UNTAG",
            "strlen",
            "image3Malloc",
            "sizeof",
            "memcpy",
            "image3SetTagStructure",
            "sizeof",
            "image3Free",
            "sizeof"
        ],
        "image3SetTagStructure": [
            "image3SetTagStructure",
            "debug",
            "UNTAG",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "HTOLE",
            "debug",
            "debug",
            "sizeof",
            "sizeof",
            "debug",
            "realloc",
            "debug",
            "debug",
            "debug",
            "HTOLE",
            "HTOLE",
            "HTOLE",
            "sizeof",
            "LETOH",
            "debug",
            "LETOH",
            "LETOH",
            "LETOH",
            "HTOLE",
            "LETOH",
            "LETOH",
            "debug",
            "memcpy",
            "debug",
            "memset",
            "LETOH",
            "debug",
            "HTOLE"
        ],
        "image3AdvanceCursorWithZeroPad": [
            "image3AdvanceCursorWithZeroPad",
            "debug",
            "debug",
            "HTOLE",
            "sizeof",
            "debug",
            "realloc",
            "debug",
            "debug",
            "bzero",
            "HTOLE"
        ],
        "image3InstantiateFromBuffer": [
            "image3InstantiateFromBuffer",
            "debug",
            "sizeof",
            "debug",
            "sizeof",
            "LETOH",
            "debug",
            "LETOH",
            "LETOH",
            "sizeof",
            "debug",
            "LETOH",
            "sizeof",
            "LETOH",
            "LETOH",
            "debug",
            "LETOH",
            "LETOH",
            "LETOH",
            "sizeof",
            "LETOH",
            "debug",
            "LETOH",
            "sizeof",
            "LETOH",
            "image3Malloc",
            "sizeof",
            "debug",
            "LETOH",
            "debug",
            "LETOH",
            "LETOH",
            "LETOH",
            "LETOH",
            "image3Free",
            "sizeof",
            "debug",
            "LETOH",
            "LETOH",
            "LETOH",
            "sizeof",
            "image3Free",
            "sizeof",
            "debug",
            "LETOH",
            "LETOH",
            "LETOH",
            "LETOH",
            "debug",
            "LETOH",
            "sizeof",
            "image3Malloc",
            "image3Free",
            "sizeof",
            "debug",
            "memcpy"
        ],
        "image3ValidateSignature": [
            "image3ValidateSignature",
            "debug",
            "debug",
            "debug",
            "LETOH",
            "sizeof",
            "debug",
            "Indirect",
            "LETOH",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "HTOLE",
            "debug",
            "sizeof",
            "offsetof",
            "LETOH",
            "image3SHA1Generate",
            "image3TicketVerifyHash",
            "sizeof",
            "LETOH",
            "debug",
            "debug",
            "debug",
            "debug",
            "HTOLE",
            "LETOH",
            "LETOH",
            "sizeof",
            "debug",
            "LETOH",
            "LETOH",
            "sizeof",
            "debug",
            "LETOH",
            "debug",
            "LETOH",
            "LETOH",
            "debug",
            "LETOH",
            "sizeof",
            "debug",
            "LETOH",
            "LETOH",
            "sizeof",
            "debug",
            "LETOH",
            "debug",
            "sizeof",
            "LETOH",
            "LETOH",
            "debug",
            "LETOH",
            "sizeof",
            "LETOH",
            "HTOLE",
            "sizeof",
            "LETOH",
            "sizeof",
            "offsetof",
            "LETOH",
            "image3SHA1Generate",
            "LETOH",
            "debug",
            "debug",
            "image3AESDecryptUsingLocalKey",
            "LETOH",
            "image3PKIVerifyHash",
            "LETOH",
            "LETOH",
            "memset",
            "LETOH",
            "debug",
            "failed",
            "debug",
            "image3InstantiateFromBuffer",
            "debug",
            "chain",
            "sizeof",
            "LETOH",
            "memset",
            "HTOLE",
            "LETOH"
        ],
        "image3TagIsPresent": [
            "image3TagIsPresent",
            "image3GetTagStruct"
        ],
        "image3GetTagSignedNumber": [
            "image3GetTagSignedNumber",
            "image3GetTagStruct",
            "sizeof",
            "LETOH",
            "sizeof",
            "LETOHLL"
        ],
        "image3GetTagUnsignedNumber": [
            "image3GetTagUnsignedNumber",
            "image3GetTagStruct",
            "sizeof",
            "LETOH",
            "sizeof",
            "LETOHLL"
        ],
        "image3GetTagString": [
            "image3GetTagString",
            "image3GetTagStruct",
            "sizeof",
            "sizeof",
            "LETOH",
            "image3Malloc",
            "LETOH",
            "memcpy"
        ],
        "image3GetTagStruct": [
            "image3GetTagStruct",
            "_image3FindTag"
        ],
        "image3GetNestedImage": [
            "image3GetNestedImage"
        ],
        "_image3PrintImage": [
            "_image3PrintImage",
            "printf",
            "LETOH",
            "printf",
            "LETOH",
            "printf",
            "LETOH",
            "_image3FindTag",
            "debug",
            "printf",
            "UNTAG",
            "LETOH",
            "printf",
            "LETOH",
            "printf",
            "LETOH",
            "printf",
            "LETOH",
            "printf",
            "LETOH",
            "printf",
            "printf"
        ],
        "_image3WriteData": [
            "_image3WriteData",
            "open",
            "perror",
            "_image3FindTag",
            "debug",
            "_image3FindTag",
            "debug",
            "write",
            "printf",
            "close"
        ]
    },
    "lib/nvram": {
        "nvram_save": [
            "nvram_save",
            "bank",
            "printf",
            "nvram_save_env",
            "nvram_write_bank",
            "sort_bank_age"
        ],
        "nvram_set_panic": [
            "nvram_set_panic",
            "bank",
            "printf",
            "find_part_in_bank",
            "calloc",
            "sizeof",
            "strlcpy",
            "sizeof",
            "malloc",
            "list_add_head",
            "memcpy",
            "memset"
        ],
        "nvram_load": [
            "nvram_load",
            "dprintf",
            "lookup_blockdev",
            "nvram_load_dev",
            "nvram_load_dev"
        ],
        "nvram_update_devicetree": [
            "nvram_update_devicetree",
            "panic",
            "dprintf",
            "malloc",
            "nvram_prepare_bank",
            "dprintf",
            "dt_set_prop",
            "dprintf",
            "free"
        ],
        "fuzz_main": [
            "fuzz_main",
            "create_mock_blockdev",
            "register_blockdev",
            "nvram_load",
            "do_printenv",
            "nvram_save"
        ],
        "env_blacklist": [
            "env_blacklist"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram"
        ]
    },
    "lib/heap": {
        "malloc": [
            "malloc",
            "heap_malloc"
        ],
        "realloc": [
            "realloc",
            "heap_realloc"
        ],
        "calloc": [
            "calloc",
            "heap_calloc"
        ],
        "free": [
            "free",
            "heap_free"
        ],
        "__memcpy_chk": [
            "__memcpy_chk",
            "memcpy"
        ],
        "__memset_chk": [
            "__memset_chk",
            "memset"
        ],
        "test_heap_setup_func": [
            "test_heap_setup_func",
            "heap_reinit",
            "heap_reinit"
        ],
        "test_heap_cleanup_func": [
            "test_heap_cleanup_func",
            "free"
        ],
        "test_heap_setup_arena": [
            "test_heap_setup_arena",
            "TEST_ASSERT_NULL",
            "posix_memalign",
            "TEST_ASSERT_NOT_NULL"
        ],
        "test_heap_add_chunk_size": [
            "test_heap_add_chunk_size",
            "test_heap_setup_arena",
            "TEST_EXPECT_PANIC",
            "heap_add_chunk",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_before_add": [
            "test_heap_malloc_before_add",
            "TEST_EXPECT_PANIC",
            "heap_malloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_too_much1": [
            "test_heap_malloc_too_much1",
            "test_heap_setup_arena",
            "tprintf",
            "heap_add_chunk",
            "tprintf",
            "TEST_EXPECT_PANIC",
            "heap_malloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_too_much2": [
            "test_heap_malloc_too_much2",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_malloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_too_much3": [
            "test_heap_malloc_too_much3",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_malloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_too_much4": [
            "test_heap_malloc_too_much4",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_malloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_malloc_double_free": [
            "test_heap_malloc_double_free",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "heap_free",
            "TEST_EXPECT_PANIC",
            "heap_free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_free_null": [
            "test_heap_free_null",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_free",
            "heap_verify"
        ],
        "test_heap_malloc_then_free": [
            "test_heap_malloc_then_free",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_get_free_mem",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "heap_free",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem",
            "heap_verify"
        ],
        "test_heap_malloc_then_free2": [
            "test_heap_malloc_then_free2",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_get_free_mem",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "memset",
            "heap_free",
            "heap_free",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "memset",
            "heap_free",
            "heap_free",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem",
            "heap_verify"
        ],
        "test_heap_malloc_then_free3": [
            "test_heap_malloc_then_free3",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_get_free_mem",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "heap_free",
            "heap_free",
            "heap_free",
            "heap_free",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem",
            "heap_verify"
        ],
        "test_heap_calloc": [
            "test_heap_calloc",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_calloc",
            "sizeof",
            "TEST_ASSERT_EQ",
            "heap_free",
            "heap_verify"
        ],
        "test_heap_calloc_overflow": [
            "test_heap_calloc_overflow",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_calloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_realloc": [
            "test_heap_realloc",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_get_free_mem",
            "heap_realloc",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "heap_free",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memcpy",
            "heap_realloc",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_MEM_EQ",
            "free",
            "heap_free",
            "heap_verify",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem",
            "TEST_EXPECT_PANIC",
            "heap_free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_realloc_smaller": [
            "test_heap_realloc_smaller",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_get_free_mem",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "heap_realloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "heap_realloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "heap_free",
            "TEST_ASSERT_EQ",
            "heap_get_free_mem"
        ],
        "test_heap_realloc_corruption": [
            "test_heap_realloc_corruption",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "TEST_EXPECT_PANIC",
            "heap_realloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_realloc_corruption2": [
            "test_heap_realloc_corruption2",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "TEST_EXPECT_PANIC",
            "heap_realloc",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_realloc_odd": [
            "test_heap_realloc_odd",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "heap_malloc",
            "TEST_ASSERT_NOT_NULL",
            "memcpy",
            "heap_realloc",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_MEM_EQ",
            "heap_free",
            "free",
            "heap_verify"
        ],
        "test_heap_memalign": [
            "test_heap_memalign",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "sizeof",
            "sizeof",
            "tprintf",
            "sizeof",
            "sizeof",
            "tprintf",
            "heap_memalign",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ",
            "memset",
            "heap_free",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "sizeof",
            "heap_memalign",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ",
            "sizeof",
            "sizeof",
            "memset",
            "memcpy",
            "sizeof",
            "sizeof",
            "memset",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "sizeof",
            "heap_free",
            "free",
            "heap_verify"
        ],
        "test_heap_memalign_bad_align": [
            "test_heap_memalign_bad_align",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_memalign",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_memalign_too_much": [
            "test_heap_memalign_too_much",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_memalign",
            "heap_memalign",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_posix_memalign": [
            "test_heap_posix_memalign",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "sizeof",
            "sizeof",
            "tprintf",
            "sizeof",
            "sizeof",
            "tprintf",
            "TEST_ASSERT_EQ",
            "heap_posix_memalign",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ",
            "memset",
            "heap_free",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_EQ",
            "heap_posix_memalign",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ",
            "sizeof",
            "sizeof",
            "memset",
            "memcpy",
            "sizeof",
            "sizeof",
            "memset",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "sizeof",
            "heap_free",
            "free",
            "heap_verify"
        ],
        "test_heap_posix_memalign_bad_align": [
            "test_heap_posix_memalign_bad_align",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_posix_memalign",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_posix_memalign_too_much": [
            "test_heap_posix_memalign_too_much",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "TEST_EXPECT_PANIC",
            "heap_posix_memalign",
            "heap_posix_memalign",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_corruption": [
            "test_heap_corruption",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "TEST_EXPECT_PANIC",
            "heap_free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_corruption_pad": [
            "test_heap_corruption_pad",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "TEST_EXPECT_PANIC",
            "heap_free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_corruption_pad2": [
            "test_heap_corruption_pad2",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_malloc",
            "TEST_EXPECT_PANIC",
            "heap_free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_heap_verify": [
            "test_heap_verify",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_free",
            "heap_verify",
            "sizeof",
            "sizeof",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "sizeof",
            "sizeof",
            "heap_free",
            "heap_verify",
            "sizeof",
            "sizeof",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "heap_verify",
            "sizeof",
            "sizeof",
            "heap_free",
            "heap_verify"
        ],
        "test_heap_slide_large": [
            "test_heap_slide_large",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ"
        ],
        "test_heap_slide_small": [
            "test_heap_slide_small",
            "test_heap_setup_arena",
            "heap_add_chunk",
            "heap_calloc",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ"
        ],
        "system_time": [
            "system_time"
        ],
        "heap_reinit": [
            "heap_reinit",
            "memset",
            "sizeof",
            "memset",
            "sizeof"
        ],
        "dequantify_size": [
            "dequantify_size",
            "sizeof"
        ],
        "quantify_size": [
            "quantify_size",
            "sizeof"
        ],
        "round_size": [
            "round_size",
            "sizeof",
            "sizeof"
        ],
        "compute_bin": [
            "compute_bin",
            "quantify_size",
            "RELEASE_ASSERT",
            "__builtin_clz",
            "RELEASE_ASSERT"
        ],
        "required_size": [
            "required_size",
            "sizeof",
            "sizeof",
            "panic",
            "sizeof",
            "sizeof",
            "sizeof"
        ],
        "required_size_for_split": [
            "required_size_for_split",
            "sizeof"
        ],
        "sizeof_block": [
            "sizeof_block",
            "dequantify_size"
        ],
        "verify_block_checksum": [
            "verify_block_checksum",
            "sizeof",
            "offsetof",
            "sizeof",
            "sizeof",
            "siphash_aligned",
            "HEAP_PANIC"
        ],
        "calculate_block_checksum": [
            "calculate_block_checksum",
            "sizeof",
            "offsetof",
            "sizeof",
            "sizeof",
            "siphash_aligned"
        ],
        "verify_block_padding": [
            "verify_block_padding",
            "HEAP_PANIC",
            "sizeof",
            "sizeof",
            "HEAP_PANIC"
        ],
        "pad_block": [
            "pad_block",
            "advance_pointer",
            "next_block",
            "round_size",
            "sizeof",
            "memset",
            "sizeof"
        ],
        "free_list_remove": [
            "free_list_remove",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "verify_block_checksum",
            "calculate_block_checksum",
            "verify_block_checksum",
            "calculate_block_checksum"
        ],
        "free_list_add": [
            "free_list_add",
            "compute_bin",
            "sizeof_block",
            "RELEASE_ASSERT",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "verify_block_checksum",
            "calculate_block_checksum",
            "calculate_block_checksum"
        ],
        "split_tail": [
            "split_tail",
            "verify_block_checksum",
            "next_block",
            "verify_block_checksum",
            "sizeof_block",
            "required_size_for_split",
            "advance_pointer",
            "quantify_size",
            "free_list_add",
            "calculate_block_checksum",
            "quantify_size",
            "pad_block",
            "calculate_block_checksum",
            "calculate_block_checksum"
        ],
        "fixup_next_after_free": [
            "fixup_next_after_free",
            "next_block",
            "verify_block_checksum",
            "calculate_block_checksum"
        ],
        "heap_posix_memalign": [
            "heap_posix_memalign",
            "panic",
            "panic",
            "heap_memalign"
        ],
        "heap_free": [
            "heap_free",
            "enter_critical_section",
            "sizeof_block",
            "TRACE",
            "sizeof_block",
            "sizeof",
            "sizeof_block",
            "sizeof",
            "verify_block_checksum",
            "prev_block",
            "next_block",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "prev_block",
            "HEAP_PANIC",
            "next_block",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "HEAP_PANIC",
            "verify_block_padding",
            "memset",
            "sizeof_block",
            "sizeof",
            "verify_block_checksum",
            "merge_blocks_left",
            "verify_block_checksum",
            "merge_blocks_right",
            "fixup_next_after_free",
            "free_list_add",
            "calculate_block_checksum",
            "exit_critical_section"
        ],
        "heap_add_chunk": [
            "heap_add_chunk",
            "sizeof",
            "panic",
            "chunks",
            "bzero",
            "ROUNDUP",
            "sizeof",
            "round_size",
            "mib_get_size",
            "RELEASE_ASSERT",
            "panic",
            "sizeof",
            "panic",
            "calculate_block_checksum",
            "next_block",
            "quantify_size",
            "calculate_block_checksum",
            "next_block",
            "calculate_block_checksum",
            "heap_free"
        ],
        "heap_set_cookie": [
            "heap_set_cookie",
            "RELEASE_ASSERT",
            "heap_is_initialized",
            "memcpy",
            "sizeof"
        ],
        "heap_get_free_mem": [
            "heap_get_free_mem"
        ],
        "heap_is_initialized": [
            "heap_is_initialized"
        ],
        "heap_walk": [
            "heap_walk",
            "next_block",
            "sizeof_block",
            "sizeof_block",
            "sizeof",
            "round_size",
            "sizeof",
            "recess_pointer",
            "next_block",
            "next_block",
            "walker"
        ],
        "heap_verify_callback": [
            "heap_verify_callback",
            "verify_block_checksum",
            "verify_block_padding"
        ],
        "heap_verify": [
            "heap_verify",
            "heap_walk"
        ],
        "heap_panic": [
            "heap_panic",
            "panic",
            "printf"
        ],
        "do_malloc": [
            "do_malloc",
            "heap_dump"
        ]
    },
    "lib/blockdev": {
        "register_blockdev": [
            "register_blockdev",
            "dprintf"
        ],
        "blockdev_compare": [
            "blockdev_compare",
            "posix_memalign",
            "get_cpu_cache_line_size",
            "__min",
            "blockdev_read",
            "dprintf",
            "dprintf",
            "lld",
            "dprintf",
            "free"
        ],
        "blockdev_write_protected": [
            "blockdev_write_protected",
            "printf",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "printf",
            "write_hook",
            "RELEASE_ASSERT",
            "printf",
            "write_hook"
        ],
        "blockdev_write_block_protected": [
            "blockdev_write_block_protected",
            "printf",
            "RELEASE_ASSERT",
            "printf",
            "write_block_hook",
            "printf",
            "write_block_hook"
        ],
        "blockdev_set_protection": [
            "blockdev_set_protection",
            "dprintf"
        ],
        "blockdev_set_buffer_alignment": [
            "blockdev_set_buffer_alignment",
            "is_pow2",
            "log2_int"
        ],
        "construct_blockdev": [
            "construct_blockdev",
            "is_pow2",
            "strlen",
            "sizeof",
            "strlcpy",
            "sizeof",
            "log2_int"
        ],
        "do_blockdev": [
            "do_blockdev",
            "security_allow_modes",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "strcmp",
            "printf",
            "first_blockdev",
            "next_blockdev",
            "printf",
            "strcmp",
            "strcmp",
            "strcmp",
            "printf",
            "env_get_uint",
            "printf",
            "env_get_uint",
            "mib_get_addr",
            "security_allow_memory",
            "printf",
            "lookup_blockdev",
            "printf",
            "strcmp",
            "printf",
            "blockdev_read",
            "printf",
            "strcmp",
            "printf",
            "blockdev_write",
            "printf",
            "printf",
            "blockdev_compare",
            "printf",
            "strcmp",
            "printf",
            "lookup_blockdev",
            "printf",
            "blockdev_erase",
            "printf",
            "strcmp",
            "printf",
            "lookup_blockdev",
            "printf",
            "malloc",
            "printf",
            "blockdev_read",
            "printf",
            "free",
            "printf",
            "free",
            "printf",
            "strcmp",
            "printf",
            "lookup_blockdev",
            "printf",
            "do_slurp",
            "printf"
        ],
        "test_mem_blockdev": [
            "test_mem_blockdev",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "create_mem_blockdev",
            "do_blockdev_read_tests",
            "do_blockdev_read_block_tests",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_EQ",
            "free"
        ],
        "test_blockdev_read_block": [
            "test_blockdev_read_block",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "create_mock_blockdev",
            "do_blockdev_read_block_tests",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_EQ",
            "free"
        ],
        "test_blockdev_read": [
            "test_blockdev_read",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "create_mock_blockdev",
            "do_blockdev_read_tests",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_EQ",
            "free"
        ],
        "test_blockdev_set_buffer_alignment_read": [
            "test_blockdev_set_buffer_alignment_read",
            "malloc",
            "TEST_ASSERT_NOT_NULL",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "create_mock_blockdev",
            "blockdev_set_buffer_alignment",
            "do_blockdev_read_tests",
            "create_mock_blockdev",
            "blockdev_set_buffer_alignment",
            "do_blockdev_read_tests",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_EQ",
            "free"
        ],
        "test_blockdev_write": [
            "test_blockdev_write",
            "malloc",
            "create_mock_blockdev",
            "do_blockdev_write_tests",
            "create_mock_blockdev",
            "blockdev_set_buffer_alignment",
            "do_blockdev_write_tests",
            "create_mock_blockdev",
            "blockdev_set_buffer_alignment",
            "do_blockdev_write_tests",
            "free"
        ],
        "test_register_blockdev": [
            "test_register_blockdev",
            "create_mock_blockdev",
            "TEST_ASSERT_NOT_NULL",
            "create_mock_blockdev",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_NULL",
            "lookup_blockdev",
            "TEST_ASSERT_NULL",
            "lookup_blockdev",
            "TEST_ASSERT_NULL",
            "first_blockdev",
            "register_blockdev",
            "TEST_ASSERT_PTR_EQ",
            "lookup_blockdev",
            "TEST_ASSERT_PTR_EQ",
            "first_blockdev",
            "TEST_ASSERT_NULL",
            "lookup_blockdev",
            "register_blockdev",
            "TEST_ASSERT_PTR_EQ",
            "lookup_blockdev",
            "TEST_ASSERT_PTR_EQ",
            "lookup_blockdev",
            "first_blockdev",
            "next_blockdev",
            "TEST_ASSERT_EQ"
        ]
    },
    "lib/nonce": {
        "mobile_ap_nonce_consume_nonce": [
            "mobile_ap_nonce_consume_nonce",
            "env_get",
            "dprintf",
            "strlen",
            "dprintf",
            "strtoull",
            "dprintf",
            "dprintf",
            "env_unset",
            "nvram_save",
            "dprintf",
            "dprintf"
        ],
        "do_nonce": [
            "do_nonce",
            "mib_get_bool",
            "print_usage",
            "strcmp",
            "get_nonce",
            "strcmp",
            "clear_nonce",
            "strcmp",
            "consume_nonce",
            "strcmp",
            "read_nonce",
            "print_usage",
            "printf"
        ]
    },
    "lib/devicetree": {
        "dt_init": [
            "dt_init",
            "dt_free"
        ],
        "dt_get_size": [
            "dt_get_size"
        ],
        "dt_free": [
            "dt_free",
            "free_node",
            "free"
        ],
        "dt_serialize": [
            "dt_serialize",
            "RELEASE_ASSERT",
            "panic",
            "write_node"
        ],
        "dt_find_node": [
            "dt_find_node",
            "strchr",
            "strlen",
            "dt_get_prop",
            "dprintf",
            "memcmp",
            "dt_find_node"
        ],
        "dt_get_prop": [
            "dt_get_prop",
            "find_prop"
        ],
        "dt_find_prop": [
            "dt_find_prop",
            "find_prop"
        ],
        "dt_has_prop": [
            "dt_has_prop",
            "dt_find_prop"
        ],
        "dt_set_prop": [
            "dt_set_prop",
            "find_prop",
            "add_prop",
            "ROUND_SIZE",
            "ROUND_SIZE",
            "malloc",
            "malloc",
            "realloc",
            "memcpy",
            "memset"
        ],
        "dt_set_prop_32": [
            "dt_set_prop_32",
            "dt_set_prop",
            "sizeof"
        ],
        "dt_set_prop_64": [
            "dt_set_prop_64",
            "dt_set_prop",
            "sizeof"
        ],
        "dt_set_prop_addr": [
            "dt_set_prop_addr",
            "dt_set_prop",
            "sizeof"
        ],
        "dt_set_prop_str": [
            "dt_set_prop_str",
            "dt_set_prop",
            "strlen"
        ],
        "dt_remove_prop": [
            "dt_remove_prop",
            "strncmp",
            "ROUND_SIZE",
            "memmove",
            "sizeof"
        ],
        "dt_rename_prop": [
            "dt_rename_prop",
            "strlen",
            "find_prop",
            "memset",
            "memcpy"
        ],
        "dt_seal": [
            "dt_seal"
        ],
        "print_indent": [
            "print_indent",
            "putchar"
        ],
        "print_property": [
            "print_property",
            "printf",
            "printf",
            "printf",
            "putchar"
        ],
        "dump_tree_int": [
            "dump_tree_int",
            "dt_get_node_name",
            "print_indent",
            "printf",
            "print_indent",
            "print_property",
            "dump_tree_int",
            "print_indent",
            "printf"
        ],
        "dt_dump": [
            "dt_dump",
            "dump_tree_int",
            "dt_get_root"
        ],
        "fuzz_main": [
            "fuzz_main",
            "mock_syscfg_add",
            "mock_syscfg_add",
            "mock_syscfg_add",
            "mock_syscfg_add",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "stat",
            "TEST_ASSERT_EQ",
            "fopen",
            "TEST_ASSERT_NOT_NULL",
            "malloc",
            "fread",
            "TEST_ASSERT_EQ",
            "dt_deserialize",
            "dt_get_size",
            "malloc",
            "dt_serialize",
            "free",
            "dt_set_prop",
            "dt_set_prop",
            "dt_set_prop",
            "dt_set_prop",
            "dt_remove_prop",
            "dt_rename_prop",
            "dt_find_node",
            "dt_find_node",
            "dt_find_node",
            "dt_find_node",
            "dt_find_node",
            "dt_get_size",
            "malloc",
            "dt_serialize",
            "free",
            "dt_init",
            "free"
        ],
        "env_blacklist": [
            "env_blacklist"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram"
        ],
        "test_common_serialize": [
            "test_common_serialize",
            "TEST_ASSERT_EQ",
            "dt_get_size",
            "calloc",
            "dt_serialize",
            "TEST_ASSERT_MEM_EQ",
            "free"
        ],
        "test_find_property": [
            "test_find_property",
            "TEST_ASSERT_EQ",
            "FindProperty",
            "TEST_ASSERT_PTR_NEQ",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "FindProperty"
        ],
        "test_devicetree_legacy": [
            "test_devicetree_legacy",
            "dt_init",
            "dt_deserialize",
            "sizeof",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_NOT_NULL",
            "test_find_property",
            "strlen",
            "test_find_property",
            "test_find_property",
            "test_find_property",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_NOT_NULL",
            "test_find_property",
            "strlen",
            "test_find_property",
            "test_find_property",
            "test_find_property",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_NOT_NULL",
            "test_find_property",
            "strlen",
            "test_find_property",
            "test_find_property",
            "TEST_ASSERT_EQ",
            "FindNode",
            "TEST_ASSERT_NOT_NULL",
            "test_find_property",
            "strlen",
            "test_find_property"
        ],
        "test_dt_get_prop": [
            "test_dt_get_prop",
            "TEST_ASSERT_EQ",
            "dt_get_prop",
            "TEST_ASSERT_PTR_NEQ",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "dt_get_prop"
        ],
        "test_dt_deserialize": [
            "test_dt_deserialize",
            "dt_init",
            "dt_deserialize",
            "sizeof",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT_EQ",
            "dt_get_size",
            "sizeof",
            "TEST_ASSERT_PTR_EQ",
            "dt_get_root",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_PTR_EQ",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_NOT_NULL",
            "test_dt_get_prop",
            "strlen",
            "test_dt_get_prop",
            "test_dt_get_prop",
            "test_dt_get_prop",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_NOT_NULL",
            "test_dt_get_prop",
            "strlen",
            "test_dt_get_prop",
            "test_dt_get_prop",
            "test_dt_get_prop",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_NOT_NULL",
            "test_dt_get_prop",
            "strlen",
            "test_dt_get_prop",
            "test_dt_get_prop",
            "TEST_ASSERT_EQ",
            "dt_find_node",
            "TEST_ASSERT_NOT_NULL",
            "test_dt_get_prop",
            "strlen",
            "test_dt_get_prop"
        ],
        "test_dt_serialize": [
            "test_dt_serialize",
            "DT_TESTCASE",
            "test_common_deserialize",
            "test_common_serialize"
        ],
        "test_dt_serialize_too_small": [
            "test_dt_serialize_too_small",
            "DT_TESTCASE",
            "test_common_deserialize",
            "dt_init",
            "calloc",
            "TEST_EXPECT_PANIC",
            "dt_serialize",
            "free",
            "TEST_EXPECT_PANICKED"
        ],
        "test_dt_update": [
            "test_dt_update",
            "DT_TESTCASE",
            "test_common_deserialize",
            "TEST_ASSERT_NOT_NULL",
            "TEST_ASSERT",
            "dt_remove_prop",
            "TEST_ASSERT",
            "dt_remove_prop",
            "TEST_ASSERT",
            "dt_remove_prop",
            "TEST_ASSERT",
            "dt_find_node",
            "dt_set_prop_32",
            "dt_set_prop_64",
            "dt_set_prop_addr",
            "dt_set_prop_str",
            "dt_set_prop",
            "dt_set_prop",
            "dt_set_prop_str",
            "TEST_ASSERT",
            "dt_find_node",
            "TEST_ASSERT",
            "dt_find_node",
            "TEST_ASSERT",
            "dt_get_prop",
            "TEST_ASSERT",
            "dt_rename_prop",
            "TEST_ASSERT",
            "dt_get_prop",
            "TEST_ASSERT",
            "dt_get_prop",
            "test_common_serialize"
        ],
        "test_dt_update_shorter": [
            "test_dt_update_shorter",
            "DT_TESTCASE",
            "test_common_deserialize",
            "TEST_ASSERT_NOT_NULL",
            "dt_set_prop",
            "dt_set_prop",
            "dt_set_prop",
            "dt_set_prop",
            "test_common_serialize"
        ],
        "test_dt_placeholders": [
            "test_dt_placeholders",
            "mock_syscfg_reset",
            "mock_syscfg_add",
            "strlen",
            "mock_syscfg_add",
            "strlen",
            "mock_syscfg_add",
            "env_set",
            "DT_TESTCASE",
            "test_common_deserialize",
            "TEST_ASSERT_NOT_NULL",
            "test_common_serialize"
        ],
        "test_dt_placeholders_zeroes": [
            "test_dt_placeholders_zeroes",
            "DT_TESTCASE",
            "test_common_deserialize",
            "TEST_ASSERT_NOT_NULL",
            "test_common_serialize"
        ],
        "test_common_short": [
            "test_common_short",
            "test_common_deserialize",
            "TEST_ASSERT_NOT_NULL",
            "test_common_serialize",
            "dt_init",
            "dt_deserialize",
            "TEST_ASSERT_NULL"
        ],
        "test_dt_short1": [
            "test_dt_short1",
            "DT_TESTCASE",
            "test_common_short"
        ],
        "test_dt_short2": [
            "test_dt_short2",
            "DT_TESTCASE",
            "test_common_short"
        ],
        "test_dt_short3": [
            "test_dt_short3",
            "DT_TESTCASE",
            "test_common_short"
        ],
        "test_dt_bad_name": [
            "test_dt_bad_name",
            "DT_TESTCASE_FAIL",
            "dt_init",
            "dt_deserialize",
            "TEST_ASSERT_NULL"
        ],
        "dt_load": [
            "dt_load",
            "mib_get_addr",
            "mib_get_size",
            "dt_get_size",
            "image_load_type",
            "dprintf",
            "dt_deserialize",
            "dprintf",
            "security_consolidate_environment"
        ],
        "dt_load_file": [
            "dt_load_file",
            "mib_get_addr",
            "mib_get_size",
            "mib_get_u32",
            "image_load_file",
            "dprintf",
            "dt_init",
            "dt_deserialize",
            "dprintf",
            "security_consolidate_environment"
        ],
        "do_devicetree": [
            "do_devicetree",
            "mib_get_addr",
            "mib_get_addr",
            "mib_get_size",
            "env_get_uint",
            "strcmp",
            "printf",
            "env_get_uint",
            "printf",
            "printf",
            "security_allow_memory",
            "printf",
            "mib_get_u32",
            "image_load_memory",
            "printf",
            "dt_init",
            "dt_deserialize",
            "security_consolidate_environment",
            "printf"
        ]
    },
    "lib/ramdisk": {
        "ramdisk_init": [
            "ramdisk_init"
        ],
        "do_ramdisk": [
            "do_ramdisk",
            "mib_get_addr",
            "env_get_uint",
            "strcmp",
            "printf",
            "env_get_uint",
            "printf",
            "security_allow_memory",
            "printf",
            "mib_get_addr",
            "image_load_memory",
            "printf",
            "security_consolidate_environment",
            "dprintf"
        ],
        "load_ramdisk_file": [
            "load_ramdisk_file",
            "mib_get_bool",
            "mib_get_addr",
            "mib_get_size",
            "image_load_file",
            "dprintf",
            "security_consolidate_environment"
        ],
        "load_ramdisk": [
            "load_ramdisk",
            "mib_get_addr",
            "mib_get_size",
            "image_load_type",
            "dprintf",
            "security_consolidate_environment"
        ]
    },
    "lib/power": {
        "power_get_available_charge_current": [
            "power_get_available_charge_current"
        ],
        "smartport_get_data": [
            "smartport_get_data",
            "iic_read",
            "sizeof"
        ],
        "smartport_get_pwr_in_sel": [
            "smartport_get_pwr_in_sel",
            "smartport_get_data"
        ],
        "power_enable_charging": [
            "power_enable_charging",
            "power_set_charging"
        ],
        "power_set_usb_state": [
            "power_set_usb_state",
            "charger_clear_usb_state",
            "power_set_charging"
        ],
        "power_set_usb_enabled": [
            "power_set_usb_enabled",
            "power",
            "tristar_read_id",
            "host",
            "USB",
            "tristar_enable_acc_pwr",
            "tristar_enable_acc_pwr"
        ],
        "power_init": [
            "power_init",
            "pmu_early_init",
            "power_is_suspended",
            "charger_early_init",
            "power_needs_precharge",
            "present",
            "battery",
            "gauge",
            "trap",
            "likely",
            "indications",
            "range",
            "anyway",
            "power_has_batterypack",
            "power_set_charging",
            "dprintf",
            "charger_read_battery_level",
            "dprintf",
            "dprintf",
            "power_set_charging",
            "MIN_BOOT_BATTERY_VOLTAGE",
            "gasgauge_init",
            "gasgauge_needs_precharge",
            "power_get_nvram",
            "defined",
            "gpio_read",
            "power_determine_power_supply",
            "power_set_charging",
            "power_set_nvram",
            "power_set_nvram",
            "charger_clear_alternate_usb_current_limit",
            "power_get_nvram",
            "power_set_nvram",
            "dprintf",
            "pmu_setup"
        ],
        "power_late_init": [
            "power_late_init",
            "pmu_late_init",
            "gasgauge_late_init"
        ],
        "power_needs_precharge": [
            "power_needs_precharge",
            "power_init",
            "properly",
            "power_determine_power_supply",
            "power_set_charging",
            "power_get_nvram",
            "power_get_nvram",
            "power_get_nvram",
            "printf",
            "power_determine_power_supply",
            "power_set_charging",
            "power_has_batterypack"
        ],
        "power_needs_thermal_trap": [
            "power_needs_thermal_trap",
            "power_get_nvram"
        ],
        "power_cancel_buttonwait": [
            "power_cancel_buttonwait",
            "power_get_nvram",
            "power_set_nvram"
        ],
        "power_get_boot_battery_level": [
            "power_get_boot_battery_level"
        ],
        "power_get_usb_brick_id": [
            "power_get_usb_brick_id"
        ],
        "power_get_battery_level": [
            "power_get_battery_level",
            "gasgauge_read_voltage",
            "charger_read_battery_level"
        ],
        "power_has_batterypack": [
            "power_has_batterypack",
            "charger_has_batterypack"
        ],
        "power_do_chargetrap": [
            "power_do_chargetrap",
            "off",
            "precharge",
            "boot",
            "SKUs",
            "power_needs_precharge",
            "power_get_nvram",
            "charger_precharge",
            "power_cancel_buttonwait",
            "platform_poweroff",
            "power_needs_precharge",
            "charger_precharge",
            "platform_init_display",
            "paint_color_map_enable",
            "paint_set_picture",
            "paint_set_picture_for_tag",
            "paint_set_picture_for_tag",
            "paint_set_picture_for_tag",
            "paint_set_bgcolor",
            "paint_set_picture",
            "paint_update_image",
            "task_sleep",
            "paint_color_map_enable",
            "power_needs_precharge",
            "platform_quiesce_display",
            "printf",
            "power_shutdown",
            "charger_precharge",
            "platform_poweroff",
            "power_set_usb_enabled"
        ],
        "power_suspend": [
            "power_suspend",
            "platform_quiesce_display",
            "miu_suspend",
            "pmu_set_backlight_enable",
            "dprintf",
            "pmu_suspend"
        ],
        "power_shutdown": [
            "power_shutdown",
            "platform_quiesce_display",
            "dprintf",
            "gasgauge_will_shutdown",
            "power_clr_events",
            "pmu_shutdown"
        ],
        "_power_backlight_enable_internal": [
            "_power_backlight_enable_internal",
            "power_needs_precharge",
            "lm3534_backlight_enable",
            "lm3534_backlight_enable",
            "lp8559_backlight_enable",
            "lp8559_backlight_enable",
            "pmu_set_backlight_enable"
        ],
        "power_clear_dark_boot_flag": [
            "power_clear_dark_boot_flag",
            "env_get",
            "env_get_bool",
            "strncmp",
            "boot",
            "env_unset",
            "nvram_save"
        ],
        "power_is_dark_boot": [
            "power_is_dark_boot",
            "env_get_bool"
        ],
        "power_dark_boot_checkpoint": [
            "power_dark_boot_checkpoint",
            "power_is_dark_boot",
            "pmu_check_events",
            "dprintf",
            "power_disable_dark_boot",
            "dprintf"
        ],
        "power_disable_dark_boot": [
            "power_disable_dark_boot",
            "dprintf",
            "_power_backlight_enable_internal"
        ],
        "power_backlight_enable": [
            "power_backlight_enable",
            "dprintf",
            "power_is_dark_boot",
            "dprintf",
            "_power_backlight_enable_internal",
            "_power_backlight_enable_internal",
            "_power_backlight_enable_internal"
        ],
        "power_has_usb": [
            "power_has_usb",
            "charger_has_usb"
        ],
        "power_is_suspended": [
            "power_is_suspended",
            "power_get_boot_flag",
            "power_get_nvram",
            "power_set_nvram"
        ],
        "power_will_resume": [
            "power_will_resume",
            "power_get_nvram",
            "power_set_nvram",
            "pmu_will_resume"
        ],
        "power_get_diags_dock": [
            "power_get_diags_dock",
            "DI",
            "tristar_read_id",
            "power_read_dock_id"
        ]
    },
    "lib/paniclog": {
        "clear_panic_region": [
            "clear_panic_region",
            "mib_get_addr",
            "mib_get_size",
            "memset",
            "defined",
            "archs",
            "platform_cache_operation",
            "platform_cache_operation"
        ],
        "save_panic_log": [
            "save_panic_log",
            "mib_get_addr",
            "mib_get_size",
            "defined",
            "mib_get_bool",
            "crc32",
            "sizeof",
            "nvram_set_panic",
            "clear_panic_region",
            "clear_panic_region",
            "nvram_save",
            "clear_panic_region",
            "defined",
            "mib_get_bool",
            "crc32",
            "sizeof",
            "lookup_blockdev",
            "dprintf",
            "clear_panic_region",
            "blockdev_write",
            "dprintf",
            "clear_panic_region",
            "clear_panic_region"
        ]
    },
    "lib/random": {
        "random_get_bytes": [
            "random_get_bytes",
            "mib_get_u32",
            "random_get_bytes_internal"
        ],
        "random_get_bytes_noheap": [
            "random_get_bytes_noheap",
            "mib_get_u32",
            "random_get_bytes_internal"
        ],
        "random_get_bytes_debug": [
            "random_get_bytes_debug",
            "mib_get_u32",
            "random_get_bytes_internal"
        ]
    },
    "lib/cbuf": {
        "cbuf_destroy": [
            "cbuf_destroy",
            "free",
            "free"
        ],
        "cbuf_write_char": [
            "cbuf_write_char",
            "enter_critical_section",
            "INC_HEAD",
            "event_signal",
            "exit_critical_section"
        ],
        "cbuf_read_char": [
            "cbuf_read_char",
            "enter_critical_section",
            "INC_TAIL",
            "event_unsignal",
            "exit_critical_section"
        ]
    },
    "lib/env": {
        "env_get_uint": [
            "env_get_uint",
            "env_get_etc"
        ],
        "env_get_bool": [
            "env_get_bool",
            "env_get_etc",
            "strcmp"
        ],
        "env_get_ipaddr": [
            "env_get_ipaddr",
            "env_get",
            "str2ip"
        ],
        "env_get_ethaddr": [
            "env_get_ethaddr",
            "env_get",
            "str2mac"
        ],
        "env_set": [
            "env_set",
            "env_blacklist_nvram",
            "find_var_entry",
            "dprintf",
            "dprintf",
            "internally",
            "env_unset",
            "malloc",
            "sizeof",
            "strlcpy",
            "sizeof",
            "strdup",
            "free",
            "strtoul",
            "list_add_tail"
        ],
        "env_set_uint": [
            "env_set_uint",
            "sizeof",
            "snprintf",
            "sizeof",
            "env_set"
        ],
        "env_unset": [
            "env_unset",
            "find_var_entry",
            "list_delete",
            "free",
            "free"
        ],
        "env_serialize": [
            "env_serialize",
            "list_for_every_entry",
            "snprintf"
        ],
        "env_unserialize": [
            "env_unserialize",
            "dprintf",
            "dhexdump",
            "strlcpy",
            "__min",
            "sizeof",
            "strlcpy",
            "__min",
            "sizeof",
            "dprintf",
            "strlen",
            "strlen",
            "env_blacklist_nvram",
            "env_set"
        ],
        "env_reset": [
            "env_reset",
            "list_for_every_entry_safe",
            "env_unset"
        ],
        "do_printenv": [
            "do_printenv",
            "find_var_entry",
            "hide_key",
            "dump_var",
            "printf",
            "list_for_every_entry",
            "hide_key",
            "dump_var"
        ],
        "do_getenv": [
            "do_getenv",
            "printf",
            "find_var_entry",
            "hide_key",
            "env_blacklist",
            "env_set"
        ],
        "do_setenv": [
            "do_setenv",
            "printf",
            "printf",
            "hide_key",
            "env_blacklist",
            "env_unset",
            "malloc",
            "strlcat",
            "strlcat",
            "env_set",
            "free"
        ],
        "do_clearenv": [
            "do_clearenv",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "list_for_every_entry",
            "hide_key",
            "env_unset"
        ],
        "do_envprot": [
            "do_envprot",
            "strcmp",
            "printf",
            "strcmp",
            "printf",
            "printf"
        ],
        "test_env_suite_setup": [
            "test_env_suite_setup",
            "env_reset"
        ],
        "test_env": [
            "test_env",
            "TEST_ASSERT_EQ",
            "env_unserialize",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_bool",
            "TEST_ASSERT_EQ",
            "env_get_uint",
            "TEST_ASSERT_EQ",
            "env_get_uint",
            "TEST_ASSERT_EQ",
            "env_get_ethaddr",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "TEST_ASSERT_NEQ",
            "env_get_ethaddr",
            "TEST_ASSERT_NEQ",
            "env_get_ethaddr",
            "TEST_ASSERT_NEQ",
            "env_get_ethaddr",
            "TEST_ASSERT_EQ",
            "env_get_ipaddr",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_NULL",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_set_uint",
            "TEST_ASSERT_EQ",
            "env_get_uint",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_unset",
            "TEST_ASSERT_NULL",
            "env_get",
            "TEST_ASSERT_EQ",
            "env_unset",
            "malloc",
            "sizeof",
            "TEST_ASSERT_EQ",
            "env_serialize",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "memset",
            "sizeof",
            "TEST_ASSERT_EQ",
            "env_serialize",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "TEST_ASSERT_EQ",
            "env_serialize",
            "sizeof"
        ],
        "test_env_max_len_var": [
            "test_env_max_len_var",
            "env_set",
            "TEST_ASSERT_EQ",
            "env_set",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "malloc",
            "sizeof",
            "env_serialize",
            "sizeof",
            "TEST_ASSERT_EQ",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "sizeof",
            "env_reset",
            "TEST_ASSERT_NULL",
            "env_get",
            "TEST_ASSERT_NULL",
            "env_get",
            "env_unserialize",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "env_get",
            "TEST_ASSERT_STR_EQ",
            "env_get"
        ],
        "env_blacklist": [
            "env_blacklist",
            "strcmp"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram",
            "strcmp"
        ]
    },
    "lib/syscfg": {
        "syscfg_reinit": [
            "syscfg_reinit",
            "free"
        ],
        "do_syscfg": [
            "do_syscfg",
            "printf",
            "sizeof",
            "memcpy",
            "sizeof",
            "printf",
            "syscfgFindByIndex",
            "strcmp",
            "sizeof",
            "sizeof",
            "printf",
            "calloc",
            "memcpy",
            "sizeof",
            "malloc",
            "sizeof",
            "memcpy",
            "printf",
            "printf",
            "printf",
            "printf",
            "free",
            "printf",
            "printf",
            "sizeof",
            "printf",
            "sizeof",
            "printf",
            "printf"
        ],
        "syscfgInitWithBdev": [
            "syscfgInitWithBdev",
            "lookup_blockdev",
            "dprintf",
            "sizeof",
            "dprintf",
            "blockdev_read",
            "sizeof",
            "sizeof",
            "dprintf",
            "dprintf",
            "dprintf",
            "blockdev_set_protection",
            "malloc",
            "blockdev_read",
            "dprintf",
            "fail",
            "syscfg_reinit"
        ],
        "syscfgGetSize": [
            "syscfgGetSize"
        ],
        "syscfgCopyDataForTag": [
            "syscfgCopyDataForTag",
            "syscfgFindByTag",
            "syscfgGetData",
            "memcpy"
        ],
        "syscfgFindByTag": [
            "syscfgFindByTag",
            "syscfgFindByIndex",
            "memcpy",
            "sizeof"
        ],
        "syscfgFindByIndex": [
            "syscfgFindByIndex",
            "sizeof",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "memset",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof"
        ],
        "syscfg_find_tag": [
            "syscfg_find_tag",
            "syscfgFindByTag",
            "syscfgGetData",
            "syscfgGetSize"
        ],
        "test_setup_backing": [
            "test_setup_backing",
            "TEST_ASSERT_NOT_NULL",
            "memset",
            "memcpy"
        ],
        "test_syscfg1": [
            "test_syscfg1",
            "malloc",
            "create_mem_blockdev",
            "TEST_ASSERT_NOT_NULL",
            "register_blockdev",
            "TEST_ASSERT_EQ",
            "syscfgInitWithBdev",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "memset",
            "TEST_ASSERT_EQ",
            "syscfgInitWithBdev",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "test_setup_backing",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgInitWithBdev",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "memset",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "memset",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "memset",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "sizeof",
            "sizeof",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof",
            "memset",
            "sizeof",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "TEST_ASSERT_MEM_EQ",
            "TEST_ARRAY",
            "sizeof"
        ],
        "test_syscfg2": [
            "test_syscfg2",
            "malloc",
            "test_setup_backing",
            "sizeof",
            "create_mem_blockdev",
            "register_blockdev",
            "TEST_ASSERT_EQ",
            "syscfgInitWithBdev"
        ],
        "test_syscfg3": [
            "test_syscfg3",
            "malloc",
            "test_setup_backing",
            "sizeof",
            "create_mem_blockdev",
            "register_blockdev",
            "TEST_ASSERT_EQ",
            "syscfgInitWithBdev",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag",
            "TEST_ASSERT_EQ",
            "syscfgCopyDataForTag"
        ]
    },
    "lib/libc": {
        "memcmp": [
            "memcmp"
        ],
        "memcmp_secure": [
            "memcmp_secure"
        ],
        "strlen": [
            "strlen"
        ],
        "__strlcat_chk": [
            "__strlcat_chk",
            "unlikely",
            "panic",
            "failed",
            "strlcat"
        ],
        "strnicmp": [
            "strnicmp",
            "tolower",
            "tolower"
        ],
        "puts": [
            "puts",
            "enter_critical_section",
            "putchar",
            "exit_critical_section"
        ],
        "getchar": [
            "getchar",
            "debug_getchar"
        ],
        "putchar": [
            "putchar",
            "debug_putchar",
            "debug_putchar"
        ],
        "isalnum": [
            "isalnum",
            "ismask"
        ],
        "isalpha": [
            "isalpha",
            "ismask"
        ],
        "iscntrl": [
            "iscntrl",
            "ismask"
        ],
        "isdigit": [
            "isdigit",
            "ismask"
        ],
        "isgraph": [
            "isgraph",
            "ismask"
        ],
        "islower": [
            "islower",
            "ismask"
        ],
        "isprint": [
            "isprint",
            "ismask"
        ],
        "ispunct": [
            "ispunct",
            "ismask"
        ],
        "isspace": [
            "isspace",
            "ismask"
        ],
        "isupper": [
            "isupper",
            "ismask"
        ],
        "isxdigit": [
            "isxdigit",
            "ismask"
        ],
        "isascii": [
            "isascii"
        ],
        "toascii": [
            "toascii"
        ],
        "swap32": [
            "swap32",
            "volatile"
        ],
        "swap16": [
            "swap16",
            "volatile"
        ],
        "htonl": [
            "htonl",
            "swap32"
        ],
        "ntohl": [
            "ntohl",
            "swap32"
        ],
        "htons": [
            "htons",
            "swap16"
        ],
        "ntohs": [
            "ntohs",
            "swap16"
        ],
        "hexdump": [
            "hexdump",
            "printf",
            "printf",
            "__min",
            "printf",
            "printf"
        ],
        "libc_putchar": [
            "libc_putchar"
        ],
        "test_snprintf": [
            "test_snprintf",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "memset",
            "sizeof",
            "libc_snprintf",
            "sizeof",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ",
            "TEST_ASSERT_STR_EQ",
            "TEST_ASSERT_EQ"
        ],
        "strxfrm": [
            "strxfrm",
            "strlen",
            "memcpy"
        ],
        "system": [
            "system",
            "printf",
            "system"
        ],
        "exit": [
            "exit",
            "panic",
            "exit"
        ],
        "rand": [
            "rand"
        ],
        "srand": [
            "srand"
        ],
        "strlcpy": [
            "strlcpy",
            "strlen",
            "strlen"
        ],
        "strspn": [
            "strspn"
        ],
        "__snprintf_chk": [
            "__snprintf_chk",
            "unlikely",
            "panic",
            "failed",
            "va_start",
            "vsnprintf",
            "va_end"
        ],
        "__vsnprintf_chk": [
            "__vsnprintf_chk",
            "unlikely",
            "panic",
            "failed",
            "vsnprintf"
        ],
        "strcoll": [
            "strcoll",
            "strcmp"
        ],
        "strtol": [
            "strtol",
            "isspace"
        ],
        "strcmp": [
            "strcmp"
        ],
        "__strlcpy_chk": [
            "__strlcpy_chk",
            "unlikely",
            "panic",
            "failed",
            "strlcpy"
        ],
        "strncmp": [
            "strncmp"
        ],
        "strlcat": [
            "strlcat",
            "strnlen",
            "strlen",
            "strlen"
        ],
        "log2_int": [
            "log2_int",
            "__builtin_clz"
        ],
        "strnlen": [
            "strnlen"
        ]
    },
    "lib/libc/arm64": {},
    "apps/iBoot": {
        "mount_and_upgrade_system": [
            "mount_and_upgrade_system",
            "env_get_uint",
            "dprintf",
            "mount_upgrade_partition",
            "dprintf",
            "ticket_load_file",
            "dprintf",
            "image_load_file",
            "dprintf",
            "security_consolidate_environment",
            "security_sidp_seal_boot_manifest",
            "prepare_and_jump",
            "panic",
            "stash_failure_reason",
            "upgrade_fallback_recovery",
            "dprintf",
            "env_unset",
            "nvram_save",
            "platform_system_reset"
        ],
        "boot_upgrade_system": [
            "boot_upgrade_system",
            "upgrade_fallback_recovery",
            "env_unset",
            "nvram_save",
            "env_set",
            "nvram_save",
            "env_get",
            "strlen",
            "strlen",
            "malloc",
            "snprintf",
            "env_set",
            "dprintf",
            "free",
            "mount_upgrade_partition",
            "dprintf",
            "ticket_load_file",
            "dprintf",
            "paint_set_picture_from_file",
            "dt_load_file",
            "dprintf",
            "load_ramdisk_file",
            "dprintf",
            "load_kernelcache_file",
            "load_kernelcache_file",
            "dprintf",
            "env_get_uint",
            "dprintf",
            "dprintf",
            "boot_darwin",
            "panic",
            "fs_unmount",
            "stash_failure_reason",
            "upgrade_fallback_recovery",
            "cleared",
            "dprintf",
            "platform_system_reset"
        ],
        "do_secrom": [
            "do_secrom",
            "printf",
            "defined",
            "prepare_and_jump",
            "prepare_and_jump"
        ],
        "do_suspend": [
            "do_suspend",
            "power_suspend"
        ],
        "do_bztest": [
            "do_bztest",
            "dprintf",
            "system_time",
            "bzero",
            "system_time",
            "dprintf"
        ],
        "do_ssp_test": [
            "do_ssp_test",
            "strlcpy",
            "printf"
        ],
        "fp_test": [
            "fp_test",
            "task_sleep",
            "printf"
        ],
        "fp_test_thread": [
            "fp_test_thread",
            "printf",
            "arch_task_fp_enable",
            "printf",
            "fp_test"
        ],
        "do_fp_test": [
            "do_fp_test",
            "printf",
            "task_yield",
            "printf",
            "task_start",
            "task_create",
            "printf",
            "task_sleep",
            "task_start",
            "task_create",
            "printf"
        ],
        "_main": [
            "_main",
            "PROFILE_INIT",
            "arch_cpu_init",
            "PROFILE_EXIT",
            "main_llb",
            "main_ibss",
            "main_generic"
        ],
        "env_blacklist": [
            "env_blacklist",
            "strcmp"
        ],
        "env_blacklist_nvram": [
            "env_blacklist_nvram",
            "strlen",
            "strcmp"
        ],
        "print_boot_banner": [
            "print_boot_banner",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "platform_get_usb_serial_number_string",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "application_putchar": [
            "application_putchar",
            "enter_critical_section",
            "exit_critical_section"
        ],
        "display_physical_memory_regions": [
            "display_physical_memory_regions",
            "printf",
            "ARRAY_SIZE",
            "platform_get_memory_region_base_optional",
            "platform_get_memory_region_size_optional",
            "printf"
        ],
        "do_saveenv": [
            "do_saveenv",
            "nvram_save",
            "dprintf"
        ],
        "find_boot_images": [
            "find_boot_images",
            "PROFILE_ENTER",
            "sizeof",
            "sizeof",
            "lookup_blockdev",
            "image_search_bdev",
            "sizeof",
            "sizeof",
            "lookup_blockdev",
            "syscfgInitWithBdev",
            "image_dump_list",
            "PROFILE_EXIT"
        ],
        "boot_check_stage": [
            "boot_check_stage",
            "power_is_suspended",
            "power_needs_precharge",
            "power_get_nvram",
            "power_set_nvram",
            "power_get_nvram",
            "power_set_nvram",
            "power_cancel_buttonwait"
        ],
        "boot_set_stage": [
            "boot_set_stage",
            "power_is_suspended",
            "power_needs_precharge",
            "power_set_nvram"
        ],
        "boot_clear_error_count": [
            "boot_clear_error_count",
            "power_set_nvram"
        ],
        "boot_error_count": [
            "boot_error_count",
            "power_get_nvram"
        ],
        "boot_check_panic": [
            "boot_check_panic",
            "power_get_nvram",
            "platform_watchdog_tickle",
            "power_set_nvram",
            "boot_set_stage",
            "platform_init_mass_storage_panic",
            "save_panic_log",
            "dprintf",
            "platform_system_reset",
            "dprintf",
            "clear_panic_region"
        ],
        "boot_iboot": [
            "boot_iboot",
            "boot_flash"
        ],
        "boot_dali_flash": [
            "boot_dali_flash",
            "PROFILE_ENTER",
            "image_load_type",
            "dprintf",
            "PROFILE_EXIT",
            "target_prepare_dali",
            "security_consolidate_environment",
            "dprintf",
            "prepare_and_jump"
        ],
        "do_daliboot": [],
        "boot_diagnostics": [
            "boot_diagnostics",
            "boot_flash",
            "boot_diagnostics_fs"
        ],
        "do_diagboot": [],
        "boot_darwin": [
            "boot_darwin",
            "consistent_debug_update_ap_cpr",
            "effaceable_consume_nonce",
            "clear_panic_region",
            "prepare_and_jump"
        ],
        "do_bootx": [
            "do_bootx",
            "PROFILE_ENTER",
            "strcmp",
            "printf",
            "security_allow_memory",
            "printf",
            "printf",
            "load_kernelcache",
            "printf",
            "dprintf",
            "printf",
            "PROFILE_EXIT",
            "boot_darwin"
        ],
        "do_memboot": [
            "do_memboot",
            "env_get_uint",
            "strcmp",
            "printf",
            "env_get_uint",
            "printf",
            "printf",
            "security_allow_memory",
            "printf",
            "create_mem_blockdev",
            "image_search_bdev",
            "image_dump_list",
            "ticket_load",
            "dprintf",
            "load_ramdisk",
            "printf",
            "dprintf",
            "image_find",
            "printf",
            "load_kernelcache_image",
            "printf",
            "dprintf",
            "printf",
            "boot_darwin",
            "image_free_bdev",
            "free"
        ],
        "mount_bootfs": [
            "mount_bootfs",
            "env_get",
            "dprintf",
            "snprintf",
            "env_get_uint",
            "mount_bootfs_from_device"
        ],
        "mount_bootfs_from_device": [
            "mount_bootfs_from_device",
            "lookup_blockdev",
            "dprintf",
            "platform_record_breadcrumb",
            "fs_get_fsname",
            "dprintf",
            "platform_record_breadcrumb",
            "dprintf",
            "fs_mount",
            "platform_record_breadcrumb_int",
            "dprintf"
        ],
        "mount_and_boot_system": [
            "mount_and_boot_system",
            "malloc",
            "env_get",
            "dprintf",
            "PROFILE_ENTER",
            "mount_bootfs",
            "dprintf",
            "PROFILE_EXIT",
            "env_get",
            "snprintf",
            "load_ramdisk_file",
            "dprintf",
            "snprintf",
            "PROFILE_ENTER",
            "load_kernelcache_file",
            "dprintf",
            "PROFILE_ENTER",
            "dprintf",
            "boot_darwin",
            "panic",
            "free",
            "fs_unmount"
        ],
        "sys_setup_default_environment": [
            "sys_setup_default_environment",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set_uint",
            "env_set_uint",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "env_set",
            "target_config_dev",
            "env_set",
            "platform_setup_default_environment"
        ],
        "sys_load_environment": [
            "sys_load_environment",
            "nvram_load",
            "dprintf"
        ]
    },
    "apps/EmbeddedIOP": {
        "SetClockState": [
            "SetClockState"
        ],
        "GetAudioClockDivider": [
            "GetAudioClockDivider"
        ],
        "SetAudioClockDivider": [
            "SetAudioClockDivider",
            "rPMGR_CLK_CFG_DIVIDER"
        ],
        "GetACLKDivider": [
            "GetACLKDivider"
        ],
        "SetACLKDivider": [
            "SetACLKDivider",
            "AE2_ACLK_CFG_DIVIDER"
        ],
        "ConfirmClocksValid": [
            "ConfirmClocksValid",
            "GetAudioClockDivider",
            "GetACLKDivider",
            "dprintf"
        ],
        "SetClocksLow": [
            "SetClocksLow",
            "GetAudioClockDivider",
            "SetAudioClockDivider",
            "SetACLKDivider"
        ],
        "SetClocksHigh": [
            "SetClocksHigh",
            "GetAudioClockDivider",
            "SetAudioClockDivider",
            "SetACLKDivider"
        ],
        "do_memdump": [
            "do_memdump",
            "strcmp",
            "strcmp",
            "printf",
            "puts",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "printf",
            "puts"
        ],
        "do_memwrite": [
            "do_memwrite",
            "printf",
            "printf",
            "strcmp",
            "strcmp",
            "strcmp",
            "strlen",
            "printf",
            "strlcpy"
        ],
        "do_panic": [
            "do_panic",
            "panic"
        ],
        "do_hang": [
            "do_hang"
        ],
        "_main": [
            "_main",
            "printf",
            "dprintf",
            "dprintf",
            "arch_cpu_init",
            "dprintf",
            "platform_early_init",
            "services",
            "dprintf",
            "sys_init",
            "dprintf",
            "heap_add_chunk",
            "platform_init_iop_doorbell",
            "task_start",
            "task_create",
            "task_yield",
            "LINKER_SET_FOREACH",
            "dprintf",
            "task_start",
            "task_create",
            "dprintf",
            "task_start",
            "task_create",
            "task_start",
            "task_create",
            "SetParticipateInClockStateManagement",
            "task_set_idle_threshold",
            "platform_init_nmi",
            "dprintf",
            "task_exit"
        ],
        "application_putchar": [
            "application_putchar",
            "cb_initialized",
            "cb_free_space",
            "task_yield",
            "endif",
            "cb_putc",
            "event_signal"
        ],
        "iop_message_trace": [
            "iop_message_trace",
            "timer_get_ticks",
            "iop_message_alloc",
            "sizeof",
            "mem_static_map_physical",
            "platform_cache_operation",
            "qwi_send_item",
            "QWI_ENCODE_ORDINAL"
        ],
        "SetParticipateInClockStateManagement": [
            "SetParticipateInClockStateManagement"
        ],
        "ParticipateInClockStateManagement": [
            "ParticipateInClockStateManagement"
        ],
        "qwi_instantiate_channel": [
            "qwi_instantiate_channel",
            "qwi_enter_critical",
            "QWC_WORKITEM",
            "qwi_cache_store_line",
            "dprintf",
            "sizeof",
            "dprintf",
            "sizeof",
            "qwi_exit_critical"
        ],
        "qwi_send_item": [
            "qwi_send_item",
            "qwi_enter_critical",
            "QWC_WORKITEM",
            "QWI_CONTROL",
            "QWC_ADVANCE",
            "qwi_cache_store_line",
            "QWC_STAT_INCR",
            "qwi_exit_critical",
            "qwi_ring_doorbell",
            "qwi_exit_critical"
        ],
        "qwi_receive_item": [
            "qwi_receive_item",
            "qwi_enter_critical",
            "QWC_WORKITEM",
            "qwi_cache_invalidate_line",
            "QWI_ITEM_TEST_OWNER",
            "QWI_ITEM_ADDRESS",
            "QWC_ADVANCE",
            "QWC_STAT_INCR",
            "qwi_exit_critical",
            "qwi_exit_critical"
        ],
        "qwi_peek_item": [
            "qwi_peek_item",
            "qwi_enter_critical",
            "QWC_WORKITEM",
            "qwi_cache_invalidate_line",
            "QWI_ITEM_TEST_OWNER",
            "QWI_ITEM_ADDRESS",
            "qwi_exit_critical",
            "qwi_exit_critical"
        ],
        "qwi_next_send_index": [
            "qwi_next_send_index",
            "qwi_enter_critical",
            "qwi_exit_critical"
        ],
        "qwi_doorbell": [
            "qwi_doorbell",
            "qwi_enter_critical",
            "qwi_exit_critical",
            "qwi_peek_item",
            "qwc_user_hook"
        ]
    },
    "apps/EmbeddedIOP/function_audiodsp": {
        "create_debug_tap": [
            "create_debug_tap",
            "malloc",
            "sizeof"
        ],
        "destroy_debug_tap": [
            "destroy_debug_tap",
            "free"
        ],
        "send_to_tap": [
            "send_to_tap",
            "min",
            "memcpy",
            "clean_cache",
            "memcpy",
            "clean_cache"
        ],
        "get_from_tap": [
            "get_from_tap",
            "min",
            "invalidate_cache",
            "memcpy",
            "invalidate_cache",
            "memcpy"
        ],
        "create_loopback_process": [
            "create_loopback_process",
            "malloc",
            "sizeof"
        ],
        "destroy_loopback_process": [
            "destroy_loopback_process",
            "free"
        ],
        "set_debug_tap": [
            "set_debug_tap"
        ],
        "set_tap_point": [
            "set_tap_point"
        ],
        "process_data": [
            "process_data",
            "send_to_tap",
            "get_from_tap",
            "AudioUnit_Process",
            "send_to_tap",
            "get_from_tap",
            "timer_get_ticks",
            "send_timestamp"
        ],
        "set_timestamper_message_buffer": [
            "set_timestamper_message_buffer"
        ],
        "send_timestamp": [
            "send_timestamp",
            "get_timestamper_message",
            "dprintf",
            "platform_cache_operation",
            "sizeof",
            "qwi_send_item",
            "QWI_ENCODE_ORDINAL",
            "dprintf"
        ],
        "readReg": [
            "readReg"
        ],
        "writeReg": [
            "writeReg"
        ],
        "readMCA0Reg": [
            "readMCA0Reg",
            "readReg"
        ],
        "writeMCA0Reg": [
            "writeMCA0Reg",
            "writeReg"
        ],
        "startPIO": [
            "startPIO",
            "system_time",
            "readMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "writeMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "readMCA0Reg",
            "system_time",
            "readMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "system_time",
            "IRQ",
            "readMCA0Reg",
            "writeMCA0Reg",
            "writeMCA0Reg",
            "writeMCA0Reg"
        ],
        "stopPIO": [
            "stopPIO",
            "readMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "writeMCA0Reg"
        ],
        "handleAudioDeviceInterrupt": [
            "handleAudioDeviceInterrupt",
            "enter_critical_section",
            "arm_call_fpsaved",
            "exit_critical_section"
        ],
        "create_loopback_device": [
            "create_loopback_device",
            "dprintf",
            "dprintf",
            "malloc",
            "sizeof",
            "install_int_handler"
        ],
        "destroy_loopback_device": [
            "destroy_loopback_device",
            "stop_loopback_device",
            "free"
        ],
        "getErrorCount": [
            "getErrorCount"
        ],
        "start_loopback_device": [
            "start_loopback_device",
            "startPIO",
            "unmask_int"
        ],
        "stop_loopback_device": [
            "stop_loopback_device",
            "mask_int",
            "stopPIO"
        ],
        "mallocFromSRAM": [
            "mallocFromSRAM",
            "allocation",
            "panic",
            "memset"
        ],
        "initialize_dma_buffers": [
            "initialize_dma_buffers",
            "mallocFromSRAM",
            "sizeof",
            "mallocFromSRAM",
            "sizeof",
            "mallocFromSRAM"
        ],
        "reset_dma_buffers": [
            "reset_dma_buffers",
            "memset"
        ],
        "Create_Loopback_AU": [
            "Create_Loopback_AU",
            "dprintf",
            "Create_AUSidetone",
            "Create_AUNull",
            "AudioUnit_GetPropertyInfo",
            "dprintf",
            "AudioUnit_SetProperty",
            "dprintf",
            "Destroy_AudioUnit",
            "Create_AUSidetone",
            "Create_AUNull"
        ],
        "Destroy_Loopback_AU": [
            "Destroy_Loopback_AU",
            "AudioUnit_GetPropertyInfo",
            "free",
            "malloc",
            "dprintf",
            "AudioUnit_GetProperty",
            "dprintf",
            "free",
            "Destroy_AudioUnit"
        ],
        "Destroy_Loopback_Processing": [
            "Destroy_Loopback_Processing",
            "destroy_loopback_process",
            "Destroy_Loopback_AU"
        ],
        "Create_Loopback_Processing": [
            "Create_Loopback_Processing",
            "Destroy_Loopback_Processing",
            "dprintf",
            "Create_Loopback_AU",
            "dprintf",
            "dprintf",
            "create_loopback_process",
            "dprintf",
            "dprintf",
            "heap_get_free_mem"
        ],
        "Stop_Loopback_Processing": [
            "Stop_Loopback_Processing",
            "expected",
            "getErrorCount",
            "getErrorCount",
            "dprintf",
            "dprintf",
            "destroy_dma_object",
            "destroy_dma_object",
            "dprintf",
            "expected",
            "getErrorCount",
            "dprintf",
            "dprintf",
            "destroy_loopback_device",
            "dprintf",
            "SetClockState"
        ],
        "Start_Loopback_Processing": [
            "Start_Loopback_Processing",
            "dprintf",
            "Start_Loopback_Processing",
            "Stop_Loopback_Processing",
            "dprintf",
            "dprintf",
            "SetClockState",
            "Create_Loopback_Processing",
            "dprintf",
            "initialize_dma_buffers",
            "reset_dma_buffers",
            "destroy_dma_object",
            "create_dma_object",
            "destroy_dma_object",
            "create_dma_object",
            "setupInterruptHandler",
            "setupErrorHandler",
            "setupErrorHandler",
            "startDMAObject",
            "startDMAObject",
            "dprintf",
            "Destroy_Loopback_AU",
            "dprintf",
            "Create_Loopback_AU",
            "dprintf",
            "destroy_loopback_device",
            "create_loopback_device",
            "start_loopback_device",
            "dprintf"
        ],
        "Check_Parameter_Message_Valid": [
            "Check_Parameter_Message_Valid",
            "dprintf",
            "dprintf"
        ],
        "Check_Property_Message_Valid": [
            "Check_Property_Message_Valid",
            "Check_Parameter_Message_Valid",
            "sizeof",
            "dprintf"
        ],
        "Handle_OPCODE_GET_PARAMETER": [
            "Handle_OPCODE_GET_PARAMETER",
            "Check_Parameter_Message_Valid",
            "parameters",
            "AudioUnit_GetParameter",
            "dprintf",
            "parameter"
        ],
        "Handle_OPCODE_SET_PARAMETER": [
            "Handle_OPCODE_SET_PARAMETER",
            "Check_Parameter_Message_Valid",
            "parameters",
            "AudioUnit_SetParameter",
            "dprintf",
            "parameter"
        ],
        "Handle_OPCODE_GET_PROPERTY": [
            "Handle_OPCODE_GET_PROPERTY",
            "Check_Property_Message_Valid",
            "sizeof",
            "AudioUnit_GetProperty",
            "dprintf",
            "property"
        ],
        "Handle_OPCODE_SET_PROPERTY": [
            "Handle_OPCODE_SET_PROPERTY",
            "Check_Property_Message_Valid",
            "parameters",
            "AudioUnit_SetProperty",
            "dprintf",
            "parameter"
        ]
    },
    "apps/EmbeddedIOP/function_audiodsp/AudioUnits": {},
    "apps/EmbeddedIOP/function_audiodsp/AE2_DMA": {
        "readReg": [
            "readReg"
        ],
        "writeReg": [
            "writeReg"
        ],
        "readDMAReg": [
            "readDMAReg",
            "readReg"
        ],
        "writeDMAReg": [
            "writeDMAReg",
            "writeReg"
        ],
        "readDMAChannelReg": [
            "readDMAChannelReg",
            "readReg"
        ],
        "writeDMAChannelReg": [
            "writeDMAChannelReg",
            "writeReg"
        ],
        "create_dma_object": [
            "create_dma_object",
            "dprintf",
            "dprintf",
            "malloc",
            "sizeof",
            "acquireDMAChannel",
            "dprintf",
            "free",
            "configureDMA",
            "setupDMA",
            "setupDMA",
            "install_int_handler",
            "install_int_handler"
        ],
        "destroy_dma_object": [
            "destroy_dma_object",
            "stopDMAObject",
            "freeDMAChannel",
            "free"
        ],
        "getErrorCount": [
            "getErrorCount"
        ],
        "setupInterruptHandler": [
            "setupInterruptHandler"
        ],
        "setupErrorHandler": [
            "setupErrorHandler"
        ],
        "startDMAObject": [
            "startDMAObject",
            "startDMA",
            "unmask_int",
            "unmask_int"
        ],
        "stopDMAObject": [
            "stopDMAObject",
            "disableDMAImmediate",
            "disableDMA",
            "mask_int",
            "mask_int"
        ],
        "handleAudioDeviceDMAInterrupt": [
            "handleAudioDeviceDMAInterrupt",
            "readDMAReg",
            "writeDMAReg",
            "mInterruptHandler"
        ],
        "handleAudioDeviceDMAInterruptError": [
            "handleAudioDeviceDMAInterruptError",
            "readDMAReg",
            "writeDMAReg",
            "mInterruptHandler"
        ],
        "acquireDMAChannel": [
            "acquireDMAChannel",
            "writeReg",
            "writeDMAReg"
        ],
        "freeDMAChannel": [
            "freeDMAChannel",
            "readDMAReg",
            "writeDMAReg"
        ],
        "configureDMA": [
            "configureDMA",
            "validDMAChannel",
            "writeDMAChannelReg"
        ],
        "setupDMA": [
            "setupDMA",
            "validDMAChannel",
            "readDMAChannelReg",
            "writeDMAChannelReg",
            "writeDMAChannelReg",
            "writeDMAChannelReg",
            "writeDMAChannelReg",
            "writeDMAChannelReg"
        ],
        "startDMA": [
            "startDMA",
            "validDMAChannel",
            "readDMAChannelReg",
            "writeDMAChannelReg"
        ],
        "disableDMA": [
            "disableDMA",
            "validDMAChannel",
            "readDMAChannelReg",
            "writeDMAChannelReg",
            "readDMAChannelReg",
            "readDMAChannelReg",
            "disableDMAImmediate"
        ],
        "disableDMAImmediate": [
            "disableDMAImmediate",
            "validDMAChannel",
            "readDMAChannelReg",
            "writeDMAChannelReg",
            "writeDMAReg",
            "writeDMAReg"
        ],
        "readMCA0Reg": [
            "readMCA0Reg",
            "readReg"
        ],
        "writeMCA0Reg": [
            "writeMCA0Reg",
            "writeReg"
        ],
        "receivePIOData": [
            "receivePIOData",
            "sizeof",
            "sizeof",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof"
        ],
        "transmitPIOData": [
            "transmitPIOData",
            "memcpy",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof"
        ],
        "setupNextLLI": [
            "setupNextLLI"
        ],
        "handleAudioDeviceInterrupt": [
            "handleAudioDeviceInterrupt",
            "readMCA0Reg",
            "writeMCA0Reg",
            "receivePIOData",
            "setupNextLLI",
            "mInterruptHandler",
            "transmitPIOData",
            "setupNextLLI",
            "mInterruptHandler"
        ],
        "setupPIO": [
            "setupPIO"
        ],
        "startPIO": [
            "startPIO",
            "readMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "writeMCA0Reg"
        ],
        "stopPIO": [
            "stopPIO",
            "readMCA0Reg",
            "writeMCA0Reg",
            "readMCA0Reg",
            "writeMCA0Reg"
        ]
    },
    "apps/EmbeddedIOP/function_audiodsp/AE2_MCA": {},
    "apps/EmbeddedIOP/function_audiodsp/AE2_I2S": {},
    "apps/EmbeddedIOP/function_fmi": {},
    "apps/EmbeddedIOP/function_audio": {
        "PerformanceSnapShotReset": [
            "PerformanceSnapShotReset",
            "memset",
            "sizeof"
        ],
        "PerformanceSnapShotStart": [
            "PerformanceSnapShotStart",
            "system_time",
            "arm_read_pmreg"
        ],
        "PerformanceSnapShotEnd": [
            "PerformanceSnapShotEnd",
            "system_time",
            "arm_read_pmreg"
        ],
        "SetupProfiling": [
            "SetupProfiling",
            "PerformanceSnapShotReset",
            "reset_stack_usage",
            "heap_reset_peak_mem",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "arm_write_pmreg",
            "system_time",
            "arm_read_pmreg"
        ],
        "EndProfiling": [
            "EndProfiling",
            "arm_write_pmreg",
            "system_time",
            "arm_write_pmreg",
            "arm_read_pmreg",
            "arm_write_pmreg",
            "arm_read_pmreg",
            "arm_read_pmreg",
            "arm_read_pmreg",
            "dprintf",
            "heap_get_free_mem",
            "heap_get_peak_mem",
            "get_stack_usage"
        ]
    },
    "apps/EmbeddedIOP/function_ceata": {
        "iop_ceata_task": [
            "iop_ceata_task",
            "dprintf",
            "check",
            "sizeof",
            "event_init",
            "dprintf",
            "qwi_instantiate_channel",
            "mem_static_map_cached",
            "dprintf",
            "ceata_message_process",
            "event_wait"
        ]
    },
    "apps/EmbeddedIOP/function_sdio": {
        "iopsdio_init": [
            "iopsdio_init",
            "check",
            "check",
            "malloc",
            "sizeof",
            "event_init"
        ],
        "iopsdio_free": [
            "iopsdio_free",
            "check",
            "check",
            "free"
        ],
        "iopsdio_reset": [
            "iopsdio_reset",
            "check",
            "check",
            "sdiodrv_resetSDHC",
            "sdhc_enableCommandStatus",
            "sdhc_enableTransferStatus"
        ],
        "iopsdio_setBusConfig": [
            "iopsdio_setBusConfig",
            "check",
            "check",
            "sdiodrv_setClockRate",
            "sdiodrv_setBusWidth",
            "sdiodrv_setBusSpeedMode",
            "sdiodrv_setClockMode"
        ],
        "iopsdio_sendSDIOCmd": [
            "iopsdio_sendSDIOCmd",
            "check",
            "check",
            "sdiodrv_sendSDIOCommand"
        ],
        "iopsdio_read_packet": [
            "iopsdio_read_packet",
            "mem_static_map_cached",
            "platform_cache_operation",
            "dprintf",
            "sdiodrv_transferData",
            "mem_static_map_cached",
            "platform_cache_operation",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "sdiodrv_transferData",
            "platform_cache_operation",
            "sdiodrv_transferData"
        ],
        "iopsdio_cacheTransferSDIOData": [
            "iopsdio_cacheTransferSDIOData",
            "mem_static_map_cached",
            "iopsdio_read_packet",
            "dprintf",
            "platform_cache_operation"
        ],
        "iopsdio_transferSDIOData": [
            "iopsdio_transferSDIOData",
            "check",
            "check",
            "mem_static_map_cached",
            "platform_cache_operation",
            "dprintf",
            "dprintf",
            "mem_static_map_cached",
            "platform_cache_operation",
            "dprintf",
            "sdiodrv_transferData",
            "platform_cache_operation",
            "dprintf",
            "dprintf",
            "dprintf",
            "iopsdio_read_packet",
            "dprintf",
            "dprintf",
            "dprintf",
            "platform_cache_operation",
            "cache_op_size",
            "dprintf",
            "dprintf",
            "iopsdio_cacheTransferSDIOData",
            "dprintf",
            "dprintf",
            "sdiodrv_transferData",
            "dprintf",
            "platform_cache_operation"
        ]
    },
    "apps/SecureROM": {
        "_main": [
            "_main",
            "arch_cpu_init",
            "dprintf",
            "dprintf",
            "platform_init_setup_clocks",
            "memory",
            "dprintf",
            "platform_init_internal_mem",
            "dprintf",
            "platform_init_hwpins",
            "platform_get_force_dfu",
            "platform_get_request_dfu1",
            "platform_get_request_dfu2",
            "services",
            "sys_init",
            "sys_init_stack_cookie",
            "dprintf",
            "platform_early_init",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "platform_init",
            "dprintf",
            "platform_get_usb_cable_connected",
            "dprintf",
            "platform_get_usb_cable_connected",
            "system_time",
            "platform_get_request_dfu1",
            "platform_get_request_dfu2",
            "platform_get_usb_cable_connected",
            "time_has_elapsed",
            "task_sleep",
            "system_time",
            "platform_get_request_dfu1",
            "platform_get_request_dfu2",
            "platform_get_usb_cable_connected",
            "time_has_elapsed",
            "task_sleep",
            "dprintf",
            "platform_get_boot_device",
            "boot_selected",
            "dprintf",
            "platform_reset"
        ]
    },
    "apps/SecureROM/tests/blinky_armv8": {
        "start": [
            "start"
        ]
    },
    "apps/SecureROM/tests/blinky_armv7": {
        "start": [
            "start"
        ]
    },
    "platform/s5l8950x": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "platform_power_init",
            "platform_init_boot_strap",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "flash_nand_id",
            "mcu_late_init",
            "mcu_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "display_pmu_init",
            "platform_quiesce_display",
            "clock_gate",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "flash_nand_init",
            "hdc_init"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "clock_gate",
            "display_quiesce",
            "clock_gate",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "paint_color_map_is_invalid",
            "panic",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "security_get_production_override",
            "chipid_clear_production_mode",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "zero",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "platform_init_mainmem_map"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "nand_boot_init",
            "target_init",
            "effaceable_nor_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "fillNandConfigProperties",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required",
            "chipid_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_ram_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_soc_voltage"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_ram_voltages": [
            "platform_get_ram_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_ram_voltage"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_get_production_mode": [
            "platform_get_production_mode"
        ],
        "platform_get_secure_mode": [
            "platform_get_secure_mode"
        ],
        "platform_reset": [
            "platform_reset"
        ],
        "platform_halt": [
            "platform_halt",
            "arch_halt"
        ],
        "platform_deep_idle": [
            "platform_deep_idle",
            "a5iop_sleep"
        ],
        "platform_sleep": [
            "platform_sleep",
            "a5iop_sleep"
        ],
        "platform_cache_operation": [
            "platform_cache_operation",
            "a5iop_cache_operation"
        ],
        "platform_mask_doorbell": [
            "platform_mask_doorbell",
            "mask_int"
        ],
        "platform_unmask_doorbell": [
            "platform_unmask_doorbell",
            "unmask_int"
        ],
        "platform_ring_host_doorbell": [
            "platform_ring_host_doorbell",
            "interrupt_generate_ipc"
        ],
        "clock_gate": [
            "clock_gate"
        ]
    },
    "platform/s5l8950x/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "miu_select_remap",
            "miu_select_remap"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap",
            "miu_read_l2cadrmap",
            "miu_write_l2cadrmap",
            "miu_read_l2cadrmap",
            "miu_write_l2cadrmap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep",
            "mcu_bypass_prep",
            "mcu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "small",
            "memcpy",
            "sizeof"
        ]
    },
    "platform/s5l8950x/pmgr": {
        "platform_power_init": [
            "platform_power_init",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "clock_reset_device",
            "init_thermal_sensors"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "get_pll",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "clocks_quiesce_internal",
            "time",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "platform_get_cpu_voltages",
            "platform_get_ram_voltages",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "platform_convert_voltages",
            "platform_convert_voltages",
            "sizeof",
            "sizeof",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "Configuration",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "chipid_get_cpu_temp_offset",
            "chipid_get_cpu_temp_offset",
            "PMGR_VOLMAN_CPU_SW_OFF_TIME_VALUE",
            "dwi_init",
            "dwi_init",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "get_pll",
            "frequencies",
            "get_pll",
            "update_perf_state",
            "clocks_get_frequencies"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "update_perf_state"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency"
        ],
        "clock_gate": [
            "clock_gate"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "gpio_configure_out"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "FindProperty",
            "sizeof",
            "panic",
            "state",
            "PGMR_GET_PERF_STATE_INDEX",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "voltage"
        ],
        "init_thermal_sensors": [
            "init_thermal_sensors",
            "chipid_get_fuse_revision",
            "chipid_get_fused_thermal_sensor_70C",
            "chipid_get_fused_thermal_sensor_25C",
            "dprintf",
            "dprintf"
        ]
    },
    "platform/s5l8950x/chipid": {
        "chipid_get_production_mode": [
            "chipid_get_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_ecid_image_personalization_required": [
            "chipid_get_ecid_image_personalization_required"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "chipid_get_binning_revision",
            "chipid_get_base_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "chipid_get_binning_revision",
            "rDVFM_FUSE",
            "rDVFM_FUSE",
            "chipid_get_base_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ],
        "chipid_get_cpu_temp_offset": [
            "chipid_get_cpu_temp_offset",
            "rDVFM_FUSE",
            "rDVFM_FUSE"
        ],
        "chipid_get_fused_thermal_sensor_70C": [
            "chipid_get_fused_thermal_sensor_70C"
        ],
        "chipid_get_fused_thermal_sensor_25C": [
            "chipid_get_fused_thermal_sensor_25C"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision"
        ]
    },
    "platform/s5l8950x/include/platform": {},
    "platform/s5l8950x/include/platform/soc": {},
    "platform/s5l8950x/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "amc_configure_default_address_decoding_and_mapping"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "spin",
            "amc_phy_scale_dll",
            "spin",
            "spin",
            "amc_phy_scale_dll"
        ],
        "amc_finalize": [
            "amc_finalize",
            "amc_mrcmd",
            "amc_enable_autorefresh"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset",
            "amc_get_memory_device_info"
        ]
    },
    "platform/t7000": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "t7001_ram_repair_init",
            "ccc_enable_custom_errors",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "platform_late_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "platform_get_chip_revision",
            "platform_not_supported",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "clock_gate",
            "env_get_bool",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "mcu_late_init",
            "mcu_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "display_pmu_init",
            "platform_quiesce_display",
            "clock_gate",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "platform_get_boot_from_nvme",
            "asp_nand_open",
            "platform_get_boot_from_nvme",
            "nvme_init_mass_storage"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "nvme_quiesce_all",
            "thunderboot_quiesce_and_free",
            "apcie_disable_all",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "clock_gate",
            "display_quiesce",
            "clock_gate",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "paint_color_map_is_invalid",
            "panic",
            "platform_quiesce_display",
            "wdt_enable",
            "paint_color_map_is_invalid",
            "panic",
            "platform_bootprep_darwin",
            "wdt_enable",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "platform_relocate_securerom",
            "miu_select_remap",
            "platform_cache_operation",
            "platform_quiesce_display",
            "security_get_lock_fuses",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys",
            "ccc_disable_custom_errors"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "DRAM",
            "arm_mmu_map_range",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw"
        ],
        "platform_init": [
            "platform_init",
            "defined",
            "bzero",
            "platform_enable_error_handler",
            "consistent_debug_init",
            "spi_init",
            "pci_init",
            "platform_get_boot_from_nvme",
            "anc_firmware_init",
            "csi_init",
            "asp_init",
            "apcie_use_external_refclk",
            "apcie_set_s3e_mode",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "apcie_enable_link",
            "thunderboot_init",
            "apcie_get_port_bridge",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "nvme_quiesce_all",
            "apcie_disable_all",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_setup_default_environment": [
            "platform_setup_default_environment",
            "platform_get_boot_from_nvme",
            "env_set",
            "env_set",
            "target_setup_default_environment"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "pmgr_gfx_update_device_tree",
            "chipid_get_fuse_revision",
            "FindProperty",
            "FindProperty",
            "strlcpy",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "sochot_pmgr_update_device_tree",
            "FindNode",
            "apcie_update_devicetree",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "usbphy_update_device_tree",
            "platform_get_boot_from_nvme",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "strlcpy",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_lock_fuses_required": [
            "platform_get_lock_fuses_required",
            "chipid_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "panic",
            "apcie_use_external_refclk",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "nvme_quiesce",
            "apcie_disable_link",
            "apcie_use_external_refclk",
            "apcie_enable_link",
            "thunderboot_init",
            "apcie_get_port_bridge",
            "thunderboot_quiesce_and_free",
            "apcie_disable_link",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_sep_nonce": [
            "platform_get_sep_nonce",
            "sep_client_get_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_spi_frequency": [
            "platform_get_spi_frequency",
            "platform_get_boot_config"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "aes_ap_disable_keys",
            "aes_ap_disable_keys",
            "anc_disable_uid_key",
            "anc_disable_uid_key"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_restore_system": [
            "platform_restore_system",
            "consistent_debug_resume",
            "power_will_resume",
            "dprintf",
            "platform_bootprep_darwin",
            "platform_get_boot_from_nvme",
            "bzero",
            "dprintf",
            "vector",
            "dprintf",
            "prepare_and_jump",
            "panic"
        ],
        "platform_asynchronous_exception": [
            "platform_asynchronous_exception",
            "ccc_handle_asynchronous_exception"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value_fpga",
            "power_get_buck_value"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "chipid_get_soc_voltage"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_region_size"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_display_memory_size"
        ],
        "do_sleep_token_test": [
            "do_sleep_token_test",
            "security_create_sleep_token",
            "dprintf",
            "security_validate_sleep_token",
            "dprintf",
            "dprintf"
        ],
        "platform_get_pcie_l1ss_ltr_threshold": [
            "platform_get_pcie_l1ss_ltr_threshold"
        ],
        "platform_get_pcie_l1ss_t_common_mode": [
            "platform_get_pcie_l1ss_t_common_mode"
        ],
        "platform_get_gpu_voltages": [
            "platform_get_gpu_voltages",
            "chipid_get_gpu_voltage"
        ],
        "platform_get_gpu_ram_voltages": [
            "platform_get_gpu_ram_voltages",
            "chipid_get_gpu_ram_voltage"
        ],
        "platform_get_ram_voltages": [
            "platform_get_ram_voltages",
            "chipid_get_ram_voltage"
        ],
        "platform_get_dwi_to_mv": [
            "platform_get_dwi_to_mv",
            "power_convert_dwi_to_mv_fpga",
            "power_convert_dwi_to_mv"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_ram_voltage"
        ],
        "t7001_ram_repair_init": [
            "t7001_ram_repair_init",
            "panic",
            "panic"
        ]
    },
    "platform/t7000/error_handler": {
        "platform_enable_error_handler": [
            "platform_enable_error_handler",
            "enable_amc_checks",
            "enable_cp_checks"
        ]
    },
    "platform/t7000/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "miu_configure_bridge",
            "ausb_setup_widgets"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "chipid_get_fpga_block_instantiation",
            "FindNode",
            "ARRAY_SIZE",
            "FindProperty",
            "dprintf"
        ]
    },
    "platform/t7000/apcie": {
        "apcie_use_external_refclk": [
            "apcie_use_external_refclk"
        ],
        "apcie_set_s3e_mode": [
            "apcie_set_s3e_mode"
        ],
        "apcie_enable_link": [
            "apcie_enable_link",
            "apcie_enable_root_complex",
            "gpio_configure",
            "gpio_configure",
            "dprintf",
            "system_time",
            "gpio_read",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "dprintf",
            "gpio_configure",
            "apcie_enable_link_hardware",
            "rAPCIE_CONFIG_INBCTRL",
            "rAPCIE_CONFIG_OUTBCTRL",
            "rAPCIE_CONFIG_PMETOACK_TMOTLIM",
            "spin",
            "gpio_configure",
            "rAPCIE_PCIE_CAP_LINK_CONTROL2",
            "rAPCIE_PCIE_CAP_LINK_CONTROL2",
            "platform_get_pcie_link_width",
            "rAPCIE_PORT_LOGIC_GEN2_CTRL",
            "rAPCIE_PORT_LOGIC_GEN2_CTRL",
            "rAPCIE_PORT_LOGIC_PORT_LINK_CTRL",
            "rAPCIE_PORT_LOGIC_PORT_LINK_CTRL",
            "rAPCIE_COUNTER_COMMAND",
            "rAPCIE_CONFIG_LINKCFG",
            "system_time",
            "rAPCIE_CONFIG_LINKSTS",
            "time_has_elapsed",
            "dprintf",
            "dprintf",
            "rAPCIE_CONFIG_LINKSTS",
            "rAPCIE_CONFIG_LINKPMGRSTS",
            "dprintf",
            "spin",
            "dart_init",
            "apcie_setup_root_port_bridge",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex"
        ],
        "apcie_disable_link": [
            "apcie_disable_link",
            "dprintf",
            "rAPCIE_COUNTER_COMMAND",
            "rAPCIE_CONFIG_PMETO",
            "system_time",
            "rAPCIE_CONFIG_PMETO",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "system_time",
            "rAPCIE_CONFIG_LINKSTS",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "dart_assert_unmapped",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex",
            "apcie_free_port_bridge"
        ],
        "apcie_get_link_enable_count": [
            "apcie_get_link_enable_count"
        ],
        "apcie_update_devicetree": [
            "apcie_update_devicetree",
            "FindProperty",
            "sizeof",
            "panic",
            "memcpy",
            "sizeof"
        ],
        "platform_register_pci_busses": [
            "platform_register_pci_busses",
            "apcie_init"
        ],
        "platform_map_host_to_pci_addr": [
            "platform_map_host_to_pci_addr"
        ],
        "platform_map_pci_to_host_addr": [
            "platform_map_pci_to_host_addr"
        ]
    },
    "platform/t7000/pmgr": {
        "platform_power_spin": [
            "platform_power_spin",
            "arm_no_wfe_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "pmgr_check_gpu_use650MHz_unbinned": [
            "pmgr_check_gpu_use650MHz_unbinned",
            "chipid_get_fuse_revision"
        ],
        "pmgr_check_gpu_use650MHz_binned": [
            "pmgr_check_gpu_use650MHz_binned",
            "chipid_get_fuse_revision"
        ],
        "pmgr_check_gpu_use600MHz_unbinned": [
            "pmgr_check_gpu_use600MHz_unbinned"
        ],
        "pmgr_check_gpu_use600MHz_binned": [
            "pmgr_check_gpu_use600MHz_binned"
        ],
        "pmgr_update_gfx_states": [
            "pmgr_update_gfx_states",
            "sizeof",
            "sizeof",
            "pmgr_check_gpu_use650MHz_binned",
            "pmgr_check_gpu_use650MHz_unbinned",
            "pmgr_check_gpu_use600MHz_binned",
            "pmgr_check_gpu_use600MHz_unbinned",
            "chipid_get_fuse_revision",
            "chipid_get_chip_id",
            "set_gfx_perf_state",
            "dprintf",
            "pmgr_check_gpu_use650MHz_binned",
            "pmgr_check_gpu_use650MHz_unbinned",
            "pmgr_check_gpu_use600MHz_binned",
            "pmgr_check_gpu_use600MHz_unbinned"
        ],
        "pmgr_update_dvfm": [
            "pmgr_update_dvfm",
            "pmgr_check_use1512MHz",
            "pmgr_check_use1608MHz_binned",
            "pmgr_check_use1608MHz_unbinned",
            "dprintf",
            "chipid_get_fuse_revision",
            "pmgr_get_dvfm_data",
            "rCCC_DVFM_ST",
            "rCCC_DVFM_ST",
            "chipid_get_cpu_voltage",
            "platform_convert_voltages",
            "chipid_get_vol_adj",
            "CCC_DVFM_ST_VOLADJ0",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ1",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ2",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ3",
            "pmgr_get_offset_from_diff_uV",
            "rCCC_DVFM_ST",
            "CCC_DVFM_ST_SAFEVOL",
            "chipid_get_ram_voltage",
            "platform_convert_voltages",
            "CCC_DVFM_SRAM_STATE",
            "CCC_DVFM_SRAM_STATE"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rCCC_DVFM_ST",
            "clocks_quiesce_internal",
            "rCCC_DVFM_ST",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "rPMGR_SOC_PERF_STATE_ENTRY_B",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "rPMGR_SOC_PERF_STATE_ENTRY_D",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "platform_get_ram_voltages",
            "platform_convert_voltages",
            "chipid_get_vol_adj",
            "CCC_DVFM_ST_VOLADJ0",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ1",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ2",
            "pmgr_get_offset_from_diff_uV",
            "CCC_DVFM_ST_VOLADJ3",
            "pmgr_get_offset_from_diff_uV",
            "rCCC_DVFM_ST",
            "CCC_DVFM_ST_SAFEVOL",
            "CCC_DVFM_SRAM_STATE",
            "CCC_DVFM_SRAM_STATE",
            "rCCC_DVFM_ST",
            "CCC_DVFM_ST_SAFEVOL",
            "rCCC_DVFM_ST",
            "rCCC_DVFM_ST",
            "CCC_DVFM_SRAM_STATE",
            "CCC_DVFM_CFG_TEMPTHRESH0",
            "CCC_DVFM_CFG_TEMPTHRESH1",
            "CCC_DVFM_CFG_TEMPOFFSET0",
            "CCC_DVFM_CFG_TEMPOFFSET1",
            "CCC_DVFM_CFG1_TEMPTHRESH2",
            "CCC_DVFM_CFG1_TEMPOFFSET2",
            "chipid_get_vol_adj",
            "PMGR_SOC_PERF_STATE_VOL_ADJ0",
            "pmgr_get_offset_from_diff_uV",
            "PMGR_SOC_PERF_STATE_VOL_ADJ1",
            "pmgr_get_offset_from_diff_uV",
            "PMGR_SOC_PERF_STATE_VOL_ADJ2",
            "pmgr_get_offset_from_diff_uV",
            "PMGR_SOC_PERF_STATE_VOL_ADJ3",
            "pmgr_get_offset_from_diff_uV",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "rPMGR_SOC_PERF_STATE_ENTRY_B",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "rPMGR_SOC_PERF_STATE_ENTRY_D",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "rPMGR_SOC_PERF_STATE_ENTRY_B",
            "rPMGR_SOC_PERF_STATE_ENTRY_B",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "rPMGR_SOC_PERF_STATE_ENTRY_D",
            "rPMGR_SOC_PERF_STATE_ENTRY_D",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "rPMGR_SOC_PERF_STATE_ENTRY_C",
            "dwi_init",
            "dwi_init",
            "set_apsc_ccc_state",
            "platform_get_gpu_voltages",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "platform_convert_voltages",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "platform_get_gpu_ram_voltages",
            "sizeof",
            "sizeof",
            "platform_convert_voltages",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "set_gfx_perf_state",
            "sizeof",
            "sizeof",
            "set_gfx_perf_state",
            "rPMGR_PLL_CTL",
            "rPMGR_PLL_EXT_BYPASS_CTL",
            "rPMGR_PLL_CFG",
            "PMU",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "rPMGR_PLL_ANA_PARAMS0",
            "rPMGR_PLL_ANA_PARAMS0",
            "set_pll",
            "set_pll",
            "set_nco_clocks",
            "power_on_sep",
            "clocks_get_frequencies",
            "apply_pmgr_tunables",
            "apply_ccc_tunables"
        ],
        "dump_clock_frequencies": [
            "dump_clock_frequencies",
            "dprintf"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "get_apsc_ccc_state",
            "set_apsc_ccc_state",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency",
            "is_pll_running",
            "set_pll",
            "set_running_pll",
            "get_pll",
            "clocks_get_frequencies_range",
            "clock_update_frequency",
            "clocks_get_frequencies_range"
        ],
        "clock_gate": [
            "clock_gate"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init",
            "init_soc_thermal_sensors",
            "init_cpu_thermal_sensors",
            "init_soc_sochot",
            "init_cpu_sochot",
            "init_soc_tvm_tunables"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin",
            "spin",
            "rLPDP_PLL_CLK"
        ],
        "clock_set_device_reset": [
            "clock_set_device_reset",
            "spin"
        ],
        "clock_get_pcie_refclk_good": [
            "clock_get_pcie_refclk_good"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "pmgr_get_dvfm_data",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_ccc_state",
            "rCCC_DVFM_ST",
            "panic",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_ccc_state",
            "rCCC_DVFM_ST",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_ccc_state",
            "rCCC_DVFM_ST",
            "platform_get_dwi_to_mv",
            "CCC_DVFM_ST_TO_SAFEVOL",
            "rCCC_DVFM_ST",
            "FindProperty",
            "sizeof",
            "chipid_get_total_rails_leakage"
        ],
        "pmgr_gfx_update_device_tree": [
            "pmgr_gfx_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "rPMGR_GFX_PERF_STATE_ENTRY",
            "rPMGR_GFX_PERF_STATE_ENTRY",
            "PMGR_PLL_FREQ",
            "platform_get_dwi_to_mv",
            "FindProperty",
            "FindProperty"
        ],
        "sochot_pmgr_update_device_tree": [
            "sochot_pmgr_update_device_tree",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof"
        ]
    },
    "platform/t7000/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_pid": [
            "chipid_get_pid"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_soc_bin_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_cpu_bin_voltage",
            "chipid_get_fuse_revision",
            "chipid_get_cpu_bin_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_sram_bin_voltage"
        ],
        "chipid_get_gpu_ram_voltage": [
            "chipid_get_gpu_ram_voltage",
            "panic",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_gpu_sram_bin_voltage"
        ],
        "chipid_get_gpu_voltage": [
            "chipid_get_gpu_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_fuse_revision",
            "chipid_get_gpu_bin_voltage",
            "chipid_get_gpu_bin_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock",
            "asm",
            "panic"
        ],
        "chipid_get_soc_temp_sensor_trim": [
            "chipid_get_soc_temp_sensor_trim",
            "CFG_FUSE2_THERMAL_SEN"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision",
            "chipid_get_bin_type"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ],
        "chipid_get_fpga_block_instantiation": [
            "chipid_get_fpga_block_instantiation",
            "panic",
            "panic"
        ],
        "chipid_get_vol_adj": [
            "chipid_get_vol_adj",
            "chipid_get_chip_id",
            "chipid_get_chip_revision",
            "chipid_get_fuse_revision",
            "sizeof",
            "sizeof",
            "panic",
            "sizeof",
            "sizeof",
            "panic",
            "panic"
        ]
    },
    "platform/t7000/include/platform": {},
    "platform/t7000/include/platform/soc": {},
    "platform/t7000/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "initialized",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH",
            "amc_get_params"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "amc_finalize": [
            "amc_finalize",
            "platform_memory_barrier"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd"
        ]
    },
    "platform/s5l8955x": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "dwi_init",
            "dwi_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "flash_nand_id",
            "mcu_late_init",
            "mcu_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "platform_quiesce_display",
            "clock_gate",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "flash_nand_init",
            "hdc_init"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "clock_gate",
            "display_quiesce",
            "clock_gate",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "security_get_production_override",
            "chipid_clear_production_mode",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "zero",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "platform_init_mainmem_map"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "nand_boot_init",
            "target_init",
            "effaceable_nor_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "fillNandConfigProperties",
            "FindNode",
            "usbphy_update_device_tree",
            "platform_get_chip_revision",
            "FindNode",
            "FindProperty",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required",
            "chipid_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_ram_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_soc_voltage"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_ram_voltages": [
            "platform_get_ram_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_ram_voltage"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_get_production_mode": [
            "platform_get_production_mode"
        ],
        "platform_get_secure_mode": [
            "platform_get_secure_mode"
        ],
        "platform_reset": [
            "platform_reset"
        ],
        "platform_halt": [
            "platform_halt",
            "arch_halt"
        ],
        "platform_deep_idle": [
            "platform_deep_idle",
            "a5iop_sleep"
        ],
        "platform_sleep": [
            "platform_sleep",
            "a5iop_sleep"
        ],
        "platform_cache_operation": [
            "platform_cache_operation",
            "reentrance",
            "enter_critical_section",
            "a5iop_cache_operation",
            "exit_critical_section"
        ],
        "platform_mask_doorbell": [
            "platform_mask_doorbell",
            "mask_int"
        ],
        "platform_unmask_doorbell": [
            "platform_unmask_doorbell",
            "unmask_int"
        ],
        "platform_ring_host_doorbell": [
            "platform_ring_host_doorbell",
            "interrupt_generate_ipc"
        ],
        "clock_gate": [
            "clock_gate"
        ]
    },
    "platform/s5l8955x/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "miu_select_remap",
            "miu_select_remap"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap",
            "miu_read_l2cadrmap",
            "miu_write_l2cadrmap",
            "miu_read_l2cadrmap",
            "miu_write_l2cadrmap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep",
            "mcu_bypass_prep",
            "mcu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "small",
            "memcpy",
            "sizeof"
        ]
    },
    "platform/s5l8955x/pmgr": {
        "platform_power_init": [
            "platform_power_init",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "clock_reset_device",
            "init_thermal_sensors"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "get_pll",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "clocks_quiesce_internal",
            "time",
            "rPMGR_PLL_PARAM",
            "PMGR_PARAM_LOCK_TIME",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "platform_get_cpu_voltages",
            "platform_get_ram_voltages",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "platform_convert_voltages",
            "platform_convert_voltages",
            "sizeof",
            "sizeof",
            "rPMGR_DVFM_CFG0",
            "rPMGR_DVFM_CFG1",
            "Configuration",
            "rPMGR_DVFM_CFG2",
            "rPMGR_DVFM_CFG3",
            "rPMGR_DVFM_CFG4",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_D",
            "rPMGR_PERF_STATE_E",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "get_pll",
            "frequencies",
            "get_pll",
            "update_perf_state",
            "wait_for_pending_clk_cfg_change",
            "clocks_get_frequencies",
            "chipid_get_cpu_temp_offset",
            "chipid_get_cpu_temp_offset",
            "PMGR_VOLMAN_CPU_SW_OFF_TIME_VALUE"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "update_perf_state"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency"
        ],
        "clock_gate": [
            "clock_gate",
            "wait_for_dev_ps_change"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "gpio_configure_out"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "FindProperty",
            "sizeof",
            "panic",
            "state",
            "PGMR_GET_PERF_STATE_INDEX",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "FindProperty",
            "sizeof",
            "platform_get_cpu_voltages",
            "voltage"
        ],
        "init_thermal_sensors": [
            "init_thermal_sensors",
            "chipid_get_fuse_revision",
            "chipid_get_fused_thermal_sensor_70C",
            "chipid_get_fused_thermal_sensor_25C",
            "dprintf",
            "dprintf"
        ]
    },
    "platform/s5l8955x/chipid": {
        "chipid_get_production_mode": [
            "chipid_get_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_ecid_image_personalization_required": [
            "chipid_get_ecid_image_personalization_required"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "chipid_get_binning_revision",
            "chipid_get_base_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "chipid_get_binning_revision",
            "rDVFM_FUSE",
            "rDVFM_FUSE",
            "chipid_get_base_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ],
        "chipid_get_cpu_temp_offset": [
            "chipid_get_cpu_temp_offset",
            "rDVFM_FUSE",
            "rDVFM_FUSE"
        ],
        "chipid_get_fused_thermal_sensor_70C": [
            "chipid_get_fused_thermal_sensor_70C"
        ],
        "chipid_get_fused_thermal_sensor_25C": [
            "chipid_get_fused_thermal_sensor_25C"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision"
        ]
    },
    "platform/s5l8955x/include/platform": {},
    "platform/s5l8955x/include/platform/soc": {},
    "platform/s5l8955x/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "amc_configure_default_address_decoding_and_mapping"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "spin",
            "amc_phy_scale_dll",
            "spin",
            "spin",
            "amc_phy_scale_dll"
        ],
        "amc_finalize": [
            "amc_finalize",
            "amc_mrcmd",
            "amc_enable_autorefresh"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "PDL_M",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset",
            "amc_get_memory_device_info"
        ]
    },
    "platform/generic": {
        "target_is_tethered": [
            "target_is_tethered",
            "syscfgCopyDataForTag",
            "env_get_uint"
        ],
        "target_init_boot_manifest": [
            "target_init_boot_manifest",
            "image4_register_property_capture_callbacks"
        ],
        "target_pass_boot_manifest": [
            "target_pass_boot_manifest",
            "panic",
            "target_pass_boot_manifest",
            "target_init_boot_manifest",
            "FindNode",
            "image4_copy_boolean_properties",
            "image4_copy_integer_properties",
            "image4_copy_string_properties",
            "dprintf",
            "FindNode",
            "image4_copy_boolean_properties",
            "image4_copy_integer_properties",
            "image4_copy_string_properties",
            "dprintf"
        ],
        "_platform_init_breadcrumbs_internal": [
            "_platform_init_breadcrumbs_internal",
            "malloc",
            "dprintf",
            "platform_record_breadcrumb_marker"
        ],
        "_platform_record_breadcrumb_internal": [
            "_platform_record_breadcrumb_internal",
            "bc_remaining",
            "snprintf",
            "bc_cur_pos",
            "bc_remaining",
            "strlen",
            "bc_cur_pos"
        ],
        "_platform_record_breadcrumb_marker_internal": [
            "_platform_record_breadcrumb_marker_internal",
            "bc_remaining",
            "snprintf",
            "bc_cur_pos",
            "bc_remaining",
            "strlen",
            "bc_cur_pos"
        ],
        "_platform_record_breadcrumb_int_internal": [
            "_platform_record_breadcrumb_int_internal",
            "bc_remaining",
            "snprintf",
            "bc_cur_pos",
            "bc_remaining",
            "strlen",
            "bc_cur_pos"
        ],
        "_platform_commit_breadcrumbs_internal": [
            "_platform_commit_breadcrumbs_internal",
            "platform_record_breadcrumb_marker",
            "snprintf",
            "env_get",
            "dprintf",
            "bc_remaining",
            "strlen",
            "strlen",
            "bc_remaining",
            "malloc",
            "snprintf",
            "free",
            "dprintf",
            "env_set",
            "nvram_save"
        ],
        "target_config_ap": [
            "target_config_ap",
            "platform_get_board_id"
        ],
        "target_config_dev": [
            "target_config_dev",
            "platform_get_board_id"
        ],
        "platform_cache_operation": [
            "platform_cache_operation",
            "void",
            "unlikely",
            "arm_clean_dcache",
            "enter_critical_section",
            "arm_clean_dcache",
            "arm_clean_invalidate_dcache",
            "likely",
            "func",
            "arm_drain_write_buffer",
            "defined",
            "arm_memory_barrier",
            "exit_critical_section"
        ],
        "platform_memory_barrier": [
            "platform_memory_barrier",
            "arm_memory_barrier"
        ],
        "platform_get_iboot_flags": [
            "platform_get_iboot_flags",
            "platform_get_secure_mode",
            "platform_get_current_production_mode"
        ],
        "platform_get_security_epoch": [
            "platform_get_security_epoch",
            "chipid_get_minimum_epoch",
            "chipid_get_minimum_epoch"
        ],
        "platform_get_usb_product_id": [
            "platform_get_usb_product_id",
            "platform_get_security_domain"
        ],
        "platform_consume_nonce": [
            "platform_consume_nonce",
            "effaceable_consume_nonce",
            "mobile_ap_nonce_consume_nonce",
            "random_get_bytes",
            "sizeof",
            "RELEASE_ASSERT",
            "dprintf",
            "nonce"
        ],
        "platform_get_display_memory_size": [
            "platform_get_display_memory_size",
            "memset",
            "sizeof",
            "display_get_info"
        ],
        "platform_not_supported": [
            "platform_not_supported",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf"
        ],
        "platform_get_fuse_modes": [
            "platform_get_fuse_modes",
            "platform_get_secure_mode",
            "platform_get_raw_production_mode"
        ],
        "platform_get_memory_region_base": [
            "platform_get_memory_region_base",
            "platform_get_memory_region_base_optional",
            "panic"
        ],
        "platform_get_memory_region_size": [
            "platform_get_memory_region_size",
            "platform_get_memory_region_size_optional",
            "panic"
        ],
        "platform_apply_tunables": [
            "platform_apply_tunables",
            "platform_get_chip_revision",
            "dprintf",
            "revision",
            "sizeof",
            "dprintf",
            "dprintf",
            "sizeof",
            "dprintf",
            "dprintf",
            "panic"
        ]
    },
    "platform/generic/pmgr": {
        "pmgr_binning_menu_update_states": [
            "pmgr_binning_menu_update_states",
            "pmgr_binning_menu_override_get_voltage_indexes",
            "sizeof",
            "sizeof",
            "pmgr_platform_set_perf_state",
            "pmgr_binning_menu_override_get_voltage_indexes",
            "sizeof",
            "sizeof",
            "pmgr_platform_set_perf_state"
        ],
        "pmgr_binning_from_config_data": [
            "pmgr_binning_from_config_data",
            "pmgr_binning_get_group",
            "pmgr_binning_get_revision"
        ],
        "pmgr_binning_get_voltage_offset": [
            "pmgr_binning_get_voltage_offset",
            "platform_get_board_id",
            "platform_get_chip_revision",
            "pmgr_binning_get_group",
            "pmgr_binning_get_revision"
        ],
        "pmgr_binning_mode_get_value": [
            "pmgr_binning_mode_get_value",
            "pmgr_binning_get_group",
            "panic",
            "low",
            "high",
            "pmgr_binning_read"
        ],
        "pmgr_binning_get_base": [
            "pmgr_binning_get_base",
            "pmgr_binning_mode_get_value"
        ],
        "pmgr_binning_get_group": [
            "pmgr_binning_get_group",
            "pmgr_binning_mode_get_value"
        ],
        "pmgr_binning_get_revision": [
            "pmgr_binning_get_revision",
            "pmgr_binning_mode_get_value"
        ],
        "pmgr_binning_mode_get_mv": [
            "pmgr_binning_mode_get_mv",
            "pmgr_binning_mode_get_value",
            "pmgr_binning_get_base"
        ],
        "pmgr_binning_get_mv": [
            "pmgr_binning_get_mv",
            "pmgr_binning_from_const_data",
            "pmgr_binning_from_config_data",
            "pmgr_binning_mode_get_mv",
            "pmgr_binning_get_voltage_offset",
            "panic"
        ]
    },
    "platform/t8002": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "chipid_get_current_production_mode",
            "chipid_get_fuse_seal",
            "panic",
            "platform_power_init",
            "consistent_debug_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "dockchannel_uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "LLB",
            "dockchannel_access_enable",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "platform_quiesce_display",
            "display_init",
            "env_get_uint",
            "debug_enable_uarts",
            "env_get_uint",
            "display_set_rotation"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "asp_nand_open"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "display_quiesce"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "platform_bootprep_darwin",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "miu_select_remap",
            "panic",
            "platform_quiesce_display",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "csi_init",
            "asp_init",
            "anc_firmware_init",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "platform_get_base_soc_voltage"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_sep_nonce": [
            "platform_get_sep_nonce",
            "sep_client_get_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_spi_frequency": [
            "platform_get_spi_frequency",
            "platform_get_boot_config"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_get_request_dfu1": [
            "platform_get_request_dfu1",
            "gpio_read"
        ],
        "platform_get_request_dfu2": [
            "platform_get_request_dfu2",
            "gpio_read"
        ],
        "platform_get_dock_connect": [
            "platform_get_dock_connect",
            "gpio_read"
        ],
        "platform_set_dock_attention": [
            "platform_set_dock_attention",
            "gpio_write"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "dprintf"
        ],
        "platform_keys_disabled": [
            "platform_keys_disabled",
            "dprintf"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_is_pre_lpddr4": [
            "platform_is_pre_lpddr4"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info_with_revids": [
            "platform_set_memory_info_with_revids"
        ],
        "platform_get_memory_rev_ids": [
            "platform_get_memory_rev_ids",
            "panic"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_clear_mem_with_dma": [
            "platform_clear_mem_with_dma",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_SRC_BURST_SIZE_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_DST_BURST_SIZE_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_SRC_XFER_WIDTH_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_DST_XFER_WIDTH_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_SRC_MST_SEL_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_DST_MST_SEL_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_SRC_INCR_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_DST_INCR_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_PROTECTION_INSRT",
            "platform_cache_operation",
            "AOP_PL080_BLK_DMAC_CONFIGURATION_DMAC_ENABLE_INSRT",
            "AOP_PL080_BLK_DMAC_INTTCCLEAR_INT_TC_CLEAR_INSRT",
            "AOP_PL080_BLK_DMAC_INTERRCLR_INT_ERR_CLR_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONTROL_XFER_SIZE_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONFIGURATION_CHANNEL_ENABLE_INSRT",
            "AOP_PL080_BLK_DMAC_C0_CONFIGURATION_ACTIVE_XTRCT",
            "arm_clean_invalidate_dcache"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base"
        ]
    },
    "platform/t8002/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree"
        ]
    },
    "platform/t8002/dcs": {
        "dcs_enable_autorefresh": [
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ"
        ],
        "dcs_init_Prolog": [
            "dcs_init_Prolog",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us"
        ],
        "dcs_init_AMC_Initial_Config": [
            "dcs_init_AMC_Initial_Config",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGTIM_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_PHYRDWRTIM_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_CASPCH_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_ACT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_SELFREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_TAT_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write",
            "rAMC_AIUADDRBANKHASH",
            "dcs_reg_write",
            "rAMC_AIUADDRBANKHASH",
            "dcs_reg_write",
            "rAMC_AIUADDRBANKHASH",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_AMP_Initial_Config": [
            "dcs_init_AMP_Initial_Config",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPEN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLLOCKTIM",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "dcs_reg_write_all_chan",
            "rDCS_AMPCA_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLCODE_CAP_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLCODE_CAP_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWRDWRDQCALTIMINGCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWRDWRDQCALTIMINGCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLEN",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_SPARE",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPINIT",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Self_Refresh_Exit_a": [
            "dcs_init_Self_Refresh_Exit_a",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_spin",
            "dcs_reg_poll"
        ],
        "dcs_init_Self_Refresh_Exit_b": [
            "dcs_init_Self_Refresh_Exit_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_enable_autorefresh",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write"
        ],
        "dcs_init_ZQ_Cal_Cfg": [
            "dcs_init_ZQ_Cal_Cfg",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_mrcmd",
            "dcs_spin",
            "register",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_REG_READ_CH",
            "DCS_REG_READ_CH",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd"
        ],
        "dcs_init_AddrCfg_Cfg": [
            "dcs_init_AddrCfg_Cfg",
            "dcs_reg_write"
        ],
        "dcs_init_TotalSize_Cfg": [
            "dcs_init_TotalSize_Cfg",
            "dbgprintf",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_Reenable_AMC_Scheduler": [
            "dcs_init_Reenable_AMC_Scheduler",
            "dcs_spin",
            "Enable",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_CA_Cal_Setup_Freq1": [
            "dcs_init_CA_Cal_Setup_Freq1",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_CA_Cal_Freq1": [
            "dcs_init_CA_Cal_Freq1"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_a": [
            "dcs_init_DQ_Cal_Setup_Freq1_a",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_DEFER_EN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLOVRRD"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_b": [
            "dcs_init_DQ_Cal_Setup_Freq1_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_wrdq_skew": [
            "dcs_init_wrdq_skew",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL"
        ],
        "dcs_init_post_wrlvl": [
            "dcs_init_post_wrlvl",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL"
        ],
        "dcs_init_CA_Cal_Setup_Freq0": [
            "dcs_init_CA_Cal_Setup_Freq0",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_a": [
            "dcs_init_DQ_Cal_Setup_Freq0_a",
            "dcs_mrcmd",
            "dcs_spin"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_b": [
            "dcs_init_DQ_Cal_Setup_Freq0_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_Reg_for_Boot": [
            "dcs_init_Reg_for_Boot",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_SPARE",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQSDLL_DLYSEL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQSDLL_DLYSEL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL"
        ],
        "dcs_init_MoreFeatures": [
            "dcs_init_MoreFeatures",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Fast_Critical_Word_Forwarding": [
            "dcs_init_Fast_Critical_Word_Forwarding",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Gating_Global_Timers": [
            "dcs_init_Gating_Global_Timers",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_SPLLCTRL_MDLLPWRDNCFG",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll",
            "dcs_reg_write",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_ODTS": [
            "dcs_init_ODTS",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "initialized",
            "DCS_REG_READ_CH",
            "clock_gate",
            "dcs_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "dcs_get_memory_size"
        ],
        "dcs_enable_slow_boot": [
            "dcs_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "dcs_dram_workarounds": [
            "dcs_dram_workarounds"
        ],
        "dcs_init_config_params": [
            "dcs_init_config_params",
            "memcpy",
            "sizeof",
            "dcs_init_config_fixup_params"
        ],
        "dcs_restore_calibration_results": [
            "dcs_restore_calibration_results"
        ]
    },
    "platform/t8002/pmgr": {
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "clock_gate": [
            "clock_gate",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX",
            "PMGR_PS_MANUAL_PS_INSRT",
            "PMGR_PS_MANUAL_PS_INSRT",
            "PMGR_PS_MANUAL_PS_XTRCT",
            "PMGR_PS_ACTUAL_PS_XTRCT"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "enable_bira_work_around",
            "clocks_quiesce_internal",
            "apply_tunables",
            "config_soc_perf_state",
            "config_soc_perf_state",
            "set_lppll",
            "set_pll",
            "set_pll",
            "set_nco_clocks",
            "set_soc_perf_state",
            "sizeof",
            "sizeof",
            "set_clkcfg",
            "sizeof",
            "sizeof",
            "set_clkcfg",
            "power_on_sep",
            "clocks_get_frequencies"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "set_soc_perf_state",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency",
            "clock_update_frequency",
            "clocks_get_frequencies_range"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX",
            "PMGR_PS_RESET_INSRT",
            "spin",
            "PMGR_PS_RESET_INSRT"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin",
            "aic_spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree"
        ]
    },
    "platform/t8002/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "mode",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURE_MODE_XTRCT"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURITY_DOMAIN_XTRCT"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id",
            "MINIPMGR_FUSE_CFG_FUSE0_BID_XTRCT"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch",
            "MINIPMGR_FUSE_CFG_FUSE0_MINIMUM_EPOCH_XTRCT"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision",
            "MINIPMGR_FUSE_CFG_FUSE4_DEV_VERSION_XTRCT"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_XTRCT"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_INSRT",
            "asm",
            "chipid_get_fuse_lock",
            "panic"
        ],
        "chipid_get_fuse_seal": [
            "chipid_get_fuse_seal",
            "MINIPMGR_FUSE_CFG_FUSE1_SEAL_FUSES_XTRCT"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision",
            "MINIPMGR_FUSE_CFG_FUSE4_REV_XTRCT"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ]
    },
    "platform/t8002/include/platform": {},
    "platform/t8002/include/platform/soc": {},
    "platform/t8002/include/platform/soc/spds": {},
    "platform/defaults": {
        "FUNCTION": [
            "FUNCTION"
        ],
        "target_get_property": [
            "target_get_property",
            "target_get_property_base"
        ],
        "target_get_precharge_gg_flag_mask": [
            "target_get_precharge_gg_flag_mask"
        ],
        "target_get_property_base": [
            "target_get_property_base",
            "syscfgCopyDataForTag"
        ],
        "platform_get_spi_frequency": [
            "platform_get_spi_frequency"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_size",
            "defined",
            "platform_get_memory_size",
            "platform_get_memory_region_size",
            "defined"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "defined",
            "platform_get_display_memory_size",
            "defined",
            "defined",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode",
            "chipid_get_current_production_mode",
            "chipid_get_minimum_epoch"
        ],
        "platform_restore_system": [
            "platform_restore_system",
            "power_will_resume",
            "dprintf",
            "security_validate_sleep_token",
            "dprintf",
            "prepare_and_jump",
            "panic"
        ],
        "target_get_boot_battery_capacity": [
            "target_get_boot_battery_capacity"
        ]
    },
    "platform/s5l8940x": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "platform_get_chip_id",
            "platform_get_chip_revision",
            "platform_not_supported",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "flash_nand_id",
            "mcu_late_init",
            "mcu_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "platform_quiesce_display",
            "clock_gate",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "flash_nand_init"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "clock_gate",
            "display_quiesce",
            "clock_gate",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "security_get_production_override",
            "chipid_clear_production_mode",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "zero",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "platform_init_mainmem_map"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "nand_boot_init",
            "target_init",
            "effaceable_nor_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "fillNandConfigProperties",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required",
            "chipid_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_soc_voltage"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_cpu_voltage"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_get_production_mode": [
            "platform_get_production_mode"
        ],
        "platform_get_secure_mode": [
            "platform_get_secure_mode"
        ],
        "platform_reset": [
            "platform_reset"
        ],
        "platform_halt": [
            "platform_halt",
            "arch_halt"
        ],
        "platform_deep_idle": [
            "platform_deep_idle",
            "a5iop_sleep"
        ],
        "platform_sleep": [
            "platform_sleep",
            "a5iop_sleep"
        ],
        "platform_cache_operation": [
            "platform_cache_operation",
            "a5iop_cache_operation"
        ],
        "platform_mask_doorbell": [
            "platform_mask_doorbell",
            "mask_int"
        ],
        "platform_unmask_doorbell": [
            "platform_unmask_doorbell",
            "unmask_int"
        ],
        "platform_ring_host_doorbell": [
            "platform_ring_host_doorbell",
            "interrupt_generate_ipc"
        ],
        "clock_gate": [
            "clock_gate"
        ]
    },
    "platform/s5l8940x/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "miu_select_remap",
            "miu_select_remap"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep",
            "mcu_bypass_prep",
            "mcu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "FindProperty",
            "sizeof",
            "memcpy",
            "sizeof"
        ]
    },
    "platform/s5l8940x/pmgr": {
        "platform_power_init": [
            "platform_power_init",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "clock_reset_device"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "get_pll",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "clocks_quiesce_internal",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "get_pll",
            "frequencies",
            "get_pll",
            "PMGR_CLK_NUM",
            "update_perf_state",
            "PMGR_CLK_NUM",
            "clocks_get_frequencies"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "update_perf_state"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency"
        ],
        "clock_gate": [
            "clock_gate"
        ],
        "platform_diag_gate_clocks": [
            "platform_diag_gate_clocks"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "gpio_configure_out"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin",
            "spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "FindProperty",
            "panic",
            "FindProperty",
            "panic",
            "panic",
            "states1",
            "sizeof",
            "panic",
            "chipid_get_cpu_voltage",
            "rPMGR_CLK_CFG_SRC_SEL",
            "rPMGR_CLK_CFG_DIVIDER",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "FindProperty",
            "sizeof",
            "panic",
            "state",
            "PGMR_GET_PERF_STATE_INDEX",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M"
        ]
    },
    "platform/s5l8940x/chipid": {
        "chipid_get_production_mode": [
            "chipid_get_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_ecid_image_personalization_required": [
            "chipid_get_ecid_image_personalization_required"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "env_get_uint"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "env_get_uint"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ],
        "chipid_get_memory_density": [
            "chipid_get_memory_density",
            "chipid_get_memory_manufacturer"
        ],
        "chipid_get_memory_manufacturer": [
            "chipid_get_memory_manufacturer"
        ],
        "chipid_get_memory_ranks": [
            "chipid_get_memory_ranks",
            "chipid_get_memory_manufacturer"
        ],
        "chipid_get_memory_width": [
            "chipid_get_memory_width",
            "chipid_get_memory_manufacturer"
        ],
        "chipid_get_memory_dqcal": [
            "chipid_get_memory_dqcal"
        ]
    },
    "platform/s5l8940x/include/platform": {},
    "platform/s5l8940x/include/platform/soc": {},
    "platform/s5l8940x/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "amc_configure_default_address_decoding_and_mapping"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "spin",
            "amc_phy_scale_dll",
            "spin",
            "spin",
            "amc_phy_scale_dll"
        ],
        "amc_finalize": [
            "amc_finalize",
            "amc_mrcmd",
            "amc_enable_autorefresh"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "platform_get_chip_id",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "in",
            "TMRS",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "in",
            "TMRS",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "PDL_M",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "control",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "cycles",
            "rAMC_MODE_FREQ",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset",
            "platform_get_chip_id",
            "amc_get_memory_device_info",
            "dprintf"
        ]
    },
    "platform/s5l8747x": {
        "platform_early_init": [
            "platform_early_init",
            "panic",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "zero",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "usbphy_update_device_tree",
            "FindNode",
            "usbphy_update_device_tree",
            "FindNode",
            "FindProperty",
            "FindNode",
            "FindProperty",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "random_get_bytes",
            "sizeof",
            "memset",
            "sizeof"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required",
            "chipid_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "platform_get_base_soc_voltage"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_size",
            "platform_get_memory_size"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "defined",
            "platform_get_memory_size"
        ]
    },
    "platform/s5l8747x/miu": {
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_setup_mfc_address_filter": [
            "miu_setup_mfc_address_filter",
            "platform_get_memory_size"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "miu_select_remap",
            "miu_select_remap",
            "miu_setup_mfc_address_filter"
        ]
    },
    "platform/s5l8747x/clocks": {
        "clocks_init": [
            "clocks_init",
            "get_pll"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "clocks_quiesce",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "get_pll",
            "frequencies",
            "get_pll",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "FCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "DCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "HCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "PCLK",
            "PRESCALE_EN",
            "CLK_DIV_N"
        ],
        "clocks_quiesce": [
            "clocks_quiesce"
        ],
        "clocks_get_performance_divider": [
            "clocks_get_performance_divider"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "HCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "PCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "HCLK",
            "PRESCALE_EN",
            "CLK_DIV_N",
            "PCLK",
            "PRESCALE_EN",
            "CLK_DIV_N"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "dprintf",
            "platform_reset"
        ],
        "clock_gate": [
            "clock_gate",
            "panic"
        ]
    },
    "platform/s5l8747x/pmgr": {
        "platform_power_init": [
            "platform_power_init",
            "flops",
            "mode",
            "mode",
            "mode",
            "platform_get_osc_frequency"
        ],
        "platform_power_spin": [
            "platform_power_spin"
        ],
        "platform_disable_keys": [
            "platform_disable_keys"
        ]
    },
    "platform/s5l8747x/chipid": {
        "chipid_get_production_mode": [
            "chipid_get_production_mode",
            "chipid_get_read_done"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "chipid_get_read_done"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain",
            "chipid_get_read_done"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch",
            "chipid_get_read_done"
        ],
        "chipid_get_ecid_image_personalization_required": [
            "chipid_get_ecid_image_personalization_required"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id",
            "chipid_get_read_done"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id",
            "chipid_get_read_done"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision",
            "chipid_get_read_done"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id",
            "chipid_get_read_done"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id",
            "chipid_get_read_done"
        ],
        "chipid_get_tv_dac_cals": [
            "chipid_get_tv_dac_cals",
            "chipid_get_read_done"
        ],
        "chipid_get_read_done": [
            "chipid_get_read_done"
        ]
    },
    "platform/s5l8747x/include/platform": {},
    "platform/s5l8747x/include/platform/soc": {},
    "platform/t8010": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "chipid_get_current_production_mode",
            "chipid_get_fuse_seal",
            "panic",
            "ccc_enable_custom_errors",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "clock_gate",
            "env_get_bool",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "mcu_late_init",
            "mcu_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "RELEASE_ASSERT",
            "miu_initialize_dram"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "display_pmu_init",
            "platform_quiesce_display",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP"
        ],
        "platform_init_mass_storage_panic": [
            "platform_init_mass_storage_panic",
            "nvme_init_mass_storage_panic"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "nvme_init_mass_storage"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "nvme_quiesce_all",
            "apcie_disable_all",
            "panic",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "display_quiesce",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "panic",
            "platform_bootprep_darwin",
            "wdt_enable",
            "security_sidp_seal_boot_manifest",
            "need_l2_ram_disabled",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "need_l2_ram_disabled",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "panic",
            "arm_read_l2_cramconfig",
            "panic",
            "security_get_lock_fuses",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys",
            "platform_sidp_rom_manifest_locked",
            "panic",
            "platform_sidp_boot_manifest_locked",
            "panic",
            "ccc_disable_custom_errors"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw"
        ],
        "platform_init": [
            "platform_init",
            "defined",
            "bzero",
            "consistent_debug_init",
            "platform_enable_error_handler",
            "RELEASE_ASSERT",
            "platform_sidp_boot_manifest_locked",
            "spi_init",
            "pci_init",
            "apcie_set_s3e_mode",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "nvme_quiesce_all",
            "apcie_disable_all",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_setup_default_environment": [
            "platform_setup_default_environment",
            "env_set",
            "target_setup_default_environment"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "pmgr_gfx_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "apcie_update_devicetree",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "usbphy_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof",
            "FindNode",
            "FindProperty",
            "sizeof",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "dt_find_node",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "dt_find_prop",
            "sizeof",
            "panic",
            "dt_find_node",
            "dt_set_prop_addr",
            "dt_set_prop_addr",
            "panic",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_lock_fuses_required": [
            "platform_get_lock_fuses_required"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "panic",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "nvme_quiesce",
            "apcie_disable_link",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_apcie_lane_cfg": [
            "platform_get_apcie_lane_cfg",
            "platform_get_boot_config",
            "panic"
        ],
        "platform_get_pcie_link_width": [
            "platform_get_pcie_link_width",
            "platform_get_boot_config"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_sep_nonce": [
            "platform_get_sep_nonce",
            "sep_client_get_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_spi_frequency": [
            "platform_get_spi_frequency",
            "platform_get_boot_config"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "dprintf"
        ],
        "platform_keys_disabled": [
            "platform_keys_disabled",
            "dprintf"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_is_pre_lpddr4": [
            "platform_is_pre_lpddr4"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info_with_revids": [
            "platform_set_memory_info_with_revids"
        ],
        "platform_get_memory_rev_ids": [
            "platform_get_memory_rev_ids",
            "panic"
        ],
        "platform_restore_system": [
            "platform_restore_system",
            "panic"
        ],
        "platform_asynchronous_exception": [
            "platform_asynchronous_exception",
            "ccc_handle_asynchronous_exception"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_sidp_rom_manifest_locked": [
            "platform_sidp_rom_manifest_locked"
        ],
        "platform_sidp_boot_manifest_locked": [
            "platform_sidp_boot_manifest_locked"
        ],
        "platform_sidp_lock_rom_manifest": [
            "platform_sidp_lock_rom_manifest",
            "RELEASE_ASSERT",
            "platform_sidp_rom_manifest_locked"
        ],
        "platform_sidp_set_rom_manifest": [
            "platform_sidp_set_rom_manifest",
            "RELEASE_ASSERT",
            "platform_sidp_rom_manifest_locked",
            "sizeof"
        ],
        "platform_sidp_lock_boot_manifest": [
            "platform_sidp_lock_boot_manifest",
            "RELEASE_ASSERT",
            "platform_sidp_boot_manifest_locked",
            "dprintf"
        ],
        "platform_sidp_set_boot_manifest": [
            "platform_sidp_set_boot_manifest",
            "RELEASE_ASSERT",
            "platform_sidp_boot_manifest_locked",
            "dprintf",
            "sizeof",
            "dprintf"
        ],
        "platform_sidp_set_mix_n_match": [
            "platform_sidp_set_mix_n_match",
            "dprintf"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value_fpga",
            "power_convert_buck_to_rail",
            "power_get_rail_value"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "chipid_get_soc_voltage"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base"
        ],
        "do_sleep_token_test": [
            "do_sleep_token_test",
            "security_create_sleep_token",
            "dprintf",
            "security_validate_sleep_token",
            "dprintf",
            "dprintf"
        ],
        "platform_get_cpu_ram_voltages": [
            "platform_get_cpu_ram_voltages",
            "chipid_get_cpu_sram_voltage"
        ],
        "platform_get_gpu_voltages": [
            "platform_get_gpu_voltages",
            "chipid_get_gpu_voltage"
        ],
        "platform_get_gpu_ram_voltages": [
            "platform_get_gpu_ram_voltages",
            "chipid_get_gpu_sram_voltage"
        ],
        "platform_get_ram_voltages": [
            "platform_get_ram_voltages",
            "chipid_get_sram_voltage"
        ],
        "platform_get_dwi_to_mv": [
            "platform_get_dwi_to_mv",
            "power_convert_dwi_to_mv_fpga",
            "power_convert_buck_to_rail",
            "power_convert_dwi_to_mv"
        ],
        "platform_get_pcie_l1ss_ltr_threshold": [
            "platform_get_pcie_l1ss_ltr_threshold"
        ],
        "platform_get_pcie_l1ss_t_common_mode": [
            "platform_get_pcie_l1ss_t_common_mode"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_sram_voltage"
        ]
    },
    "platform/t8010/error_handler": {
        "platform_enable_error_handler": [
            "platform_enable_error_handler",
            "enable_amc_checks",
            "enable_cp_checks"
        ]
    },
    "platform/t8010/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "miu_configure_bridge",
            "ausb_setup_widgets"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "RELEASE_ASSERT",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "chipid_get_fpga_block_instantiation",
            "FindNode",
            "ARRAY_SIZE",
            "FindProperty",
            "dprintf"
        ]
    },
    "platform/t8010/apcie": {
        "apcie_set_s3e_mode": [
            "apcie_set_s3e_mode"
        ],
        "apcie_enable_link": [
            "apcie_enable_link",
            "apcie_enable_root_complex",
            "gpio_configure",
            "gpio_configure",
            "dprintf",
            "system_time",
            "gpio_read",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "dprintf",
            "gpio_configure",
            "apcie_enable_link_hardware",
            "platform_apply_tunables",
            "platform_apply_tunables",
            "OR_APCIE_CONFIG_REG",
            "spin",
            "gpio_configure",
            "apcie_config_read_raw",
            "PCIE_RC_CAP_LINK_CONTROL2_OFFSET",
            "sizeof",
            "apcie_config_write_raw",
            "PCIE_RC_CAP_LINK_CONTROL2_OFFSET",
            "sizeof",
            "platform_get_pcie_link_width",
            "apcie_config_read_raw",
            "PCIE_RC_PORT_LOGIC_GEN2_CTRL_OFFSET",
            "sizeof",
            "apcie_config_write_raw",
            "PCIE_RC_PORT_LOGIC_GEN2_CTRL_OFFSET",
            "sizeof",
            "apcie_config_read_raw",
            "PCIE_RC_PORT_LOGIC_PORT_LINK_CTRL_OFFSET",
            "sizeof",
            "apcie_config_write_raw",
            "PCIE_RC_PORT_LOGIC_PORT_LINK_CTRL_OFFSET",
            "sizeof",
            "apcie_config_read_raw",
            "PCIE_RC_PORT_LOGIC_L1SUB_CAPABILITY_REG_OFFSET",
            "sizeof",
            "apcie_config_write_raw",
            "PCIE_RC_PORT_LOGIC_L1SUB_CAPABILITY_REG_OFFSET",
            "sizeof",
            "get_reg",
            "APCIE_PORT_COUNTER_BASE_ADDR",
            "set_reg",
            "APCIE_PORT_COUNTER_BASE_ADDR",
            "platform_get_apcie_lane_cfg",
            "ARRAY_SIZE",
            "ARRAY_SIZE",
            "PHY_GET_REG",
            "spin",
            "OR_PMA_RX_REG",
            "OR_PMA_RX_REG",
            "OR_PMA_TX_REG",
            "OR_PMA_CMN_REG",
            "OR_PMA_CMN_REG",
            "GET_PMA_CMN_REG",
            "PMA_CMN_REGISTERS_BLK_CMN_SSM_PLLPRE_TMR_11_0_INSRT",
            "SET_PMA_CMN_REG",
            "GET_PMA_CMN_REG",
            "PMA_CMN_REGISTERS_BLK_CMN_SSM_PLLLOCK_TMR_11_0_INSRT",
            "SET_PMA_CMN_REG",
            "OR_PMA_TX_REG",
            "SET_PMA_TX_REG",
            "GET_PMA_TX_REG",
            "PMA_TX_LANE_REGISTERS_BLK_XCVR_PSM_LANECAL_TMR_11_0_INSRT",
            "SET_PMA_TX_REG",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_DIAG_ILL_IQE_TRIM3_7_0_INSRT",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_DIAG_ILL_IQE_TRIM5_7_0_INSRT",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_CDRLF_CNFG_4_0_INSRT",
            "SET_PMA_RX_REG",
            "OR_APCIE_CONFIG_REG",
            "system_time",
            "GET_APCIE_CONFIG_REG",
            "time_has_elapsed",
            "GET_APCIE_CONFIG_REG",
            "dprintf",
            "dprintf",
            "APCIE_CONFIG_BLK_LINKSTS_LTSSM_STATE_XTRCT",
            "spin",
            "dart_init",
            "apcie_setup_root_port_bridge",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex"
        ],
        "apcie_disable_link": [
            "apcie_disable_link",
            "dprintf",
            "set_reg",
            "APCIE_PORT_COUNTER_BASE_ADDR",
            "SET_APCIE_CONFIG_REG",
            "system_time",
            "GET_APCIE_CONFIG_REG",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "system_time",
            "GET_APCIE_CONFIG_REG",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "dart_assert_unmapped",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex",
            "apcie_free_port_bridge"
        ],
        "apcie_get_link_enable_count": [
            "apcie_get_link_enable_count"
        ],
        "apcie_update_devicetree": [
            "apcie_update_devicetree",
            "malloc",
            "bzero",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "snprintf",
            "sizeof",
            "dt_find_node",
            "bzero",
            "platform_apply_dt_tunables",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "snprintf",
            "sizeof",
            "bzero",
            "platform_apply_dt_tunables",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "dprintf",
            "bzero",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "free"
        ],
        "platform_register_pci_busses": [
            "platform_register_pci_busses",
            "apcie_init"
        ],
        "platform_map_host_to_pci_addr": [
            "platform_map_host_to_pci_addr"
        ],
        "platform_map_pci_to_host_addr": [
            "platform_map_pci_to_host_addr"
        ]
    },
    "platform/t8010/dcs": {
        "dcs_enable_autorefresh": [
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ"
        ],
        "dcs_init_Prolog": [
            "dcs_init_Prolog",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us"
        ],
        "dcs_init_AMC_Initial_Config": [
            "dcs_init_AMC_Initial_Config",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGTIM_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_PHYRDWRTIM_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_CASPCH_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_ACT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_SELFREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_PDN_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_TAT_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_AMP_Initial_Config": [
            "dcs_init_AMP_Initial_Config",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPEN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLLOCKTIM",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "dcs_reg_write_all_chan",
            "rDCS_AMPCA_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALSEGLEN_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALSEGLEN_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWWRDQCALPATPRBS7",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLEN",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_SPARE",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Self_Refresh_Exit_a": [
            "dcs_init_Self_Refresh_Exit_a",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Self_Refresh_Exit_b": [
            "dcs_init_Self_Refresh_Exit_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPINIT",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_enable_autorefresh",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write"
        ],
        "dcs_init_ZQ_Cal_Cfg": [
            "dcs_init_ZQ_Cal_Cfg",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_mrcmd",
            "dcs_spin",
            "register",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_REG_READ_CH",
            "DCS_REG_READ_CH",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd"
        ],
        "dcs_init_AddrCfg_Cfg": [
            "dcs_init_AddrCfg_Cfg",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_TotalSize_Cfg": [
            "dcs_init_TotalSize_Cfg",
            "dbgprintf",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dbgprintf"
        ],
        "dcs_init_Reenable_AMC_Scheduler": [
            "dcs_init_Reenable_AMC_Scheduler",
            "dcs_spin",
            "Enable",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_CA_Cal_Setup_Freq1": [
            "dcs_init_CA_Cal_Setup_Freq1",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_CA_Cal_Freq1": [
            "dcs_init_CA_Cal_Freq1"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_a": [
            "dcs_init_DQ_Cal_Setup_Freq1_a",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_DEFER_EN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLOVRRD"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_b": [
            "dcs_init_DQ_Cal_Setup_Freq1_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_wrdq_skew": [
            "dcs_init_wrdq_skew",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL"
        ],
        "dcs_init_post_wrlvl": [
            "dcs_init_post_wrlvl",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL"
        ],
        "dcs_init_CA_Cal_Setup_Freq0": [
            "dcs_init_CA_Cal_Setup_Freq0",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_a": [
            "dcs_init_DQ_Cal_Setup_Freq0_a",
            "dcs_mrcmd",
            "dcs_spin"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_b": [
            "dcs_init_DQ_Cal_Setup_Freq0_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_Reg_for_Boot": [
            "dcs_init_Reg_for_Boot",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQSDLL_DLYSEL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQSDLL_DLYSEL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_MoreFeatures": [
            "dcs_init_MoreFeatures",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Fast_Critical_Word_Forwarding": [
            "dcs_init_Fast_Critical_Word_Forwarding",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_Gating_Global_Timers": [
            "dcs_init_Gating_Global_Timers",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_SPLLCTRL_MDLLPWRDNCFG",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_ODTS": [
            "dcs_init_ODTS",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "RELEASE_ASSERT",
            "initialized",
            "DCS_REG_READ_CH",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "dcs_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "dcs_get_memory_size"
        ],
        "dcs_enable_slow_boot": [
            "dcs_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "dcs_dram_workarounds": [
            "dcs_dram_workarounds"
        ],
        "dcs_init_config_params": [
            "dcs_init_config_params",
            "memcpy",
            "sizeof",
            "dcs_init_config_fixup_params"
        ],
        "dcs_restore_calibration_results": [
            "dcs_restore_calibration_results"
        ]
    },
    "platform/t8010/pmgr": {
        "platform_power_spin": [
            "platform_power_spin",
            "arm_no_wfe_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "config_apsc_acc_state",
            "clocks_quiesce_internal",
            "config_apsc_acc_state",
            "config_soc_perf_state",
            "PMGR_VOLMAN_BUCK_MAP_CPU_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_CPU_SRAM_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_SOC_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_GFX_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_GFX_SRAM_INSRT",
            "config_apsc_acc_state",
            "dvfmperf_get_voltage_index",
            "config_apsc_acc_state",
            "platform_get_soc_voltages",
            "platform_convert_voltages",
            "config_soc_perf_state",
            "config_soc_perf_state",
            "ACC_PWRCTL_DVFM_CFG_TEMP_THRES0_INSRT",
            "ACC_PWRCTL_DVFM_CFG_TEMP_THRES1_INSRT",
            "ACC_PWRCTL_DVFM_CFG_TEMP_OFFST0_INSRT",
            "ACC_PWRCTL_DVFM_CFG_TEMP_OFFST1_INSRT",
            "ACC_PWRCTL_DVFM_CFG1_TEMP_THRES2_INSRT",
            "ACC_PWRCTL_DVFM_CFG1_TEMP_THRES2_INSRT",
            "dwi_init",
            "dwi_init",
            "set_apsc_acc_state",
            "dvfmperf_get_voltage_index",
            "set_gfx_perf_state",
            "rPMGR_PLL_CFG",
            "rPMGR_PLL_CTL",
            "rPMGR_PLL_CTL",
            "set_lppll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_nco_clocks",
            "set_soc_perf_state",
            "sizeof",
            "sizeof",
            "power_on_sep",
            "clocks_get_frequencies",
            "apply_pmgr_tunables"
        ],
        "dump_clock_frequencies": [
            "dump_clock_frequencies",
            "dprintf"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "get_apsc_acc_state",
            "set_apsc_acc_state",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "set_soc_perf_state",
            "set_soc_perf_state",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency",
            "set_pll",
            "get_pll",
            "clocks_get_frequencies_range",
            "clock_update_frequency",
            "clocks_get_frequencies_range"
        ],
        "clock_gate": [
            "clock_gate",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX"
        ],
        "power_on": [
            "power_on",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init",
            "init_soc_thermal_sensors",
            "init_cpu_thermal_sensors",
            "init_soc_sochot",
            "init_cpu_sochot",
            "init_soc_tvm_tunables"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX",
            "spin"
        ],
        "clock_set_device_reset": [
            "clock_set_device_reset",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX"
        ],
        "clock_get_pcie_refclk_good": [
            "clock_get_pcie_refclk_good"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "pmgr_get_dvfm_data",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "panic",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "platform_get_dwi_to_mv",
            "ACC_PWRCTL_DVFM_ST0_SAFE_VOL_XTRCT",
            "rACC_DVFM_ST",
            "FindProperty",
            "sizeof",
            "chipid_get_total_rails_leakage"
        ],
        "pmgr_gfx_update_device_tree": [
            "pmgr_gfx_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "PMGR_PLL_FREQ",
            "platform_get_dwi_to_mv",
            "FindProperty",
            "FindProperty"
        ]
    },
    "platform/t8010/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "mode",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURE_MODE_XTRCT"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURITY_DOMAIN_XTRCT"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id",
            "MINIPMGR_FUSE_CFG_FUSE0_BID_XTRCT"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch",
            "MINIPMGR_FUSE_CFG_FUSE0_MINIMUM_EPOCH_XTRCT"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision",
            "MINIPMGR_FUSE_CFG_FUSE4_CHIP_REV_MAJOR_XTRCT",
            "MINIPMGR_FUSE_CFG_FUSE4_CHIP_REV_MINOR_XTRCT"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_cpu_bin_voltage"
        ],
        "chipid_get_cpu_sram_voltage": [
            "chipid_get_cpu_sram_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_cpu_sram_bin_voltage"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_soc_bin_voltage"
        ],
        "chipid_get_gpu_voltage": [
            "chipid_get_gpu_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_gpu_bin_voltage"
        ],
        "chipid_get_gpu_sram_voltage": [
            "chipid_get_gpu_sram_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_gpu_sram_bin_voltage"
        ],
        "chipid_get_sram_voltage": [
            "chipid_get_sram_voltage",
            "sizeof",
            "sizeof",
            "panic",
            "chipid_get_fuse_revision",
            "chipid_get_sram_bin_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_XTRCT"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_INSRT",
            "asm",
            "chipid_get_fuse_lock",
            "panic"
        ],
        "chipid_get_fuse_seal": [
            "chipid_get_fuse_seal",
            "MINIPMGR_FUSE_CFG_FUSE1_SEAL_FUSES_XTRCT"
        ],
        "chipid_get_lpo_trim": [
            "chipid_get_lpo_trim",
            "MINIPMGR_FUSE_CFG_FUSE2_LPO_TRIM_XTRCT"
        ],
        "chipid_get_pcie_refpll_fcal_vco_digctrl": [
            "chipid_get_pcie_refpll_fcal_vco_digctrl",
            "MINIPMGR_FUSE_CFG_FUSE4_PCIE_REFPLL_FCAL_VCO_DIGCTRL_XTRCT"
        ],
        "chipid_get_soc_temp_sensor_trim": [
            "chipid_get_soc_temp_sensor_trim",
            "panic"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision",
            "MINIPMGR_FUSE_CFG_FUSE4_REV_XTRCT"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ],
        "chipid_get_fpga_block_instantiation": [
            "chipid_get_fpga_block_instantiation",
            "panic"
        ]
    },
    "platform/t8010/include/platform": {},
    "platform/t8010/include/platform/soc": {},
    "platform/t8010/include/platform/soc/t8010": {},
    "platform/t8010/include/platform/soc/t8010/a0/tunable": {},
    "platform/s7002": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "platform_power_init",
            "consistent_debug_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "dockfifo_uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "LLB",
            "platform_dockfifo_access_enable",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "platform_quiesce_display",
            "display_init",
            "env_get_uint",
            "debug_enable_uarts",
            "env_get_uint",
            "display_set_rotation"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "asp_nand_open"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "display_quiesce"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "platform_bootprep_darwin",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "target_needs_chargetrap",
            "csi_init",
            "asp_init",
            "mode",
            "anc_firmware_init",
            "anc_firmware_init",
            "target_init"
        ],
        "platform_init_usb": [
            "platform_init_usb",
            "rPMGR_SCRATCH0",
            "usb_dockfifo_controller_init",
            "usb_init_with_controller",
            "usb_dockfifo_controller_init",
            "synopsys_otg_controller_init",
            "usb_init_with_controller",
            "synopsys_otg_controller_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "platform_init_usb",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "platform_get_base_soc_voltage"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "rPMGR_SCRATCH0",
            "platform_get_dock_connect",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_get_request_dfu1": [
            "platform_get_request_dfu1",
            "gpio_read"
        ],
        "platform_get_request_dfu2": [
            "platform_get_request_dfu2",
            "gpio_read"
        ],
        "platform_get_dock_connect": [
            "platform_get_dock_connect",
            "gpio_read"
        ],
        "platform_set_dock_attention": [
            "platform_set_dock_attention",
            "gpio_write"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "dprintf"
        ],
        "platform_keys_disabled": [
            "platform_keys_disabled",
            "dprintf"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_region_size"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_display_memory_size"
        ],
        "platform_dockfifo_access_enable": [
            "platform_dockfifo_access_enable",
            "dprintf",
            "panic",
            "nonzero",
            "dprintf"
        ]
    },
    "platform/s7002/reconfig": {
        "reconfig_append_command": [
            "reconfig_append_command",
            "order",
            "panic",
            "panic",
            "rRECONFIG_RAM_CMD",
            "rRECONFIG_RAM_DATA",
            "rRECONFIG_RAM_MASK"
        ],
        "reconfig_commit": [
            "reconfig_commit",
            "ENCODE_RECONFIG_CONFIG",
            "ENCODE_RECONFIG_CONFIG",
            "ENCODE_RECONFIG_CONFIG"
        ],
        "reconfig_dbg_dump_contents": [
            "reconfig_dbg_dump_contents",
            "printf",
            "printf",
            "printf",
            "rRECONFIG_RAM_CMD",
            "rRECONFIG_RAM_DATA",
            "rRECONFIG_RAM_MASK",
            "printf",
            "printf",
            "printf",
            "rRECONFIG_RAM_CMD",
            "rRECONFIG_RAM_DATA",
            "rRECONFIG_RAM_MASK",
            "printf",
            "printf",
            "printf",
            "rRECONFIG_RAM_CMD",
            "rRECONFIG_RAM_DATA",
            "rRECONFIG_RAM_MASK",
            "printf"
        ]
    },
    "platform/s7002/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "miu_configure_bridge"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_configure_bridge_soc_reconfig_ram": [
            "miu_configure_bridge_soc_reconfig_ram",
            "ARRAY_SIZE",
            "reconfig_append_command"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree"
        ]
    },
    "platform/s7002/pmgr": {
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "clock_gate": [
            "clock_gate"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "clocks_quiesce_internal",
            "set_pll",
            "set_nco_clocks",
            "clocks_get_frequencies",
            "apply_pmgr_tunables"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "update_memory_clk_config",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency",
            "clock_update_frequency",
            "clocks_get_frequencies_range"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin",
            "aic_spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree"
        ],
        "timer_init": [
            "timer_init"
        ],
        "timer_stop_all": [
            "timer_stop_all"
        ],
        "platform_fiq": [
            "platform_fiq",
            "timer_deadline_func"
        ],
        "timer_ticks_to_usecs": [
            "timer_ticks_to_usecs"
        ],
        "timer_usecs_to_ticks": [
            "timer_usecs_to_ticks"
        ],
        "timer_get_tick_rate": [
            "timer_get_tick_rate"
        ],
        "timer_get_ticks": [
            "timer_get_ticks",
            "aic_get_ticks",
            "aic_get_ticks"
        ]
    },
    "platform/s7002/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ]
    },
    "platform/s7002/include/platform": {},
    "platform/s7002/include/platform/soc": {},
    "platform/s7002/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "amc_calibration_start": [
            "amc_calibration_start"
        ],
        "amc_enable_rddqcal": [
            "amc_enable_rddqcal"
        ],
        "amc_wrdqcal_start": [
            "amc_wrdqcal_start"
        ],
        "amc_finalize": [
            "amc_finalize",
            "amc_enable_autorefresh"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset",
            "amc_get_memory_device_info"
        ],
        "amc_configure_mem_reconfig_ram": [
            "amc_configure_mem_reconfig_ram",
            "reconfig_append_command",
            "rAMP_DLLSTS",
            "reconfig_append_command",
            "rAMP_DLLSTS",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMC_CAS_FREQ",
            "reconfig_append_command",
            "rAMC_PCH_FREQ",
            "reconfig_append_command",
            "rAMC_ACT_FREQ",
            "reconfig_append_command",
            "rAMC_AUTO_FREQ",
            "reconfig_append_command",
            "rAMC_SELF_FREQ",
            "reconfig_append_command",
            "rAMC_MODE_FREQ",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMC_TREFBWBASECYC_FREQ",
            "reconfig_append_command",
            "rAMC_TREFBWBASECYC_FREQ",
            "reconfig_append_command",
            "rAMC_TREFBWBASECYC_FREQ",
            "reconfig_append_command",
            "rAMC_MIFCASSCH_FREQ",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMP_AMPEN",
            "reconfig_append_command",
            "rAMP_AMPEN",
            "reconfig_append_command",
            "rAMP_DQDQSDS",
            "reconfig_append_command",
            "rAMP_NONDQDS",
            "reconfig_append_command",
            "rAMP_DIFFMODE_FREQ",
            "reconfig_append_command",
            "rAMP_RDDQDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_DLLLOCKTIM",
            "reconfig_append_command",
            "rAMP_DLLLOCKTIM",
            "reconfig_append_command",
            "rAMP_CAOUTDLLSCL_FREQ",
            "reconfig_append_command",
            "rAMP_DQSINDLLSCL_FREQ",
            "reconfig_append_command",
            "rAMP_RDCAPCFG_FREQ",
            "reconfig_append_command",
            "rAMP_DLLUPDTCTRL",
            "reconfig_append_command",
            "rAMP_DLLUPDTCTRL",
            "reconfig_append_command",
            "rAMP_IMPAUTOCAL",
            "reconfig_append_command",
            "rAMP_IMPAUTOCAL",
            "reconfig_append_command",
            "rAMP_DLLUPDTINTVL",
            "reconfig_append_command",
            "rAMP_DLLUPDTINTVL",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_DLLEN",
            "reconfig_append_command",
            "rAMP_MDLLFREQBINDISABLE",
            "reconfig_append_command",
            "rAMP_MDLLFREQBINDISABLE",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_AMPINIT",
            "reconfig_append_command",
            "rAMP_AMPINIT",
            "reconfig_append_command",
            "rAMP_IMPCALCMD",
            "reconfig_append_command",
            "rAMP_IMPCALCMD",
            "reconfig_append_command",
            "rAMP_IMPCALCMD",
            "reconfig_append_command",
            "rAMP_IMPCALCMD",
            "reconfig_append_command",
            "rAMP_CASDLLCTRL",
            "rAMP_CASDLLCTRL",
            "reconfig_append_command",
            "rAMP_CASDLLCTRL",
            "reconfig_append_command",
            "rAMP_CADESKEW_CTRL",
            "rAMP_CADESKEW_CTRL",
            "rAMP_CKDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_TESTMODE",
            "reconfig_append_command",
            "rAMP_DRAMSIGDLY",
            "rAMP_DRAMSIGDLY",
            "reconfig_append_command",
            "rAMP_CSDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_CKDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_CKEDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_TESTMODE",
            "amp_wrlvl_program_reconfig",
            "amp_wrlvl_program_reconfig",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMC_AREFPARAM_FREQ",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMC_AREFEN_FREQ",
            "reconfig_append_command",
            "rAMC_AREFEN_FREQ",
            "reconfig_append_command",
            "rAMC_AREFEN_FREQ",
            "reconfig_append_command",
            "rAMC_AREFEN_FREQ",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "rAMP_DQSDLLCTRL_RD",
            "rAMP_DQSDLLCTRL_RD",
            "reconfig_append_command",
            "rAMP_DQSDLLCTRL_RD",
            "reconfig_append_command",
            "rAMP_RDDQDESKEW_CTRL",
            "rAMP_RDDQDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_DQSDLLCTRL_WR",
            "rAMP_DQSDLLCTRL_WR",
            "reconfig_append_command",
            "rAMP_DQSDLLCTRL_WR",
            "reconfig_append_command",
            "rAMP_WRDQDESKEW_CTRL",
            "rAMP_WRDQDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_WRDQSDESKEW_CTRL",
            "rAMP_WRDQSDESKEW_CTRL",
            "rAMP_WRDMDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_WRDMDESKEW_CTRL",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTCMD",
            "reconfig_append_command",
            "rAMP_DLLUPDTINTVL",
            "reconfig_append_command",
            "rAMP_DLLUPDTINTVL",
            "reconfig_append_command",
            "rAMP_AMPCLK",
            "reconfig_append_command",
            "rAMP_AMPCLK",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "reconfig_append_command",
            "sizeof",
            "sizeof",
            "reconfig_append_command"
        ]
    },
    "platform/s5l8945x": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "dma_init",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "flash_nand_id"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram",
            "platform_init_mainmem_map"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map",
            "arm_mmu_map_section_range",
            "ROUNDUP"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "platform_quiesce_display",
            "clock_gate",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP",
            "arm_mmu_map_section_range"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "flash_nand_init"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "clock_gate",
            "display_quiesce",
            "clock_gate",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_quiesce_display",
            "wdt_enable",
            "miu_select_remap",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "miu_select_remap",
            "platform_quiesce_display",
            "security_get_production_override",
            "chipid_clear_production_mode",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "zero",
            "arm_mmu_map_section",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "arm_mmu_map_section_range",
            "ROUNDUP",
            "platform_init_mainmem_map"
        ],
        "platform_init": [
            "platform_init",
            "spi_init",
            "nand_boot_init",
            "target_init",
            "effaceable_nor_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "fillNandConfigProperties",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required",
            "chipid_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_soc_voltage"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "sizeof",
            "sizeof",
            "chipid_get_cpu_voltage"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_get_production_mode": [
            "platform_get_production_mode"
        ],
        "platform_get_secure_mode": [
            "platform_get_secure_mode"
        ],
        "platform_reset": [
            "platform_reset"
        ],
        "platform_halt": [
            "platform_halt",
            "arch_halt"
        ],
        "platform_deep_idle": [
            "platform_deep_idle",
            "a5iop_sleep"
        ],
        "platform_sleep": [
            "platform_sleep",
            "a5iop_sleep"
        ],
        "platform_cache_operation": [
            "platform_cache_operation",
            "a5iop_cache_operation"
        ],
        "platform_mask_doorbell": [
            "platform_mask_doorbell",
            "mask_int"
        ],
        "platform_unmask_doorbell": [
            "platform_unmask_doorbell",
            "unmask_int"
        ],
        "platform_ring_host_doorbell": [
            "platform_ring_host_doorbell",
            "interrupt_generate_ipc"
        ],
        "clock_gate": [
            "clock_gate"
        ]
    },
    "platform/s5l8945x/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "clock_gate",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "miu_configure_bridge",
            "clock_gate",
            "clock_gate",
            "miu_select_remap",
            "miu_select_remap"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep",
            "mcu_bypass_prep",
            "mcu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "FindProperty",
            "sizeof",
            "memcpy",
            "sizeof"
        ]
    },
    "platform/s5l8945x/pmgr": {
        "platform_power_init": [
            "platform_power_init",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "rPMGR_PWR_GATE_TIME_A",
            "rPMGR_PWR_GATE_TIME_B",
            "clock_reset_device",
            "init_thermal_sensors"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "aic_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "get_pll",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "rPMGR_PERF_STATE_A",
            "rPMGR_PERF_STATE_B",
            "rPMGR_PERF_STATE_C",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_SET_PERF_STATE_INDEX",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_SET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "clocks_quiesce_internal",
            "rPMGR_SRAM_EMA_B0_Pn_LO",
            "rPMGR_SRAM_EMA_B0_Pn_HI",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "get_pll",
            "frequencies",
            "get_pll",
            "PMGR_CLK_NUM",
            "update_perf_state",
            "PMGR_CLK_NUM",
            "clocks_get_frequencies"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "update_perf_state"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency"
        ],
        "clock_gate": [
            "clock_gate"
        ],
        "platform_diag_gate_clocks": [
            "platform_diag_gate_clocks"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "gpio_configure_out"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin",
            "spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_V",
            "FindProperty",
            "sizeof",
            "panic",
            "state",
            "PGMR_GET_PERF_STATE_INDEX",
            "FindProperty",
            "sizeof",
            "panic",
            "order",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M",
            "PGMR_GET_PERF_STATE_INDEX",
            "PMGR_PERF_STATE_M"
        ],
        "init_thermal_sensors": [
            "init_thermal_sensors",
            "chipid_get_fused_thermal_70C",
            "chipid_get_fused_thermal_25C",
            "chipid_get_fuse_revision",
            "dprintf"
        ]
    },
    "platform/s5l8945x/chipid": {
        "chipid_get_production_mode": [
            "chipid_get_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_ecid_image_personalization_required": [
            "chipid_get_ecid_image_personalization_required"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_fused_thermal_70C": [
            "chipid_get_fused_thermal_70C"
        ],
        "chipid_get_fused_thermal_25C": [
            "chipid_get_fused_thermal_25C"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "env_get_uint"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "env_get_uint"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ]
    },
    "platform/s5l8945x/include/platform": {},
    "platform/s5l8945x/include/platform/soc": {},
    "platform/s5l8945x/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "amc_configure_default_address_decoding_and_mapping"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "spin",
            "amc_phy_scale_dll",
            "spin",
            "spin",
            "amc_phy_scale_dll"
        ],
        "amc_finalize": [
            "amc_finalize",
            "amc_mrcmd",
            "amc_enable_autorefresh"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "in",
            "TMRS",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "in",
            "TMRS",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "rAMC_MODE_FREQ"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset"
        ]
    },
    "platform/s8000": {
        "platform_reconfig_sequence_insert": [
            "platform_reconfig_sequence_insert",
            "platform_get_chip_revision",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "platform_get_chip_revision",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence",
            "build_sequence"
        ],
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "chipid_get_current_production_mode",
            "chipid_get_fuse_seal",
            "panic",
            "ccc_enable_custom_errors",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "clock_gate",
            "env_get_bool",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "mcu_late_init",
            "mcu_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "display_pmu_init",
            "platform_quiesce_display",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable",
            "spin"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP"
        ],
        "platform_init_mass_storage_panic": [
            "platform_init_mass_storage_panic",
            "nvme_init_mass_storage_panic"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "nvme_init_mass_storage"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "nvme_quiesce_all",
            "apcie_disable_all",
            "panic",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "display_quiesce",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "platform_bootprep_darwin",
            "wdt_enable",
            "reconfig_init",
            "platform_reconfig_sequence_insert",
            "reconfig_lock",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "platform_relocate_securerom",
            "miu_select_remap",
            "platform_quiesce_display",
            "panic",
            "security_get_lock_fuses",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys",
            "ccc_disable_custom_errors"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw",
            "arm_mmu_map_device_rw"
        ],
        "platform_init": [
            "platform_init",
            "defined",
            "bzero",
            "consistent_debug_init",
            "platform_enable_error_handler",
            "spi_init",
            "pci_init",
            "apcie_set_s3e_mode",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "nvme_quiesce_all",
            "apcie_disable_all",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_setup_default_environment": [
            "platform_setup_default_environment",
            "env_set",
            "target_setup_default_environment"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "platform_get_chip_revision",
            "FindNode",
            "FindProperty",
            "dprintf",
            "dt_find_node",
            "dt_set_prop",
            "FindNode",
            "platform_get_chip_revision",
            "dt_set_prop_32",
            "dt_set_prop_32",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "FindProperty",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "pmgr_gfx_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "apcie_update_devicetree",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "usbphy_update_device_tree",
            "FindNode",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof",
            "FindNode",
            "nvme_update_devicetree",
            "FindProperty",
            "sizeof",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "dt_find_node",
            "platform_get_memory_region_base",
            "platform_get_memory_region_size",
            "dt_find_prop",
            "sizeof",
            "panic",
            "dt_find_node",
            "dt_set_prop_addr",
            "dt_set_prop_addr",
            "panic",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_lock_fuses_required": [
            "platform_get_lock_fuses_required"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "panic",
            "apcie_set_s3e_mode",
            "apcie_enable_link",
            "nvme_init",
            "apcie_get_port_bridge",
            "nvme_quiesce",
            "apcie_disable_link",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_apcie_lane_cfg": [
            "platform_get_apcie_lane_cfg",
            "platform_get_boot_config",
            "panic"
        ],
        "platform_get_pcie_link_width": [
            "platform_get_pcie_link_width",
            "platform_get_boot_config"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_sep_nonce": [
            "platform_get_sep_nonce",
            "sep_client_get_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_spi_frequency": [
            "platform_get_spi_frequency",
            "platform_get_boot_config"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "dprintf"
        ],
        "platform_keys_disabled": [
            "platform_keys_disabled",
            "dprintf"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_is_pre_lpddr4": [
            "platform_is_pre_lpddr4"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info_with_revids": [
            "platform_set_memory_info_with_revids"
        ],
        "platform_get_memory_rev_ids": [
            "platform_get_memory_rev_ids",
            "panic"
        ],
        "platform_restore_system": [
            "platform_restore_system",
            "panic"
        ],
        "platform_asynchronous_exception": [
            "platform_asynchronous_exception",
            "ccc_handle_asynchronous_exception"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value_fpga",
            "power_convert_buck_to_rail",
            "power_get_rail_value"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "chipid_get_soc_voltage"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_region_size"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_display_memory_size"
        ],
        "do_sleep_token_test": [
            "do_sleep_token_test",
            "security_create_sleep_token",
            "dprintf",
            "security_validate_sleep_token",
            "dprintf",
            "dprintf"
        ],
        "platform_get_cpu_ram_voltages": [
            "platform_get_cpu_ram_voltages",
            "chipid_get_cpu_sram_voltage"
        ],
        "platform_get_gpu_voltages": [
            "platform_get_gpu_voltages",
            "chipid_get_gpu_voltage"
        ],
        "platform_get_gpu_ram_voltages": [
            "platform_get_gpu_ram_voltages",
            "chipid_get_gpu_sram_voltage"
        ],
        "platform_get_ram_voltages": [
            "platform_get_ram_voltages",
            "chipid_get_sram_voltage"
        ],
        "platform_get_dwi_to_mv": [
            "platform_get_dwi_to_mv",
            "power_convert_dwi_to_mv_fpga",
            "power_convert_buck_to_rail",
            "power_convert_dwi_to_mv"
        ],
        "platform_get_pcie_l1ss_ltr_threshold": [
            "platform_get_pcie_l1ss_ltr_threshold"
        ],
        "platform_get_pcie_l1ss_t_common_mode": [
            "platform_get_pcie_l1ss_t_common_mode"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_sram_voltage"
        ]
    },
    "platform/s8000/error_handler": {
        "platform_enable_error_handler": [
            "platform_enable_error_handler",
            "enable_amc_checks",
            "enable_cp_checks"
        ]
    },
    "platform/s8000/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "ausb_setup_widgets"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "chipid_get_fpga_block_instantiation",
            "dprintf",
            "chipid_get_fpga_block_instantiation",
            "FindNode",
            "ARRAY_SIZE",
            "FindProperty",
            "dprintf"
        ]
    },
    "platform/s8000/apcie": {
        "apcie_set_s3e_mode": [
            "apcie_set_s3e_mode"
        ],
        "apcie_enable_link": [
            "apcie_enable_link",
            "apcie_enable_root_complex",
            "gpio_configure",
            "gpio_configure",
            "dprintf",
            "system_time",
            "gpio_read",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "dprintf",
            "gpio_configure",
            "apcie_enable_link_hardware",
            "platform_apply_tunables",
            "platform_apply_tunables",
            "spin",
            "gpio_configure",
            "rAPCIE_PCIE_CAP_LINK_CONTROL2",
            "rAPCIE_PCIE_CAP_LINK_CONTROL2",
            "platform_get_pcie_link_width",
            "rAPCIE_PORT_LOGIC_GEN2_CTRL",
            "rAPCIE_PORT_LOGIC_GEN2_CTRL",
            "rAPCIE_PORT_LOGIC_PORT_LINK_CTRL",
            "rAPCIE_PORT_LOGIC_PORT_LINK_CTRL",
            "rAPCIE_CONFIG_SPACE32",
            "rAPCIE_COUNTER_COMMAND",
            "platform_get_apcie_lane_cfg",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "panic",
            "PHY_GET_REG",
            "spin",
            "OR_PMA_CMN_REG",
            "OR_PMA_CMN_REG",
            "GET_PMA_CMN_REG",
            "PMA_CMN_REGISTERS_BLK_CMN_SSM_PLLPRE_TMR_11_0_INSRT",
            "SET_PMA_CMN_REG",
            "GET_PMA_CMN_REG",
            "PMA_CMN_REGISTERS_BLK_CMN_SSM_PLLLOCK_TMR_11_0_INSRT",
            "SET_PMA_CMN_REG",
            "OR_PMA_TX_REG",
            "SET_PMA_TX_REG",
            "GET_PMA_TX_REG",
            "PMA_TX_LANE_REGISTERS_BLK_XCVR_PSM_LANECAL_TMR_11_0_INSRT",
            "SET_PMA_TX_REG",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_DIAG_ILL_IQE_TRIM3_7_0_INSRT",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_DIAG_ILL_IQE_TRIM5_7_0_INSRT",
            "SET_PMA_RX_REG",
            "GET_PMA_RX_REG",
            "PMA_RX_LANE_REGISTERS_BLK_RX_CDRLF_CNFG_4_0_INSRT",
            "SET_PMA_RX_REG",
            "SET_PMA_RX_REG",
            "SET_PMA_RX_REG",
            "SET_PMA_RX_REG",
            "SET_PMA_RX_REG",
            "rAPCIE_CONFIG_LINKCFG",
            "system_time",
            "rAPCIE_CONFIG_LINKSTS",
            "time_has_elapsed",
            "dprintf",
            "dprintf",
            "rAPCIE_CONFIG_LINKSTS",
            "rAPCIE_CONFIG_LINKPMGRSTS",
            "dprintf",
            "spin",
            "dart_init",
            "apcie_setup_root_port_bridge",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex"
        ],
        "apcie_disable_link": [
            "apcie_disable_link",
            "dprintf",
            "rAPCIE_COUNTER_COMMAND",
            "rAPCIE_CONFIG_PMETO",
            "system_time",
            "rAPCIE_CONFIG_PMETO",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "system_time",
            "rAPCIE_CONFIG_LINKSTS",
            "time_has_elapsed",
            "dprintf",
            "spin",
            "gpio_configure",
            "spin",
            "gpio_configure",
            "gpio_configure",
            "dart_assert_unmapped",
            "apcie_disable_link_hardware",
            "apcie_disable_root_complex",
            "apcie_free_port_bridge"
        ],
        "apcie_get_link_enable_count": [
            "apcie_get_link_enable_count"
        ],
        "apcie_update_devicetree": [
            "apcie_update_devicetree",
            "malloc",
            "bzero",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "snprintf",
            "sizeof",
            "dt_find_node",
            "bzero",
            "platform_apply_dt_tunables",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "snprintf",
            "sizeof",
            "bzero",
            "platform_apply_dt_tunables",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "dprintf",
            "bzero",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "platform_apply_dt_tunables",
            "ARRAY_SIZE",
            "RELEASE_ASSERT",
            "dt_set_prop",
            "free",
            "platform_get_chip_revision",
            "FindProperty",
            "sizeof"
        ],
        "platform_register_pci_busses": [
            "platform_register_pci_busses",
            "apcie_init"
        ],
        "platform_map_host_to_pci_addr": [
            "platform_map_host_to_pci_addr"
        ],
        "platform_map_pci_to_host_addr": [
            "platform_map_pci_to_host_addr"
        ]
    },
    "platform/s8000/dcs": {
        "dcs_enable_autorefresh": [
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AREFEN_FREQ"
        ],
        "dcs_init_Prolog": [
            "dcs_init_Prolog",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DRAM_RESETN",
            "delay_for_us"
        ],
        "dcs_init_AMC_Initial_Config": [
            "dcs_init_AMC_Initial_Config",
            "dcs_reg_write",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGTIM_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_PHYRDWRTIM_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_CASPCH_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_ACT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_SELFREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_DERATE_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_LAT_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_TAT_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_MIFQMAXCTRL_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_AMP_Initial_Config": [
            "dcs_init_AMP_Initial_Config",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPEN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_NONDQDSPD_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_NONDQDS_F",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_ODTENABLE_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQDS_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQDS_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQDQSDS_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQDQSDS_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDRES",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDRES",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLLOCKTIM",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSPDENALWYSON",
            "DCS_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPCA_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_DFICALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLCODE_CAP_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLCODE_CAP_CNTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALSEGLEN_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALTIMING_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDWRDQCALSEGLEN_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWRDWRDQCALTIMINGCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_HWRDWRDQCALTIMINGCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQCALWINDOW_F",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMPDQ_RDDQSMULFACTOR",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_CAOUTDLLSCL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSINDLLSCL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSINDLLSCL_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDCAPCFG_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLUPDTINTVL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DLLEN",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_ZCAL_FSM",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_SPARE",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPINIT"
        ],
        "dcs_init_Self_Refresh_Exit_a": [
            "dcs_init_Self_Refresh_Exit_a",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Self_Refresh_Exit_b": [
            "dcs_init_Self_Refresh_Exit_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_enable_autorefresh",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin",
            "dcs_reg_write"
        ],
        "dcs_init_ZQ_Cal_Cfg": [
            "dcs_init_ZQ_Cal_Cfg",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_mrcmd",
            "dcs_spin",
            "register",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_REG_READ_CH",
            "DCS_REG_READ_CH",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd"
        ],
        "dcs_init_AddrCfg_Cfg": [
            "dcs_init_AddrCfg_Cfg",
            "dcs_reg_write"
        ],
        "dcs_init_TotalSize_Cfg": [
            "dcs_init_TotalSize_Cfg",
            "dbgprintf",
            "dcs_reg_write",
            "dcs_reg_write",
            "dbgprintf"
        ],
        "dcs_init_Reenable_AMC_Scheduler": [
            "dcs_init_Reenable_AMC_Scheduler",
            "dcs_spin",
            "Enable",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_CA_Cal_Setup_Freq1": [
            "dcs_init_CA_Cal_Setup_Freq1",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_CA_Cal_Freq1": [
            "dcs_init_CA_Cal_Freq1"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_a": [
            "dcs_init_DQ_Cal_Setup_Freq1_a",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_SDLL_UPDATE_DEFER_EN",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_MDLLOVRRD"
        ],
        "dcs_init_DQ_Cal_Setup_Freq1_b": [
            "dcs_init_DQ_Cal_Setup_Freq1_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_wrdq_skew": [
            "dcs_init_wrdq_skew",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQSDQ_SKEWCTL"
        ],
        "dcs_init_post_wrlvl": [
            "dcs_init_post_wrlvl",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_CA_Cal_Setup_Freq0": [
            "dcs_init_CA_Cal_Setup_Freq0",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_DQFLTCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_a": [
            "dcs_init_DQ_Cal_Setup_Freq0_a",
            "dcs_mrcmd",
            "dcs_spin"
        ],
        "dcs_init_DQ_Cal_Setup_Freq0_b": [
            "dcs_init_DQ_Cal_Setup_Freq0_b",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll_all_chan",
            "dcs_spin"
        ],
        "dcs_init_Reg_for_Boot": [
            "dcs_init_Reg_for_Boot",
            "dcs_reg_write_all_chan",
            "rDCS_AMPH_SPARE",
            "dcs_mrcmd",
            "DCS_FREQ",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_WRDQDQSSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_poll_all_chan",
            "rDCS_AMP_RDSDLLCTRL",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_MoreFeatures": [
            "dcs_init_MoreFeatures",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_enable_autorefresh",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_Fast_Critical_Word_Forwarding": [
            "dcs_init_Fast_Critical_Word_Forwarding",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "dcs_reg_poll",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write"
        ],
        "dcs_init_Gating_Global_Timers": [
            "dcs_init_Gating_Global_Timers",
            "dcs_get_memory_device_info",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_AMPCLK",
            "dcs_reg_write_all_chan",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_PWRMNGTPARAM_FREQ",
            "dcs_reg_write_all_chan",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQ2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_PREFREQCHNG2FREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_CAL2PREFREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_CAL2PREFREQCHNGDLY",
            "dcs_reg_write",
            "rGLBTIMER_FREQCHNG2PSTCALDLY",
            "dcs_reg_write",
            "rGLBTIMER_FREQCHNG2PSTCALDLY",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "dcs_reg_write",
            "rGLBTIMER_VOLTRAMP2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_VOLTRAMP2ALLBANKDLY",
            "dcs_reg_write",
            "rGLBTIMER_ALLBANK2PMGRACKDLY",
            "dcs_reg_write",
            "rGLBTIMER_ALLBANK2PMGRACKDLY",
            "dcs_reg_write_all_chan"
        ],
        "dcs_init_ODTS": [
            "dcs_init_ODTS",
            "dcs_mrcmd",
            "dcs_reg_write_all_chan"
        ],
        "shim_apply_samsung_workaround": [
            "shim_apply_samsung_workaround"
        ],
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "initialized",
            "DCS_REG_READ_CH",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "dcs_init",
            "dcs_get_memory_device_info",
            "DCS_REG_ACCESS",
            "rDCS_MCU_AREFEN_FREQ"
        ],
        "dcs_lock_down_mcc": [
            "dcs_lock_down_mcc"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "dcs_get_memory_size"
        ],
        "dcs_enable_slow_boot": [
            "dcs_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "dcs_dram_workarounds": [
            "dcs_dram_workarounds",
            "dcs_get_memory_device_info",
            "DCS_REG_READ_CH",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "DCS_REG_READ_CH",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_mrcmd",
            "DCS_REG_READ_CH",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_AUTOREF_FREQ",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_reg_write_all_chan",
            "rDCS_AMP_VREF_F",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_mrcmd"
        ],
        "dcs_dram_workarounds_step12": [
            "dcs_dram_workarounds_step12",
            "dcs_get_memory_device_info",
            "dcs_mrcmd",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_mrcmd",
            "dcs_spin",
            "dcs_reg_write_all_chan",
            "rDCS_MCU_FREQCHNGCTL_FREQ"
        ],
        "dcs_init_config_params": [
            "dcs_init_config_params",
            "platform_get_chip_revision",
            "memcpy",
            "sizeof",
            "dcs_init_config_fixup_params"
        ],
        "dcs_aop_ddr_to_awake_post_tunables_insert": [
            "dcs_aop_ddr_to_awake_post_tunables_insert",
            "dcs_init_tunable_table",
            "dcs_reg_is_outside_dcs_block",
            "DCS_REG_ACCESS",
            "reconfig_command_write",
            "DCS_REG_READ_CH",
            "reconfig_command_write"
        ],
        "dcs_restore_calibration_results": [
            "dcs_restore_calibration_results",
            "reconfig_command_write",
            "rAMP_CASDLLCTRL",
            "reconfig_command_write",
            "rAMP_CSSDLLCTRL",
            "reconfig_command_write",
            "rAMP_CKSDLLCTRL",
            "reconfig_command_write",
            "rAMP_CAWRLVLSDLLCODE",
            "reconfig_command_read",
            "rAMP_CAWRLVLSDLLCODE",
            "reconfig_command_write",
            "rAMP_CADESKEW_CTRL",
            "reconfig_command_write",
            "rAMP_CSDESKEW_CTRL",
            "reconfig_command_write",
            "rAMP_CKDESKEW_CTRL",
            "reconfig_command_write",
            "rAMP_DQWRLVLSDLLCODE",
            "reconfig_command_write",
            "rDCS_AMP_VREF_F",
            "reconfig_command_write",
            "rDCS_MCU_AUTOREF_FREQ",
            "reconfig_command_write",
            "rDCS_AMP_CAMDLL_VTSCALE_REFCNTL",
            "reconfig_command_write",
            "rDCS_AMP_RDMDLL_VTSCALE_REFCNTL",
            "reconfig_command_write",
            "rDCS_AMP_WRMDLL_VTSCALE_REFCNTL",
            "reconfig_command_write",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "reconfig_command_write",
            "rDCS_AMP_VREF_F",
            "reconfig_command_write",
            "rDCS_AMP_VREF_F",
            "reconfig_command_write",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "reconfig_command_write",
            "rDCS_MCU_FREQCHNGCTL_FREQ",
            "reconfig_command_write"
        ]
    },
    "platform/s8000/pmgr": {
        "pmgr_platform_set_perf_state": [
            "pmgr_platform_set_perf_state",
            "pmgr_platform_get_freq",
            "set_gfx_perf_state",
            "config_apsc_acc_state",
            "set_gfx_perf_state",
            "config_apsc_acc_state"
        ],
        "pmgr_platform_get_freq": [
            "pmgr_platform_get_freq",
            "operating_point_get_params",
            "operating_point_get_params"
        ],
        "pmgr_platform_get_perf_state": [
            "pmgr_platform_get_perf_state",
            "rACC_DVFM_ST",
            "platform_get_dwi_to_mv",
            "ACC_PWRCTL_DVFM_ST0_SAFE_VOL_XTRCT",
            "rACC_DVFM_ST",
            "platform_get_dwi_to_mv",
            "ACC_PWRCTL_DVFM_ST0_EXT_SRAM_VOL_XTRCT",
            "rACC_DVFM_ST_EXT",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "PMGR_PLL_FREQ",
            "platform_get_dwi_to_mv",
            "PMGR_GFX_PERF_STATE_ENTRY0A_VOLTAGE_XTRCT",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "platform_get_dwi_to_mv",
            "PMGR_GFX_PERF_STATE_ENTRY0B_SRAM_VOLTAGE_XTRCT",
            "rPMGR_GFX_PERF_STATE_ENTRY_B",
            "platform_get_dwi_to_mv",
            "PMGR_SOC_PERF_STATE_ENTRY_0C_VOLTAGE_XTRCT",
            "rPMGR_SOC_PERF_STATE_ENTRY_C"
        ],
        "platform_power_spin": [
            "platform_power_spin",
            "arm_no_wfe_spin"
        ],
        "pmgr_platform_config_uvwarn": [
            "pmgr_platform_config_uvwarn",
            "pmgr_platform_get_perf_state",
            "panic",
            "platform_convert_voltages",
            "platform_convert_voltages",
            "platform_get_dwi_to_mv",
            "panic",
            "pmu_uvwarn_config"
        ],
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "enable_bira_work_around",
            "config_apsc_acc_state",
            "clocks_quiesce_internal",
            "apply_tunables",
            "config_apsc_acc_state",
            "config_soc_perf_state",
            "PMGR_VOLMAN_BUCK_MAP_CPU_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_CPU_SRAM_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_SOC_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_GFX_INSRT",
            "PMGR_VOLMAN_BUCK_MAP_GFX_SRAM_INSRT",
            "config_apsc_acc_state",
            "dvfmperf_get_voltage_index",
            "config_apsc_acc_state",
            "dvfmperf_get_voltage_index",
            "config_soc_perf_state",
            "dwi_init",
            "dwi_init",
            "entry",
            "enable_cpu_pll_reset",
            "set_apsc_acc_state",
            "set_apsc_acc_state",
            "dvfmperf_get_voltage_index",
            "set_gfx_perf_state",
            "rPMGR_PLL_CFG",
            "rPMGR_PLL_CTL",
            "rPMGR_PLL_CTL",
            "set_lpo",
            "set_pll",
            "set_pll",
            "set_pll",
            "chipid_get_chip_id",
            "chipid_get_chip_revision",
            "chipid_get_chip_id",
            "chipid_get_chip_id",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_nco_clocks",
            "set_soc_perf_state",
            "sizeof",
            "sizeof",
            "pmgr_set_clkcfg",
            "power_on_sep",
            "clocks_get_frequencies"
        ],
        "dump_clock_frequencies": [
            "dump_clock_frequencies",
            "dprintf"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "get_apsc_acc_state",
            "set_apsc_acc_state",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "get_pll",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "get_pll",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "PMGR_SOC_PERF_STATE_ENTRY_MCU_REF",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "set_soc_perf_state",
            "chipid_get_chip_id",
            "chipid_get_chip_id",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "PMGR_SOC_PERF_STATE_ENTRY_0A_MCU_REF_SRC_SEL_XTRCT",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "PMGR_SOC_PERF_STATE_ENTRY_0A_MCU_REF_SRC_SEL_INSRT",
            "rPMGR_SOC_PERF_STATE_ENTRY_A",
            "PMGR_SOC_PERF_STATE_TO_ENTRY",
            "set_soc_perf_state",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency",
            "set_pll",
            "get_pll",
            "clocks_get_frequencies_range",
            "clock_update_frequency",
            "clocks_get_frequencies_range"
        ],
        "clock_gate": [
            "clock_gate",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "reset",
            "wdt_system_reset",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init",
            "init_thermal_registers"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX",
            "spin"
        ],
        "clock_set_device_reset": [
            "clock_set_device_reset",
            "PMGR_VALID_DEVICE",
            "PMGR_DEVICE_INDEX"
        ],
        "clock_get_pcie_refclk_good": [
            "clock_get_pcie_refclk_good"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "rACC_DVFM_ST",
            "rACC_DVFM_ST",
            "dvfmperf_get_voltage_index",
            "config_apsc_acc_state",
            "rACC_DVFM_ST",
            "rACC_DVFM_ST",
            "rACC_DVFM_ST",
            "FindProperty",
            "sizeof",
            "pmgr_binning_menu_update_states",
            "pmgr_get_dvfm_data",
            "FindProperty",
            "sizeof",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "panic",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_acc_state",
            "platform_get_dwi_to_mv",
            "ACC_PWRCTL_DVFM_ST0_SAFE_VOL_XTRCT",
            "rACC_DVFM_ST",
            "FindProperty",
            "sizeof",
            "chipid_get_total_rails_leakage"
        ],
        "pmgr_gfx_update_device_tree": [
            "pmgr_gfx_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "rPMGR_GFX_PERF_STATE_ENTRY_A",
            "PMGR_PLL_FREQ",
            "platform_get_dwi_to_mv",
            "FindProperty",
            "FindProperty"
        ],
        "pmgr_awake_to_aop_ddr_pre_sequence_insert": [
            "pmgr_awake_to_aop_ddr_pre_sequence_insert",
            "reconfig_command_write",
            "PMGR_THERMAL_0_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "PMGR_THERMAL_1_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "PMGR_THERMAL_2_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "PMGR_THERMAL_3_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "ACC_THERMAL_THRM0_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "ACC_THERMAL_THRM1_CTL0_CLR_ENABLE_INSRT",
            "reconfig_command_write",
            "ACC_THERMAL_THRM2_CTL0_CLR_ENABLE_INSRT"
        ],
        "pmgr_aop_ddr_to_awake_post_sequence_insert_pll": [
            "pmgr_aop_ddr_to_awake_post_sequence_insert_pll",
            "apply_tunables",
            "pmgr_reconfig_pll"
        ],
        "pmgr_aop_ddr_to_awake_post_sequence_insert": [
            "pmgr_aop_ddr_to_awake_post_sequence_insert",
            "pmgr_reconfig_post",
            "reconfig_command_write",
            "chipid_get_soc_temp_sensor_trim",
            "reconfig_command_write",
            "chipid_get_soc_temp_sensor_trim",
            "reconfig_command_write",
            "chipid_get_soc_temp_sensor_trim",
            "reconfig_command_write",
            "chipid_get_soc_temp_sensor_trim",
            "sizeof",
            "sizeof",
            "reconfig_command_write"
        ],
        "pmgr_s2r_aop_to_aop_ddr_post_sequence_insert_pwrgate": [
            "pmgr_s2r_aop_to_aop_ddr_post_sequence_insert_pwrgate",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write",
            "reconfig_command_write"
        ]
    },
    "platform/s8000/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode",
            "MINIPMGR_FUSE_CFG_FUSE0_PRODUCTION_MODE_XTRCT"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "mode",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURE_MODE_XTRCT"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain",
            "MINIPMGR_FUSE_CFG_FUSE0_SECURITY_DOMAIN_XTRCT"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id",
            "MINIPMGR_FUSE_CFG_FUSE0_BID_XTRCT"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch",
            "MINIPMGR_FUSE_CFG_FUSE0_MINIMUM_EPOCH_XTRCT"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision",
            "defined",
            "MINIPMGR_FUSE_CFG_FUSE4_DEV_VERSION_XTRCT",
            "defined",
            "MINIPMGR_FUSE_CFG_FUSE4_CHIP_REV_MAJOR_XTRCT",
            "MINIPMGR_FUSE_CFG_FUSE4_CHIP_REV_MINOR_XTRCT"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_cpu_sram_voltage": [
            "chipid_get_cpu_sram_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_gpu_voltage": [
            "chipid_get_gpu_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_gpu_sram_voltage": [
            "chipid_get_gpu_sram_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_sram_voltage": [
            "chipid_get_sram_voltage",
            "pmgr_binning_get_mv",
            "chipid_get_fuse_revision",
            "panic"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_XTRCT"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock",
            "MINIPMGR_FUSE_CFG_FUSE1_AP_LOCK_INSRT",
            "asm",
            "chipid_get_fuse_lock",
            "panic"
        ],
        "chipid_get_fuse_seal": [
            "chipid_get_fuse_seal",
            "MINIPMGR_FUSE_CFG_FUSE1_SEAL_FUSES_XTRCT"
        ],
        "chipid_get_lpo_trim": [
            "chipid_get_lpo_trim",
            "chipid_get_fuse_revision",
            "MINIPMGR_FUSE_CFG_FUSE2_LPO_TRIM_XTRCT"
        ],
        "chipid_get_pcie_txpll_vco_v2i_i_set": [
            "chipid_get_pcie_txpll_vco_v2i_i_set",
            "MINIPMGR_FUSE_CFG_FUSE3_PCIE_TXPLL_VCO_V2I_I_SET_XTRCT"
        ],
        "chipid_get_pcie_txpll_vco_v2i_pi_set": [
            "chipid_get_pcie_txpll_vco_v2i_pi_set",
            "MINIPMGR_FUSE_CFG_FUSE3_PCIE_TXPLL_VCO_V2I_PI_SET_XTRCT"
        ],
        "chipid_get_pcie_refpll_vco_v2i_i_set": [
            "chipid_get_pcie_refpll_vco_v2i_i_set",
            "MINIPMGR_FUSE_CFG_FUSE4_PCIE_REFPLL_VCO_V2I_I_SET_XTRCT"
        ],
        "chipid_get_pcie_refpll_vco_v2i_pi_set": [
            "chipid_get_pcie_refpll_vco_v2i_pi_set",
            "MINIPMGR_FUSE_CFG_FUSE4_PCIE_REFPLL_VCO_V2I_PI_SET_XTRCT"
        ],
        "chipid_get_pcie_rx_ldo": [
            "chipid_get_pcie_rx_ldo",
            "MINIPMGR_FUSE_CFG_FUSE3_PCIE_RX_LDO_XTRCT"
        ],
        "chipid_get_pcie_refpll_fcal_vco_digctrl": [
            "chipid_get_pcie_refpll_fcal_vco_digctrl",
            "MINIPMGR_FUSE_CFG_FUSE4_PCIE_REFPLL_FCAL_VCO_DIGCTRL_XTRCT"
        ],
        "chipid_get_soc_temp_sensor_trim": [
            "chipid_get_soc_temp_sensor_trim",
            "defined",
            "chipid_get_chip_revision",
            "MINIPMGR_FUSE_CFG_FUSE2_THERMAL_SEN0_XTRCT_V1",
            "MINIPMGR_FUSE_CFG_FUSE2_THERMAL_SEN1_XTRCT_V1",
            "MINIPMGR_FUSE_CFG_FUSE3_THERMAL_SEN2_XTRCT_V1",
            "panic",
            "panic"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision",
            "pmgr_binning_get_revision"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ],
        "chipid_get_fpga_block_instantiation": [
            "chipid_get_fpga_block_instantiation",
            "panic"
        ]
    },
    "platform/s8000/include/platform": {},
    "platform/s8000/include/platform/soc": {},
    "platform/s8000/include/platform/soc/s8001": {},
    "platform/s8000/include/platform/soc/s8001/b0/tunable": {},
    "platform/s8000/include/platform/soc/s8001/a0/tunable": {},
    "platform/s8000/include/platform/soc/s8003": {},
    "platform/s8000/include/platform/soc/s8003/a1/tunable": {},
    "platform/s8000/include/platform/soc/s8003/a0/tunable": {},
    "platform/s8000/include/platform/soc/s8000": {},
    "platform/s8000/include/platform/soc/s8000/c0/tunable": {},
    "platform/s8000/include/platform/soc/s8000/b0/tunable": {},
    "platform/s5l8960x": {
        "platform_early_init": [
            "platform_early_init",
            "chipid_get_fuse_lock",
            "panic",
            "chipid_get_chip_revision",
            "platform_keys_disabled",
            "ccc_enable_custom_errors",
            "platform_power_init",
            "miu_init",
            "clocks_init",
            "interrupt_init",
            "timer_init",
            "usbphy_power_down",
            "uart_init",
            "debug_enable_uarts",
            "shmcon_init",
            "platform_get_chip_revision",
            "platform_not_supported",
            "thermal_init",
            "iic_init",
            "platform_init_power",
            "boot_check_stage",
            "boot_set_stage",
            "power_get_nvram",
            "debug_enable_uarts",
            "target_early_init"
        ],
        "platform_late_init": [
            "platform_late_init",
            "env_set_uint",
            "clock_gate",
            "env_get_bool",
            "usb_early_init",
            "power_late_init",
            "target_late_init",
            "mcu_late_init",
            "mcu_late_init",
            "csi_late_init"
        ],
        "platform_init_setup_clocks": [
            "platform_init_setup_clocks",
            "clocks_set_default"
        ],
        "platform_init_hwpins": [
            "platform_init_hwpins",
            "platform_init_boot_strap",
            "gpio_init_pinconfig"
        ],
        "platform_init_internal_mem": [
            "platform_init_internal_mem",
            "miu_initialize_internal_ram"
        ],
        "platform_init_mainmem": [
            "platform_init_mainmem",
            "miu_initialize_dram"
        ],
        "platform_init_mainmem_map": [
            "platform_init_mainmem_map"
        ],
        "platform_init_power": [
            "platform_init_power",
            "power_init"
        ],
        "platform_init_display": [
            "platform_init_display",
            "display_pmu_init",
            "platform_quiesce_display",
            "clock_gate",
            "display_init",
            "env_get_uint",
            "power_backlight_enable"
        ],
        "platform_init_display_mem": [
            "platform_init_display_mem",
            "ROUNDDOWN",
            "ROUNDUP"
        ],
        "platform_init_mass_storage": [
            "platform_init_mass_storage",
            "asp_nand_open"
        ],
        "platform_quiesce_hardware": [
            "platform_quiesce_hardware",
            "target_quiesce_hardware",
            "usb_quiesce",
            "csi_quiesce",
            "boot_set_stage",
            "boot_set_stage",
            "boot_set_stage",
            "timer_stop_all",
            "interrupt_mask_all",
            "clocks_quiesce"
        ],
        "platform_quiesce_display": [
            "platform_quiesce_display",
            "power_backlight_enable",
            "clock_gate",
            "display_quiesce",
            "clock_gate"
        ],
        "platform_bootprep": [
            "platform_bootprep",
            "clocks_set_performance",
            "target_bootprep",
            "power_set_nvram",
            "paint_color_map_is_invalid",
            "panic",
            "platform_quiesce_display",
            "wdt_enable",
            "paint_color_map_is_invalid",
            "panic",
            "platform_bootprep_darwin",
            "wdt_enable",
            "platform_quiesce_display",
            "boot_clear_error_count",
            "platform_quiesce_display",
            "platform_quiesce_display",
            "platform_relocate_securerom",
            "miu_select_remap",
            "platform_cache_operation",
            "platform_quiesce_display",
            "chipid_set_fuse_lock",
            "security_allow_modes",
            "security_allow_modes",
            "platform_disable_keys",
            "ccc_disable_custom_errors"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "RELEASE_ASSERT",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "DRAM",
            "arm_mmu_map_range",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_rx",
            "arm_mmu_map_rw",
            "RELEASE_ASSERT",
            "arm_mmu_map_rw",
            "arm_mmu_map_rw",
            "arm_mmu_map_device_rw"
        ],
        "platform_init": [
            "platform_init",
            "defined",
            "bzero",
            "platform_enable_error_handler",
            "consistent_debug_init",
            "spi_init",
            "anc_firmware_init",
            "csi_init",
            "asp_init",
            "target_init"
        ],
        "platform_debug_init": [
            "platform_debug_init",
            "env_get_uint",
            "usb_init",
            "target_debug_init"
        ],
        "platform_poweroff": [
            "platform_poweroff",
            "platform_quiesce_display",
            "target_poweroff",
            "boot_set_stage",
            "power_shutdown"
        ],
        "platform_set_performance": [
            "platform_set_performance",
            "clocks_set_performance"
        ],
        "platform_update_device_tree": [
            "platform_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindProperty",
            "clock_get_frequency",
            "memcpy",
            "FindNode",
            "FindProperty",
            "clock_get_frequencies",
            "sizeof",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "pmgr_update_device_tree",
            "miu_update_device_tree",
            "FindNode",
            "pmgr_gfx_update_device_tree",
            "FindNode",
            "FindProperty",
            "clock_get_frequency",
            "FindNode",
            "sochot_pmgr_update_device_tree",
            "FindNode",
            "sochot_ccc_update_device_tree",
            "FindNode",
            "temp_sensor_pmgr_update_device_tree",
            "FindNode",
            "temp_sensor_pmgr_update_device_tree",
            "FindNode",
            "temp_sensor_ccc_update_device_tree",
            "FindNode",
            "temp_sensor_ccc_update_device_tree",
            "FindNode",
            "FindProperty",
            "platform_get_chip_revision",
            "FindNode",
            "usbphy_update_device_tree",
            "target_update_device_tree"
        ],
        "platform_get_board_id": [
            "platform_get_board_id"
        ],
        "platform_get_boot_config": [
            "platform_get_boot_config"
        ],
        "platform_get_boot_device": [
            "platform_get_boot_device",
            "platform_get_boot_config"
        ],
        "platform_enable_boot_interface": [
            "platform_enable_boot_interface",
            "sizeof",
            "sizeof",
            "dprintf",
            "gpio_configure",
            "dprintf",
            "gpio_configure"
        ],
        "platform_get_nonce": [
            "platform_get_nonce",
            "platform_consume_nonce"
        ],
        "platform_get_sep_nonce": [
            "platform_get_sep_nonce",
            "sep_client_get_nonce"
        ],
        "platform_get_ecid_image_personalization_required": [
            "platform_get_ecid_image_personalization_required"
        ],
        "platform_get_osc_frequency": [
            "platform_get_osc_frequency",
            "chipid_get_osc_frequency"
        ],
        "platform_get_usb_cable_connected": [
            "platform_get_usb_cable_connected",
            "usbphy_is_cable_connected"
        ],
        "platform_set_dfu_status": [
            "platform_set_dfu_status",
            "gpio_write"
        ],
        "platform_get_force_dfu": [
            "platform_get_force_dfu",
            "gpio_read"
        ],
        "platform_translate_key_selector": [
            "platform_translate_key_selector",
            "platform_get_current_production_mode"
        ],
        "platform_set_usb_brick_detect": [
            "platform_set_usb_brick_detect",
            "usbphy_set_dpdm_monitor"
        ],
        "platform_disable_keys": [
            "platform_disable_keys",
            "aes_ap_disable_keys",
            "aes_ap_disable_keys"
        ],
        "platform_keys_disabled": [
            "platform_keys_disabled",
            "aes_ap_keys_disabled",
            "aes_ap_keys_disabled"
        ],
        "platform_demote_production": [
            "platform_demote_production",
            "chipid_clear_production_mode"
        ],
        "platform_get_memory_size": [
            "platform_get_memory_size",
            "panic"
        ],
        "platform_get_memory_manufacturer_id": [
            "platform_get_memory_manufacturer_id",
            "panic"
        ],
        "platform_set_memory_info": [
            "platform_set_memory_info"
        ],
        "platform_restore_system": [
            "platform_restore_system",
            "consistent_debug_resume",
            "power_will_resume",
            "dprintf",
            "platform_bootprep_darwin",
            "vector",
            "dprintf",
            "prepare_and_jump",
            "panic"
        ],
        "platform_asynchronous_exception": [
            "platform_asynchronous_exception",
            "ccc_handle_asynchronous_exception"
        ],
        "platform_get_boot_manifest_hash": [
            "platform_get_boot_manifest_hash",
            "RELEASE_ASSERT"
        ],
        "platform_set_boot_manifest_hash": [
            "platform_set_boot_manifest_hash"
        ],
        "platform_get_mix_n_match_prevention_status": [
            "platform_get_mix_n_match_prevention_status"
        ],
        "platform_set_mix_n_match_prevention_status": [
            "platform_set_mix_n_match_prevention_status"
        ],
        "platform_set_consistent_debug_root_pointer": [
            "platform_set_consistent_debug_root_pointer"
        ],
        "platform_convert_voltages": [
            "platform_convert_voltages",
            "power_get_buck_value_fpga",
            "power_get_buck_value"
        ],
        "platform_get_cpu_voltages": [
            "platform_get_cpu_voltages",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_memory_region_base_optional": [
            "platform_get_memory_region_base_optional",
            "platform_get_memory_region_size"
        ],
        "platform_get_memory_region_size_optional": [
            "platform_get_memory_region_size_optional",
            "platform_get_memory_region_base",
            "platform_get_memory_region_base",
            "platform_get_display_memory_size"
        ],
        "platform_get_gpu_voltages": [
            "platform_get_gpu_voltages",
            "chipid_get_gpu_voltage"
        ],
        "platform_get_dwi_to_mv": [
            "platform_get_dwi_to_mv",
            "power_convert_dwi_to_mv_fpga",
            "power_convert_dwi_to_mv"
        ],
        "platform_get_base_soc_voltage": [
            "platform_get_base_soc_voltage",
            "chipid_get_soc_voltage"
        ],
        "platform_get_base_cpu_voltage": [
            "platform_get_base_cpu_voltage",
            "chipid_get_cpu_voltage"
        ],
        "platform_get_base_ram_voltage": [
            "platform_get_base_ram_voltage",
            "chipid_get_ram_voltage"
        ],
        "platform_get_soc_voltages": [
            "platform_get_soc_voltages",
            "platform_get_base_soc_voltage"
        ],
        "do_sleep_token_test": [
            "do_sleep_token_test",
            "security_create_sleep_token",
            "dprintf",
            "security_validate_sleep_token",
            "dprintf",
            "dprintf"
        ]
    },
    "platform/s5l8960x/error_handler": {
        "platform_enable_error_handler": [
            "platform_enable_error_handler",
            "enable_amc_checks",
            "enable_cp_checks"
        ]
    },
    "platform/s5l8960x/miu": {
        "miu_initialize_internal_ram": [
            "miu_initialize_internal_ram",
            "platform_get_security_epoch"
        ],
        "miu_init": [
            "miu_init",
            "platform_get_security_epoch",
            "panic",
            "miu_configure_bridge",
            "ausb_setup_widgets"
        ],
        "miu_suspend": [
            "miu_suspend"
        ],
        "miu_initialize_dram": [
            "miu_initialize_dram",
            "mcu_initialize_dram"
        ],
        "miu_select_remap": [
            "miu_select_remap"
        ],
        "miu_bypass_prep": [
            "miu_bypass_prep"
        ],
        "miu_update_device_tree": [
            "miu_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "small",
            "sizeof",
            "memcpy",
            "sizeof"
        ]
    },
    "platform/s5l8960x/pmgr": {
        "platform_power_spin": [
            "platform_power_spin",
            "arm_no_wfe_spin"
        ],
        "clocks_init": [
            "clocks_init",
            "clocks_get_frequencies"
        ],
        "clocks_set_default": [
            "clocks_set_default",
            "rCCC_DVFM_ST",
            "platform_get_chip_revision",
            "set_ccc_pll_relock_div2",
            "clocks_quiesce_internal",
            "rCCC_DVFM_ST",
            "platform_get_cpu_voltages",
            "platform_convert_voltages",
            "rCCC_DVFM_ST",
            "rCCC_DVFM_ST",
            "rCCC_DVFM_ST",
            "CCC_DVFM_CFG_TEMPTHRES0",
            "CCC_DVFM_CFG_TEMPTHRES1",
            "CCC_DVFM_CFG_TEMPOFFST0",
            "CCC_DVFM_CFG_TEMPOFFST1",
            "dwi_init",
            "dwi_init",
            "set_apsc_ccc_state",
            "platform_get_gpu_voltages",
            "sizeof",
            "sizeof",
            "platform_convert_voltages",
            "sizeof",
            "sizeof",
            "sizeof",
            "sizeof",
            "set_gfx_perf_state",
            "rPMGR_PLL_CTL",
            "rPMGR_PLL_CFG",
            "PMU",
            "PMGR_ACG_CFG_PLLX_AUTO_DISABLE",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_pll",
            "set_nco_clocks",
            "SPIN_W_TMO_WHILE",
            "SPIN_W_TMO_WHILE",
            "power_on_sep",
            "clocks_get_frequencies",
            "apply_pmgr_tunables",
            "apply_ccc_tunables"
        ],
        "dump_clock_frequencies": [
            "dump_clock_frequencies",
            "dprintf"
        ],
        "clocks_quiesce": [
            "clocks_quiesce",
            "clocks_quiesce_internal"
        ],
        "clocks_set_performance": [
            "clocks_set_performance",
            "get_apsc_ccc_state",
            "set_apsc_ccc_state",
            "get_amc_cfg_sel",
            "panic",
            "set_amc_clk_config",
            "clocks_get_frequencies_range"
        ],
        "clock_get_frequencies": [
            "clock_get_frequencies",
            "memcpy",
            "sizeof"
        ],
        "clock_get_frequency": [
            "clock_get_frequency"
        ],
        "clock_set_frequency": [
            "clock_set_frequency"
        ],
        "clock_gate": [
            "clock_gate",
            "SPIN_W_TMO_WHILE"
        ],
        "platform_system_reset": [
            "platform_system_reset",
            "boot_set_stage",
            "wdt_system_reset"
        ],
        "platform_reset": [
            "platform_reset",
            "boot_set_stage",
            "wdt_chip_reset"
        ],
        "platform_power_init": [
            "platform_power_init"
        ],
        "thermal_init": [
            "thermal_init",
            "init_thermal_sensors",
            "init_ccc_thermal_sensors",
            "init_sochot",
            "init_ccc_sochot"
        ],
        "platform_watchdog_tickle": [
            "platform_watchdog_tickle",
            "target_watchdog_tickle"
        ],
        "clock_reset_device": [
            "clock_reset_device",
            "spin"
        ],
        "pmgr_update_device_tree": [
            "pmgr_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_ccc_state",
            "panic",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "get_freq_from_ccc_state",
            "panic",
            "FindProperty",
            "sizeof",
            "panic",
            "platform_get_cpu_voltages",
            "get_freq_from_ccc_state",
            "FindProperty",
            "sizeof",
            "chipid_get_total_rails_leakage"
        ],
        "pmgr_gfx_update_device_tree": [
            "pmgr_gfx_update_device_tree",
            "FindProperty",
            "sizeof",
            "panic",
            "rPMGR_GFX_PERF_STATE_ENTRY",
            "PMGR_PLL_FREQ",
            "platform_get_dwi_to_mv",
            "FindProperty"
        ],
        "sochot_pmgr_update_device_tree": [
            "sochot_pmgr_update_device_tree"
        ],
        "sochot_ccc_update_device_tree": [
            "sochot_ccc_update_device_tree"
        ],
        "temp_sensor_pmgr_update_device_tree": [
            "temp_sensor_pmgr_update_device_tree"
        ],
        "temp_sensor_ccc_update_device_tree": [
            "temp_sensor_ccc_update_device_tree"
        ],
        "init_thermal_sensors": [
            "init_thermal_sensors",
            "chipid_get_fused_pmgr_thermal_sensor_cal_70C",
            "chipid_get_fused_pmgr_thermal_sensor_cal_25C",
            "chipid_valid_thermal_sensor_cal_data_expected",
            "panic",
            "dprintf"
        ],
        "init_sochot": [
            "init_sochot"
        ],
        "init_ccc_thermal_sensors": [
            "init_ccc_thermal_sensors",
            "chipid_get_fused_ccc_thermal_sensor_cal_70C",
            "chipid_get_fused_ccc_thermal_sensor_cal_25C",
            "chipid_valid_thermal_sensor_cal_data_expected",
            "panic",
            "dprintf"
        ],
        "init_ccc_sochot": [
            "init_ccc_sochot"
        ]
    },
    "platform/s5l8960x/chipid": {
        "chipid_get_current_production_mode": [
            "chipid_get_current_production_mode"
        ],
        "chipid_get_raw_production_mode": [
            "chipid_get_raw_production_mode"
        ],
        "chipid_clear_production_mode": [
            "chipid_clear_production_mode"
        ],
        "chipid_get_secure_mode": [
            "chipid_get_secure_mode",
            "mode"
        ],
        "chipid_get_security_domain": [
            "chipid_get_security_domain"
        ],
        "chipid_get_board_id": [
            "chipid_get_board_id"
        ],
        "chipid_get_minimum_epoch": [
            "chipid_get_minimum_epoch"
        ],
        "chipid_get_chip_id": [
            "chipid_get_chip_id"
        ],
        "chipid_get_chip_revision": [
            "chipid_get_chip_revision"
        ],
        "chipid_get_osc_frequency": [
            "chipid_get_osc_frequency"
        ],
        "chipid_get_ecid_id": [
            "chipid_get_ecid_id"
        ],
        "chipid_get_die_id": [
            "chipid_get_die_id"
        ],
        "chipid_get_soc_voltage": [
            "chipid_get_soc_voltage",
            "chipid_get_binning_revision",
            "get_soc_bin_voltage"
        ],
        "chipid_get_cpu_voltage": [
            "chipid_get_cpu_voltage",
            "chipid_get_binning_revision",
            "get_ccc_bin_voltage"
        ],
        "chipid_get_ram_voltage": [
            "chipid_get_ram_voltage"
        ],
        "chipid_get_gpu_voltage": [
            "chipid_get_gpu_voltage",
            "chipid_get_binning_revision",
            "get_gpu_bin_voltage"
        ],
        "chipid_get_fuse_lock": [
            "chipid_get_fuse_lock"
        ],
        "chipid_set_fuse_lock": [
            "chipid_set_fuse_lock"
        ],
        "chipid_valid_thermal_sensor_cal_data_expected": [
            "chipid_valid_thermal_sensor_cal_data_expected"
        ],
        "chipid_get_fused_pmgr_thermal_sensor_cal": [
            "chipid_get_fused_pmgr_thermal_sensor_cal"
        ],
        "chipid_get_fused_ccc_thermal_sensor_cal": [
            "chipid_get_fused_ccc_thermal_sensor_cal"
        ],
        "chipid_get_fused_pmgr_thermal_sensor_cal_70C": [
            "chipid_get_fused_pmgr_thermal_sensor_cal_70C",
            "chipid_get_fused_pmgr_thermal_sensor_cal"
        ],
        "chipid_get_fused_pmgr_thermal_sensor_cal_25C": [
            "chipid_get_fused_pmgr_thermal_sensor_cal_25C",
            "chipid_get_fused_pmgr_thermal_sensor_cal"
        ],
        "chipid_get_fused_ccc_thermal_sensor_cal_70C": [
            "chipid_get_fused_ccc_thermal_sensor_cal_70C",
            "chipid_get_fused_ccc_thermal_sensor_cal"
        ],
        "chipid_get_fused_ccc_thermal_sensor_cal_25C": [
            "chipid_get_fused_ccc_thermal_sensor_cal_25C",
            "chipid_get_fused_ccc_thermal_sensor_cal"
        ],
        "chipid_get_fuse_revision": [
            "chipid_get_fuse_revision"
        ],
        "chipid_get_total_rails_leakage": [
            "chipid_get_total_rails_leakage"
        ]
    },
    "platform/s5l8960x/include/platform": {},
    "platform/s5l8960x/include/platform/soc": {},
    "platform/s5l8960x/amc": {
        "mcu_initialize_dram": [
            "mcu_initialize_dram",
            "initialized",
            "clock_gate",
            "clock_gate",
            "clock_gate",
            "amc_init"
        ],
        "mcu_bypass_prep": [
            "mcu_bypass_prep",
            "amc_phy_bypass_prep"
        ],
        "mcu_get_memory_size": [
            "mcu_get_memory_size",
            "amc_get_memory_size"
        ],
        "amc_configure_address_decoding_and_mapping": [
            "amc_configure_address_decoding_and_mapping",
            "platform_memory_barrier",
            "amc_get_params",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH",
            "rAMC_MCSADDRBNKHASH"
        ],
        "amc_enable_slow_boot": [
            "amc_enable_slow_boot",
            "clocks_set_performance",
            "spin",
            "clocks_set_performance",
            "spin"
        ],
        "amc_calibration_start": [
            "amc_calibration_start",
            "platform_memory_barrier",
            "amc_get_params"
        ],
        "amc_enable_rddqcal": [
            "amc_enable_rddqcal",
            "platform_memory_barrier",
            "rAMC_AREFEN_FREQ",
            "rAMC_AREFEN_FREQ",
            "rAMC_AREFEN_FREQ"
        ],
        "amc_wrdqcal_start": [
            "amc_wrdqcal_start",
            "platform_memory_barrier",
            "amc_get_params",
            "amc_get_params",
            "platform_memory_barrier"
        ],
        "amc_finalize": [
            "amc_finalize",
            "platform_memory_barrier",
            "amc_get_params",
            "amc_get_params",
            "amc_enable_autorefresh",
            "platform_memory_barrier"
        ],
        "amc_dram_workarounds": [
            "amc_dram_workarounds",
            "amc_get_memory_device_info",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd",
            "amc_mrcmd"
        ],
        "amc_dram_shift_dq_offset": [
            "amc_dram_shift_dq_offset",
            "amc_get_memory_device_info",
            "amcconfig",
            "amcconfig",
            "amc_get_params",
            "amc_get_params",
            "amc_get_params",
            "case"
        ]
    },
    "include": {},
    "include/gcc": {},
    "include/drivers": {},
    "include/drivers/thunderbolt": {},
    "include/drivers/usb": {},
    "include/sys": {},
    "include/corecrypto": {
        "cc3des_mode_encrypt_init": [
            "cc3des_mode_encrypt_init",
            "cc3des_ecb_encrypt_mode",
            "ccmode_factory_cbc_encrypt"
        ],
        "ccmode_factory_cbc_decrypt": [
            "ccmode_factory_cbc_decrypt",
            "CCMODE_FACTORY_CBC_DECRYPT"
        ],
        "ccmode_factory_cbc_encrypt": [
            "ccmode_factory_cbc_encrypt",
            "CCMODE_FACTORY_CBC_ENCRYPT"
        ],
        "ccmode_factory_cfb_decrypt": [
            "ccmode_factory_cfb_decrypt",
            "CCMODE_FACTORY_CFB_DECRYPT"
        ],
        "ccmode_factory_cfb_encrypt": [
            "ccmode_factory_cfb_encrypt",
            "CCMODE_FACTORY_CFB_ENCRYPT"
        ],
        "ccmode_factory_cfb8_decrypt": [
            "ccmode_factory_cfb8_decrypt",
            "CCMODE_FACTORY_CFB8_DECRYPT"
        ],
        "ccmode_factory_cfb8_encrypt": [
            "ccmode_factory_cfb8_encrypt",
            "CCMODE_FACTORY_CFB8_ENCRYPT"
        ],
        "ccmode_factory_ctr_crypt": [
            "ccmode_factory_ctr_crypt",
            "CCMODE_FACTORY_CTR_CRYPT"
        ],
        "ccmode_factory_gcm_decrypt": [
            "ccmode_factory_gcm_decrypt",
            "CCMODE_FACTORY_GCM_DECRYPT"
        ],
        "ccmode_factory_gcm_encrypt": [
            "ccmode_factory_gcm_encrypt",
            "CCMODE_FACTORY_GCM_ENCRYPT"
        ],
        "ccmode_factory_ofb_crypt": [
            "ccmode_factory_ofb_crypt",
            "CCMODE_FACTORY_OFB_CRYPT"
        ],
        "ccmode_factory_omac_decrypt": [
            "ccmode_factory_omac_decrypt",
            "CCMODE_FACTORY_OMAC_DECRYPT"
        ],
        "ccmode_factory_omac_encrypt": [
            "ccmode_factory_omac_encrypt",
            "CCMODE_FACTORY_OMAC_ENCRYPT"
        ],
        "ccmode_factory_xts_decrypt": [
            "ccmode_factory_xts_decrypt",
            "CCMODE_FACTORY_XTS_DECRYPT"
        ],
        "ccmode_factory_xts_encrypt": [
            "ccmode_factory_xts_encrypt",
            "CCMODE_FACTORY_XTS_ENCRYPT"
        ],
        "ccdigest_final": [
            "ccdigest_final",
            "final"
        ],
        "cc_xor": [
            "cc_xor"
        ],
        "cc_clz": [
            "cc_clz",
            "__builtin_clzl"
        ],
        "ccn_n": [
            "ccn_n"
        ],
        "ccn_cmp": [
            "ccn_cmp"
        ],
        "ccn_cmpn": [
            "ccn_cmpn",
            "ccn_cmp"
        ],
        "ccn_subn": [
            "ccn_subn",
            "ccn_sub1",
            "ccn_sub"
        ],
        "ccn_addn": [
            "ccn_addn",
            "ccn_add1",
            "ccn_add"
        ],
        "ccn_write_uint_padded": [
            "ccn_write_uint_padded",
            "ccn_write_uint_size",
            "cc_zero",
            "ccn_write_uint"
        ],
        "ccn_sqr": [
            "ccn_sqr",
            "ccn_mul"
        ],
        "ccn_zero": [
            "ccn_zero",
            "CC_BZERO",
            "ccn_sizeof_n"
        ],
        "ccn_seti": [
            "ccn_seti",
            "assert",
            "ccn_zero"
        ],
        "ccn_setn": [
            "ccn_setn",
            "assert",
            "assert",
            "assert",
            "ccn_set",
            "ccn_zero"
        ],
        "ccn_swap": [
            "ccn_swap",
            "CC_UNIT_TO_BIG",
            "CC_UNIT_TO_BIG",
            "CC_UNIT_TO_BIG"
        ],
        "ccn_xor": [
            "ccn_xor"
        ],
        "ccn_random": [
            "ccn_random",
            "generate",
            "ccn_sizeof_n"
        ]
    },
    "include/lib": {},
    "include/lib/net": {},
    "include/c++": {},
    "include/platform": {},
    "include/posix": {},
    "include/posix/sys": {},
    "include/posix/machine": {},
    "include/libkern": {},
    "arch/arm64": {
        "arm_fp_init": [
            "arm_fp_init",
            "arm_read_cpacr",
            "arm_write_cpacr"
        ],
        "arch_task_fp_enable": [
            "arch_task_fp_enable"
        ],
        "timer_init": [
            "timer_init",
            "arm_write_cntp_ctl"
        ],
        "timer_stop_all": [
            "timer_stop_all",
            "arm_write_cntp_ctl"
        ],
        "arm_fiq": [
            "arm_fiq",
            "_irq_enter_critical_section",
            "arm_read_cntp_ctl",
            "arm_write_cntp_ctl",
            "timer_deadline_func",
            "_irq_exit_critical_section"
        ],
        "timer_ticks_to_usecs": [
            "timer_ticks_to_usecs"
        ],
        "timer_usecs_to_ticks": [
            "timer_usecs_to_ticks"
        ],
        "timer_get_tick_rate": [
            "timer_get_tick_rate"
        ],
        "timer_get_ticks": [
            "timer_get_ticks",
            "arm_read_cntpct"
        ],
        "arm_no_wfe_spin": [
            "arm_no_wfe_spin",
            "timer_get_ticks",
            "timer_get_ticks"
        ],
        "arch_task_create": [
            "arch_task_create"
        ],
        "arm_mmu_map_range": [
            "arm_mmu_map_range",
            "get_level_shift",
            "RELEASE_ASSERT",
            "map_at_level",
            "get_start_level",
            "RELEASE_ASSERT",
            "arm_read_sctlr",
            "arm_flush_tlbs"
        ],
        "arm_mmu_map_ro": [
            "arm_mmu_map_ro",
            "arm_mmu_map_range"
        ],
        "arm_mmu_map_rw": [
            "arm_mmu_map_rw",
            "arm_mmu_map_range"
        ],
        "arm_mmu_map_rx": [
            "arm_mmu_map_rx",
            "arm_mmu_map_range"
        ],
        "arm_mmu_map_device_ro": [
            "arm_mmu_map_device_ro",
            "arm_mmu_map_range"
        ],
        "arm_mmu_map_device_rw": [
            "arm_mmu_map_device_rw",
            "arm_mmu_map_range"
        ],
        "arm_mmu_map_device_rx": [
            "arm_mmu_map_device_rx",
            "arm_mmu_map_range"
        ],
        "arm_mmu_init": [
            "arm_mmu_init",
            "arm_write_mair",
            "get_mair",
            "arm_write_tcr",
            "get_tcr",
            "get_page_granule_shift",
            "mmu_get_memmap",
            "RELEASE_ASSERT",
            "RELEASE_ASSERT",
            "get_page_granule_shift",
            "platform_mmu_setup",
            "arm_write_ttbr0",
            "arm_flush_tlbs"
        ],
        "mmu_get_start_level": [
            "mmu_get_start_level",
            "get_start_level"
        ],
        "mmu_get_tcr": [
            "mmu_get_tcr",
            "get_tcr"
        ],
        "mmu_tt_alloc": [
            "mmu_tt_alloc",
            "tt_alloc"
        ],
        "mmu_get_level_entries": [
            "mmu_get_level_entries",
            "get_level_entries"
        ],
        "mmu_get_table_flags": [
            "mmu_get_table_flags",
            "get_table_flags"
        ],
        "mmu_get_block_flags": [
            "mmu_get_block_flags",
            "get_block_flags"
        ],
        "mmu_map_at_level": [
            "mmu_map_at_level",
            "map_at_level"
        ],
        "mmu_get_tt_alloc_range": [
            "mmu_get_tt_alloc_range"
        ],
        "mmu_reset_state": [
            "mmu_reset_state"
        ],
        "arch_cpu_init": [
            "arch_cpu_init",
            "arm_write_scr",
            "arm_enable_async_aborts",
            "arm_invalidate_icache",
            "arm_invalidate_dcache",
            "arm_read_sctlr",
            "arm_mmu_init",
            "arm_write_sctlr",
            "arm_fp_init"
        ],
        "arch_cpu_quiesce": [
            "arch_cpu_quiesce",
            "arm_clean_dcache",
            "arm_read_sctlr",
            "arm_write_sctlr",
            "arm_invalidate_icache"
        ],
        "arch_cpu_init_posttasks": [
            "arch_cpu_init_posttasks"
        ],
        "get_page_granule_shift": [
            "get_page_granule_shift"
        ],
        "mmu_get_memmap": [
            "mmu_get_memmap"
        ],
        "mmu_printf": [
            "mmu_printf",
            "va_start",
            "vprintf",
            "va_end"
        ],
        "_panic": [
            "_panic",
            "malloc",
            "va_start",
            "vsnprintf",
            "va_end",
            "strstr",
            "strstr",
            "mmu_printf",
            "mmu_printf",
            "free",
            "test_unwind",
            "strstr",
            "test_unwind",
            "test_unwind"
        ],
        "check_valid_index": [
            "check_valid_index",
            "mmu_get_start_level",
            "mmu_printf",
            "test_unwind",
            "mmu_get_level_entries",
            "sizeof",
            "mmu_get_level_entries",
            "mmu_get_tt_alloc_range",
            "mmu_printf",
            "test_unwind",
            "mmu_printf",
            "test_unwind",
            "memcpy",
            "sizeof"
        ],
        "get_table_entry_hook": [
            "get_table_entry_hook",
            "get_table_entry_hook",
            "get_table_entry_internal"
        ],
        "set_table_entry_hook": [
            "set_table_entry_hook",
            "set_table_entry_hook",
            "set_table_entry_internal"
        ],
        "arm_read_sctlr": [
            "arm_read_sctlr",
            "mmu_printf",
            "arm_read_sctlr"
        ],
        "arm_write_mair": [
            "arm_write_mair",
            "mmu_printf",
            "arm_write_mair"
        ],
        "arm_write_tcr": [
            "arm_write_tcr",
            "mmu_printf",
            "arm_write_tcr"
        ],
        "arm_write_ttbr0": [
            "arm_write_ttbr0",
            "mmu_printf",
            "arm_write_ttbr0",
            "mmu_get_tt_top_level",
            "mmu_printf",
            "mmu_get_tt_top_level",
            "test_unwind"
        ],
        "arm_flush_tlbs": [
            "arm_flush_tlbs",
            "mmu_printf",
            "arm_flush_tlbs"
        ],
        "platform_mmu_setup": [
            "platform_mmu_setup",
            "mmu_get_tt_alloc_range",
            "mmu_printf",
            "platform_mmu_setup",
            "mmu_printf",
            "mmu_get_tt_top_level",
            "mmu_printf",
            "mmu_printf",
            "mmu_printf",
            "mmu_setup_func"
        ],
        "main": [
            "main",
            "reset_state",
            "test_granule_4kb",
            "test_granule_16kb",
            "test_granule_64kb",
            "test_fail_oom",
            "test_fail_range_misaligned",
            "test_fail_bad_granule",
            "test_fail_remap_existing",
            "test_fail_breaking_down",
            "test_get_tcr",
            "test_fail_get_tcr_bad_granule",
            "test_get_block_flags",
            "test_get_table_flags",
            "test_fail_get_block_flags_bad_attr",
            "test_fail_get_block_flags_bad_level",
            "test_tt_alloc",
            "test_tt_alloc",
            "test_tt_alloc",
            "test_tt_alloc_bad_level",
            "test_tt_alloc_bad_alignment",
            "test_map_at_top_level_large",
            "test_map_at_l3",
            "mmu_printf",
            "assert",
            "mmu_printf",
            "mmu_printf"
        ],
        "arm_synchronous_exception": [
            "arm_synchronous_exception",
            "ESR_EC",
            "panic",
            "ESR_ISS"
        ],
        "arm_serror_exception": [
            "arm_serror_exception",
            "ESR_EC",
            "platform_asynchronous_exception",
            "panic",
            "ESR_ISS"
        ],
        "arm_irq": [
            "arm_irq",
            "_irq_enter_critical_section",
            "platform_irq",
            "_irq_exit_critical_section"
        ]
    },
    "arch/arm64/include/arch/arm64": {},
    "arch/arm": {
        "arm_fp_init": [
            "arm_fp_init",
            "arm_read_cp_access_cr",
            "CPACR_CP_BITS",
            "CPACR_CP_BITS",
            "arm_write_cp_access_cr"
        ],
        "arm_fp_enable": [
            "arm_fp_enable",
            "arm_write_fpexc",
            "arm_write_fpscr",
            "arm_init_fp_regs"
        ],
        "arch_task_fp_enable": [
            "arch_task_fp_enable",
            "task_get_current_task",
            "arm_read_fpexc",
            "arm_write_fpexc",
            "arm_write_fpscr",
            "arm_write_fpexc"
        ],
        "arm_l1cache_dump": [
            "arm_l1cache_dump",
            "arm_read_cr",
            "arm_write_cr",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "volatile",
            "printf",
            "printf",
            "printf",
            "printf",
            "arm_clean_dcache",
            "arm_write_cr"
        ],
        "dump_l1caches": [
            "dump_l1caches",
            "arm_read_cr",
            "arm_write_cr",
            "arm_clean_dcache",
            "arm_l1cache_dump",
            "arm_l1cache_dump",
            "arm_write_cr"
        ],
        "arm_mpu_init": [
            "arm_mpu_init",
            "arm_write_iprot_region_0",
            "arm_write_dprot_region_0",
            "arm_write_dprot_region_1",
            "__builtin_clz",
            "arm_write_ins_prot_register",
            "arm_write_data_prot_register",
            "arm_write_cacheable_registers",
            "arm_write_bufferable_register"
        ],
        "arch_task_create": [
            "arch_task_create",
            "ops",
            "ABIs"
        ],
        "arm_mmu_map_section": [
            "arm_mmu_map_section",
            "panic",
            "panic",
            "attr_to_sect_flags",
            "arm_clean_dcache_line",
            "arm_flush_tlbs"
        ],
        "arm_mmu_map_section_range": [
            "arm_mmu_map_section_range",
            "panic",
            "panic",
            "attr_to_sect_flags",
            "arm_clean_dcache_line",
            "arm_flush_tlbs"
        ],
        "arm_mmu_init": [
            "arm_mmu_init",
            "arm_mmu_map_section_range",
            "sizeof",
            "platform_mmu_setup",
            "arm_write_dar",
            "arm_write_ttbcr",
            "elif",
            "arm_write_ttbcr",
            "arm_write_ttb",
            "arm_flush_tlbs"
        ],
        "arm_get_noncached_address": [
            "arm_get_noncached_address"
        ],
        "arch_cpu_init": [
            "arch_cpu_init",
            "arm_invalidate_dcache",
            "arm_invalidate_icache",
            "arm_read_aux_cr",
            "platform_get_core_idle_enable",
            "arm_write_aux_cr",
            "arm_read_cr",
            "arm_write_cr",
            "config_periph_port_remap",
            "arm_invalidate_dcache",
            "arm_enable_l1parity",
            "arm_write_cr",
            "arm_mmu_init",
            "arm_write_cr",
            "arm_fp_init",
            "arm_fp_enable"
        ],
        "arch_cpu_quiesce": [
            "arch_cpu_quiesce",
            "arm_read_aux_cr",
            "arm_write_aux_cr",
            "arm_clean_dcache",
            "arm_read_cr",
            "arm_write_cr",
            "arm_clean_invalidate_dcache",
            "arm_invalidate_icache",
            "arm_invalidate_dcache",
            "swift_write_l2cerrsts",
            "swift_write_l2cerradr"
        ],
        "arch_cpu_init_posttasks": [
            "arch_cpu_init_posttasks",
            "arm_dcc_init"
        ],
        "arch_get_noncached_address": [
            "arch_get_noncached_address",
            "arm_get_noncached_address"
        ],
        "arm_data_abort": [
            "arm_data_abort",
            "arm_read_dfsr",
            "arm_read_dfar",
            "arm_l1cache_dump",
            "arm_exception_abort"
        ],
        "arm_prefetch_abort": [
            "arm_prefetch_abort",
            "arm_read_ifsr",
            "arm_read_ifar",
            "arm_l1cache_dump",
            "arm_exception_abort"
        ],
        "arm_undefined": [
            "arm_undefined",
            "arm_exception_abort"
        ],
        "arm_syscall": [
            "arm_syscall",
            "arm_exception_abort",
            "arm_read_ifsr"
        ],
        "arch_backtrace_current_task": [
            "arch_backtrace_current_task",
            "__segment_start",
            "__segment_end",
            "arm_stack_for_status_reg",
            "arm_read_cpsr",
            "arm_backtrace",
            "arm_decode_mode",
            "arm_read_cpsr",
            "__builtin_frame_address",
            "arm_get_exception_frame",
            "arm_get_fiq_frame",
            "arm_get_interrupt_frame",
            "arm_print_frame_registers",
            "dprintf",
            "dprintf",
            "dprintf",
            "dprintf",
            "stack",
            "arm_stack_for_status_reg",
            "arm_backtrace",
            "arm_decode_mode",
            "arm_print_frame_registers",
            "arm_stack_for_status_reg",
            "arm_backtrace",
            "arm_decode_mode",
            "arm_print_frame_registers",
            "arm_backtrace",
            "arm_decode_mode"
        ],
        "arch_backtrace_task": [
            "arch_backtrace_task",
            "arm_backtrace"
        ]
    },
    "arch/arm/include/arch": {},
    "arch/arm/include/arch/arm": {},
    "arch/arm/dcc": {
        "arm_write_dcc_char": [
            "arm_write_dcc_char",
            "read_dscr",
            "write_dtr",
            "cbuf_write_char"
        ],
        "arm_read_dcc_char": [
            "arm_read_dcc_char",
            "read_dscr",
            "read_dtr"
        ],
        "arm_read_dcc_char_nowait": [
            "arm_read_dcc_char_nowait",
            "read_dscr",
            "read_dtr"
        ],
        "arm_dcc_init": [
            "arm_dcc_init",
            "arm_read_dcc_char_nowait",
            "cbuf_create",
            "task_start",
            "task_create",
            "task_start",
            "task_create"
        ]
    },
    "tests": {
        "main": [
            "main",
            "fuzz_main"
        ],
        "_panic": [
            "_panic",
            "printf",
            "va_start",
            "vprintf",
            "va_end",
            "exit"
        ],
        "test_assert_fail": [
            "test_assert_fail",
            "printf",
            "va_start",
            "vprintf",
            "va_end",
            "exit"
        ],
        "strlcpy": [
            "strlcpy",
            "strlen",
            "strlen"
        ],
        "strlcat": [
            "strlcat",
            "strlen",
            "strnlen",
            "memcpy",
            "memcpy"
        ],
        "tprintf": [
            "tprintf",
            "va_start",
            "tvprintf",
            "va_end"
        ],
        "test_expect_panic": [
            "test_expect_panic"
        ],
        "test_expect_panicked": [
            "test_expect_panicked",
            "tprintf",
            "test_unwind"
        ]
    },
    "tests/mocks": {
        "mock_syscfg_add": [
            "mock_syscfg_add",
            "calloc",
            "sizeof",
            "memcpy",
            "sizeof",
            "list_add_tail"
        ],
        "mock_syscfg_reset": [
            "mock_syscfg_reset",
            "list_remove_tail_type",
            "free"
        ],
        "syscfgFindByTag": [
            "syscfgFindByTag",
            "list_for_every_entry",
            "memcpy",
            "sizeof"
        ],
        "syscfgGetSize": [
            "syscfgGetSize"
        ],
        "syscfg_find_tag": [
            "syscfg_find_tag",
            "syscfgFindByTag",
            "syscfgGetData",
            "syscfgGetSize"
        ]
    },
    "tests/mocks/sys": {
        "_enter_critical_section": [],
        "enter_critical_section": [
            "enter_critical_section"
        ],
        "_exit_critical_section": [],
        "exit_critical_section": [
            "exit_critical_section",
            "TEST_ASSERT_GT"
        ],
        "reset_critical_section": [
            "reset_critical_section"
        ],
        "security_allow_memory": [
            "security_allow_memory"
        ],
        "security_allow_modes": [
            "security_allow_modes"
        ]
    },
    "tests/include": {}
}